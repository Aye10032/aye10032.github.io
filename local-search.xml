<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>一些Linux服务器的初始设置</title>
    <link href="/2024/08/01/2024-08-01-ubuntu-init/"/>
    <url>/2024/08/01/2024-08-01-ubuntu-init/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>本文基于Ubuntu22.04系统</p><h2 id="初始系统安装">初始系统安装</h2><h3 id="ssh登录相关">ssh登录相关</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install openssh-server<br></code></pre></td></tr></table></figure><h3 id="安装浏览器">安装浏览器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb<br><span class="hljs-built_in">sudo</span> dpkg -i google-chrome-stable_current_amd64.deb<br></code></pre></td></tr></table></figure><h3 id="zsh">zsh</h3><p>安装zsh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install zsh git<br></code></pre></td></tr></table></figure><p>安装oh-my-zsh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)</span>&quot;</span><br></code></pre></td></tr></table></figure><p>激活conda（若安装完zsh再安装conda则无需这一步）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">miniconda3/bin/conda init zsh<br></code></pre></td></tr></table></figure><p>开关代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># where proxy</span><br><span class="hljs-function"><span class="hljs-title">proxy</span></span> () &#123;<br>  <span class="hljs-built_in">export</span> NO_PROXY=localhost,127.0.0.1<br>  <span class="hljs-built_in">export</span> HTTP_PROXY=<span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span><br>  <span class="hljs-built_in">export</span> HTTPS_PROXY=<span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;HTTP Proxy on&quot;</span><br>&#125;<br><br><span class="hljs-comment"># where noproxy</span><br><span class="hljs-function"><span class="hljs-title">noproxy</span></span> () &#123;<br>  <span class="hljs-built_in">unset</span> HTTP_PROXY<br>  <span class="hljs-built_in">unset</span> HTTPS_PROXY<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;HTTP Proxy off&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="autojump">autojump</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install autojump<br></code></pre></td></tr></table></figure><p>接下来，将这一行加入<code>.zshrc</code>：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">. /usr/share/<span class="hljs-built_in">auto</span>jump/<span class="hljs-built_in">auto</span>jump.sh<br></code></pre></td></tr></table></figure><p>之后刷新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> .zshrc<br></code></pre></td></tr></table></figure><h3 id="为apt指令设置代理">为<code>apt</code>指令设置代理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nano /etc/apt/apt.conf.d/proxy.conf<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Acquire::http::Proxy <span class="hljs-string">&quot;http://127.0.0.1:7890/&quot;</span>;<br>Acquire::https::Proxy <span class="hljs-string">&quot;http://127.0.0.1:7890/&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="ifconfig命令">ifconfig命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install net-tools<br></code></pre></td></tr></table></figure><h2 id="开发环境相关">开发环境相关</h2><h3 id="conda">conda</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-latest-Linux-x86_64.sh<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> 777 ./Miniconda3-latest-Linux-x86_64.sh<br>./Miniconda3-latest-Linux-x86_64.sh<br></code></pre></td></tr></table></figure><h3 id="cuda">CUDA</h3><p>安装编译环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install gcc-12 make cmake<br></code></pre></td></tr></table></figure><p>CUDA使用<a href="https://developer.nvidia.com/cuda-downloads">脚本</a>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">aria2c -s16 -x16 -k1M --file-allocation=none https://developer.download.nvidia.com/compute/cuda/12.6.1/local_installers/cuda_12.6.1_560.35.03_linux.run<br><span class="hljs-built_in">sudo</span> sh cuda_12.6.1_560.35.03_linux.run<br></code></pre></td></tr></table></figure><blockquote><p>/=========== = Summary = /===========</p><p>Driver: Installed Toolkit: Installed in /usr/local/cuda-12.6/</p><p>Please make sure that - PATH includes /usr/local/cuda-12.6/bin - LD_LIBRARY_PATH includes /usr/local/cuda-12.6/lib64, or, add /usr/local/cuda-12.6/lib64 to /etc/ld.so.conf and run ldconfig as root</p><p>To uninstall the CUDA Toolkit, run cuda-uninstaller in /usr/local/cuda-12.6/bin To uninstall the NVIDIA Driver, run nvidia-uninstall Logfile is /var/log/cuda-installer.log</p></blockquote><p>cudnn（<a href="https://developer.nvidia.com/cudnn-downloads">官网地址</a>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">aria2c -s16 -x16 -k1M --file-allocation=none https://developer.download.nvidia.com/compute/cudnn/9.4.0/local_installers/cudnn-local-repo-ubuntu2404-9.4.0_1.0-1_amd64.deb<br><span class="hljs-built_in">sudo</span> dpkg -i cudnn-local-repo-ubuntu2404-9.4.0_1.0-1_amd64.deb<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> /var/cudnn-local-repo-ubuntu2404-9.4.0/cudnn-*-keyring.gpg /usr/share/keyrings/<br><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt -y install cudnn-cuda-12<br></code></pre></td></tr></table></figure><p>最后在<code>.zshrc</code>中添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> CUDA_HOME=/usr/local/cuda-12.6<br><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=<span class="hljs-variable">$LD_LIBRARY_PATH</span>:<span class="hljs-variable">$CUDA_HOME</span>/lib64:/usr/local/cuda/extras/CUPTI/lib64<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$CUDA_HOME</span>/bin<br></code></pre></td></tr></table></figure><p>当更新Linux内核后，此方法安装的驱动会失效，此时先使用以下指令卸载参与驱动文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get --purge remove <span class="hljs-string">&quot;*cuda*&quot;</span> <span class="hljs-string">&quot;*cublas*&quot;</span> <span class="hljs-string">&quot;*cufft*&quot;</span> <span class="hljs-string">&quot;*cufile*&quot;</span> <span class="hljs-string">&quot;*curand*&quot;</span> \<br> <span class="hljs-string">&quot;*cusolver*&quot;</span> <span class="hljs-string">&quot;*cusparse*&quot;</span> <span class="hljs-string">&quot;*gds-tools*&quot;</span> <span class="hljs-string">&quot;*npp*&quot;</span> <span class="hljs-string">&quot;*nvjpeg*&quot;</span> <span class="hljs-string">&quot;nsight*&quot;</span> <span class="hljs-string">&quot;*nvvm*&quot;</span><br><span class="hljs-built_in">sudo</span> apt-get remove --purge <span class="hljs-string">&quot;*nvidia-driver*&quot;</span> <span class="hljs-string">&quot;libxnvctrl*&quot;</span><br><span class="hljs-built_in">sudo</span> apt-get autoremove --purge -V<br></code></pre></td></tr></table></figure><p>之后重新安装即可</p><h3 id="docker">docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Add Docker&#x27;s official GPG key:</span><br><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install ca-certificates curl<br><span class="hljs-built_in">sudo</span> install -m 0755 -d /etc/apt/keyrings<br><span class="hljs-built_in">sudo</span> wget -O /etc/apt/keyrings/docker.asc https://download.docker.com/linux/ubuntu/gpg<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> a+r /etc/apt/keyrings/docker.asc<br><br><span class="hljs-comment"># Add the repository to Apt sources:</span><br><span class="hljs-built_in">echo</span> \<br>  <span class="hljs-string">&quot;deb [arch=<span class="hljs-subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \</span><br><span class="hljs-string">  <span class="hljs-subst">$(. /etc/os-release &amp;&amp; echo <span class="hljs-string">&quot;<span class="hljs-variable">$VERSION_CODENAME</span>&quot;</span>)</span> stable&quot;</span> | \<br>  <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null<br><span class="hljs-built_in">sudo</span> apt update<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<br></code></pre></td></tr></table></figure><p>将当前用户加入docker用户组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> gpasswd -a &lt;user&gt; docker<br>newgrp docker<br></code></pre></td></tr></table></figure><p>设置代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /etc/systemd/system/docker.service.d<br><span class="hljs-built_in">sudo</span> nano /etc/systemd/system/docker.service.d/proxy.conf<br></code></pre></td></tr></table></figure><p>设置其内容为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[Service]<br>Environment=<span class="hljs-string">&quot;HTTP_PROXY=http://127.0.0.1:7890/&quot;</span><br>Environment=<span class="hljs-string">&quot;HTTPS_PROXY=http://127.0.0.1:7890/&quot;</span><br>Environment=<span class="hljs-string">&quot;NO_PROXY=localhost,127.0.0.1&quot;</span><br></code></pre></td></tr></table></figure><h4 id="安装n卡驱动支持container-toolkit">安装N卡驱动支持container-toolkit</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | <span class="hljs-built_in">sudo</span> gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \<br>  &amp;&amp; curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \<br>    sed <span class="hljs-string">&#x27;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g&#x27;</span> | \<br>    <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/nvidia-container-toolkit.list<br><br><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install -y nvidia-container-toolkit<br></code></pre></td></tr></table></figure><p>设置docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nvidia-ctk runtime configure --runtime=docker<br><span class="hljs-built_in">sudo</span> systemctl restart docker<br></code></pre></td></tr></table></figure><h3 id="mysql">mysql</h3><p>安装mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install mysql-server<br><span class="hljs-built_in">sudo</span> systemctl start mysql.service<br></code></pre></td></tr></table></figure><p>设置密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mysql<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">WITH</span> mysql_native_password <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;password&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mysql_secure_installation<br></code></pre></td></tr></table></figure><h2 id="其它">其它</h2><h3 id="切换图形界面和gui">切换图形界面和GUI</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl set-default graphical.target<br><span class="hljs-built_in">sudo</span> systemctl set-default multi-user.target<br></code></pre></td></tr></table></figure><h3 id="创建新用户">创建新用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> useradd -m -s /usr/bin/zsh user<br></code></pre></td></tr></table></figure><h3 id="切换gcc版本">切换GCC版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">ln</span> -s -f /usr/bin/gcc-12 /usr/bin/gcc<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">ln</span> -s -f /usr/bin/gcc-11 /usr/bin/gcc<br></code></pre></td></tr></table></figure><h3 id="安装latex环境">安装latex环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz<br>zcat &lt; install-tl-unx.tar.gz | tar xf -<br><span class="hljs-built_in">cd</span> install-tl-*<br><span class="hljs-built_in">sudo</span> ./install-tl<br></code></pre></td></tr></table></figure><p>安装时取消选择所有其它语言</p><p>将下述内容加入环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> MANPATH=/usr/local/texlive/2024/texmf-dist/doc/man<br><span class="hljs-built_in">export</span> INFOPATH=/usr/local/texlive/2024/texmf-dist/doc/info<br><span class="hljs-built_in">export</span> PATH=/usr/local/texlive/2024/bin/x86_64-linux<br></code></pre></td></tr></table></figure><h3 id="开启n卡持久化">开启N卡持久化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/share/doc/NVIDIA_GLX-1.0/samples<br><span class="hljs-built_in">sudo</span> tar -xvf nvidia-persistenced-init.tar.bz2<br><span class="hljs-built_in">cd</span> nvidia-persistenced-init<br><span class="hljs-built_in">sudo</span> ./install.sh<br></code></pre></td></tr></table></figure><h2 id="监控">监控</h2><h3 id="prometheus">Prometheus</h3><h4 id="install-server">install server</h4><p>从<a href="https://prometheus.io/download/">下载界面</a>下载安装包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://github.com/prometheus/prometheus/releases/download/v3.0.0-beta.1/prometheus-3.0.0-beta.1.linux-amd64.tar.gz<br>tar -zxvf prometheus-3.0.0-beta.1.linux-amd64.tar.gz<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mv</span> prometheus-3.0.0-beta.1.linux-amd64 /usr/local/prometheus<br></code></pre></td></tr></table></figure><p>设置启动项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nano /etc/systemd/system/prometheus.service<br></code></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Unit]<br>Description=Prometheus demo<br>After=network.target<br><br>[Service]<br>Type=simple<br>User=root<br>ExecStart=/usr/local/prometheus/prometheus --config.file=/usr/local/prometheus/prometheus.yml --storage.tsdb.path=/usr/local/prometheus/data<br>Restart=on-failure<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h4 id="node_exporter">node_exporter</h4><p>同样下载安装包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://github.com/prometheus/node_exporter/releases/download/v1.8.2/node_exporter-1.8.2.linux-amd64.tar.gz<br>tar -zxvf node_exporter-1.8.2.linux-amd64.tar.gz<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mv</span> node_exporter-1.8.2.linux-amd64 /usr/local/node_exporter<br></code></pre></td></tr></table></figure><p>设置启动项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nano /etc/systemd/system/node_exporter.service<br></code></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Unit]<br>Description=Prometheus demo<br>After=network.target<br><br>[Service]<br>Type=simple<br>User=root<br>ExecStart=/usr/local/node_exporter/node_exporter<br>Restart=on-failure<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>修改<code>prometheus.yml</code>，添加以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">global:</span><br>  <span class="hljs-attr">scrape_interval:</span> <span class="hljs-string">15s</span><br><br><span class="hljs-attr">scrape_configs:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">node</span><br>  <span class="hljs-attr">static_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [<span class="hljs-string">&#x27;localhost:9100&#x27;</span>]<br></code></pre></td></tr></table></figure><h4 id="nvidia_gpu_exporter">nvidia_gpu_exporter</h4><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://github.com/utkuozdemir/nvidia_gpu_exporter/releases/download/v1.2.1/nvidia-gpu-exporter_1.2.1_linux_amd64.deb<br><span class="hljs-built_in">sudo</span> dpkg -i nvidia-gpu-exporter_1.2.1_linux_amd64.deb<br></code></pre></td></tr></table></figure><p>修改<code>prometheus.yml</code>，添加以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">global:</span><br>  <span class="hljs-attr">scrape_interval:</span> <span class="hljs-string">15s</span><br><br><span class="hljs-attr">scrape_configs:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">node</span><br>  <span class="hljs-attr">static_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [<span class="hljs-string">&#x27;localhost:9835&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="grafana">Grafana</h3><h4 id="安装">安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install apt-transport-https software-properties-common wget<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /etc/apt/keyrings/<br>wget -q -O - https://apt.grafana.com/gpg.key | gpg --dearmor | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/apt/keyrings/grafana.gpg &gt; /dev/null<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com stable main&quot;</span> | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> -a /etc/apt/sources.list.d/grafana.list<br><br><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install grafana<br></code></pre></td></tr></table></figure><p>会自动创建<code>systemd</code>启动项</p><h4 id="添加数据源">添加数据源</h4>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>计算机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python编程规范</title>
    <link href="/2024/07/24/2024-07-24-pythonstyle/"/>
    <url>/2024/07/24/2024-07-24-pythonstyle/</url>
    
    <content type="html"><![CDATA[<h1 id="google-python-style-guide">Google Python Style Guide</h1><div class="note note-warning">            <p>翻译自<a href="https://google.github.io/styleguide/pyguide.html#381-docstrings">Google Python Style Guide</a>，使用GPT-4o翻译和人工校对。</p>          </div><h2 id="background">1 Background</h2><p>Python是谷歌使用的主要动态语言。此风格指南是针对Python程序的一系列<em>应做和不应做</em>的事项。</p><p>为了帮助您正确格式化代码，我们创建了一个 <a href="google_python_style.vim">Vim 的设置文件</a>。对于 Emacs，默认设置应该是可以的。</p><p>许多团队使用 <a href="https://github.com/psf/black">Black</a> 或 <a href="https://github.com/google/pyink">Pyink</a> 自动格式化工具，以避免在格式问题上争论。</p><h2 id="python-language-rules">2 Python Language Rules</h2><h3 id="lint">2.1 Lint</h3><p>对您的代码运行 <code>pylint</code>，使用这个 <a href="https://google.github.io/styleguide/pylintrc">pylintrc</a>。</p><h4 id="definition">2.1.1 Definition</h4><p><code>pylint</code>是一个用于查找Python源代码中的错误和风格问题的工具。它能够发现通常由编译器在像C和C++这样较少动态的语言中捕获的问题。由于Python的动态特性，一些警告可能是不正确的；然而，虚假的警告应该相对不常见。</p><h4 id="pros">2.1.2 Pros</h4><p>捕捉那些容易被忽视的错误，如拼写错误、使用变量前未赋值等。</p><h4 id="cons">2.1.3 Cons</h4><p><code>pylint</code> 并不完美。为了充分利用它，有时我们需要绕过它，抑制它的警告或修复它。</p><h4 id="decision">2.1.4 Decision</h4><p>确保在您的代码上运行 <code>pylint</code>。</p><p>如果警告不合适，则应抑制警告，以免隐藏其他问题。要抑制警告，可以设置行级注释：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">do_PUT</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># WSGI name, so pylint: disable=invalid-name</span><br>  ...<br></code></pre></td></tr></table></figure><p><code>pylint</code> 警告通过符号名称（<code>empty-docstring</code>）进行识别。特定于 Google 的警告以 <code>g-</code> 开头。</p><p>如果从符号名称中无法清楚地了解抑制的原因，请添加解释。</p><p>以这种方式进行抑制的优点在于，我们可以轻松地搜索抑制并重新审视它们。</p><p>您可以通过以下方式获取<code>pylint</code>警告的列表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pylint --list-msgs<br></code></pre></td></tr></table></figure><p>要获取有关特定消息的更多信息，请使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pylint --help-msg=invalid-name<br></code></pre></td></tr></table></figure><p>更倾向于使用 <code>pylint: disable</code> 而不是已弃用的旧形式 <code>pylint: disable-msg</code>。</p><p>未使用的参数警告可以通过在函数开始时删除变量来抑制。始终包含一条注释，解释您为什么要删除它。“Unused.”是足够的。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">viking_cafe_order</span>(<span class="hljs-params">spam: <span class="hljs-built_in">str</span>, beans: <span class="hljs-built_in">str</span>, eggs: <span class="hljs-built_in">str</span> | <span class="hljs-literal">None</span> = <span class="hljs-literal">None</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-keyword">del</span> beans, eggs  <span class="hljs-comment"># Unused by vikings.</span><br>    <span class="hljs-keyword">return</span> spam + spam + spam<br></code></pre></td></tr></table></figure><p>其他常见的抑制此警告的方式包括使用 '<code>_</code>' 作为未使用参数的标识符，或在参数名称前加上 '<code>unused_</code>'，或者将其赋值为 '<code>_</code>'。这些形式是被允许的，但不再被鼓励。这些做法会破坏通过名称传递参数的调用者，并且并不强制要求这些参数实际上未被使用。</p><h3 id="imports">2.2 Imports</h3><p>仅对包和模块使用<code>import</code>语句，而不是对单个类型、类或函数使用。</p><h4 id="definition-1">2.2.1 Definition</h4><p>模块间共享代码的可重用机制。</p><h4 id="pros-1">2.2.2 Pros</h4><p>命名空间管理约定是简单的。每个标识符的来源以一致的方式指示；<code>x.Obj</code> 表示对象 <code>Obj</code> 是在模块 <code>x</code> 中定义的。</p><h4 id="cons-1">2.2.3 Cons</h4><p>模块名称仍然可能发生冲突。一些模块名称不便于过长。</p><h4 id="decision-1">2.2.4 Decision</h4><ul><li>使用 <code>import x</code> 来导入包和模块</li><li>使用 <code>from x import y</code>，其中 <code>x</code> 是包的前缀，而 <code>y</code> 是没有前缀的模块名称。</li><li>在以下任何情况下使用 <code>from x import y as z</code>：<ul><li>要导入两个名为<code>y</code>的模块</li><li><code>y</code> 与当前模块中定义的顶级名称冲突</li><li><code>y</code> 与公共 API 中的一个常见参数名称（例如，<code>features</code>）发生冲突。</li><li><code>y</code> 是一个不太方便的长名称</li><li>在您的代码上下文中，<code>y</code> 过于通用（例如，<code>from storage.file_system import options as fs_options</code>）</li></ul></li><li>仅在<code>z</code>是标准缩写时使用<code>import y as z</code>（例如，<code>import numpy as np</code>）</li></ul><p>例如，模块<code>sound.effects.echo</code>可以如下导入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sound.effects <span class="hljs-keyword">import</span> echo<br>...<br>echo.EchoFilter(<span class="hljs-built_in">input</span>, output, delay=<span class="hljs-number">0.7</span>, atten=<span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><p>在导入时不要使用相对名称。即使模块在同一个包中，也应使用完整的包名。这有助于防止无意中重复导入一个包。</p><h5 id="exemptions">2.2.4.1 Exemptions</h5><p>此规则的例外情况：</p><ul><li>以下模块中的符号用于支持静态分析和类型检查：<ul><li><a href="#typing-imports"><code>typing</code> module</a></li><li><a href="#typing-imports"><code>collections.abc</code> module</a></li><li><a href="https://github.com/python/typing_extensions/blob/main/README.md"><code>typing_extensions</code> module</a></li></ul></li><li>来自<a href="https://six.readthedocs.io/#module-six.moves">six.moves module</a>的重定向。</li></ul><h3 id="packages">2.3 Packages</h3><p>使用模块的完整路径名导入每个模块。</p><h4 id="pros-2">2.3.1 Pros</h4><p>避免了模块名称冲突或由于模块搜索路径与作者预期不符而导致的不正确导入。使得查找模块变得更加容易。</p><h4 id="cons-2">2.3.2 Cons</h4><p>这使得代码的部署变得更加困难，因为你必须复制包的层次结构。不过，这在现代部署机制中并不是一个真正的问题。</p><h4 id="decision-2">2.3.3 Decision</h4><p>所有新代码应通过其完整的包名导入每个模块。</p><p>导入应如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes:<br>  <span class="hljs-comment"># 在代码中引用 absl.flags 时，请使用完整名称（详细）</span><br>  <span class="hljs-keyword">import</span> absl.flags<br>  <span class="hljs-keyword">from</span> doctor.who <span class="hljs-keyword">import</span> jodie<br><br>  _FOO = absl.flags.DEFINE_string(...)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes:<br>  <span class="hljs-comment"># 代码中的引用标志仅使用模块名称（常见）</span><br>  <span class="hljs-keyword">from</span> absl <span class="hljs-keyword">import</span> flags<br>  <span class="hljs-keyword">from</span> doctor.who <span class="hljs-keyword">import</span> jodie<br><br>  _FOO = flags.DEFINE_string(...)<br></code></pre></td></tr></table></figure><p><em>（假设该文件位于 <code>doctor/who/</code> 目录下，<code>jodie.py</code> 也存在于该目录中）</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">No:<br>  <span class="hljs-comment"># 不清楚作者想要哪个模块以及将会导入什么</span><br>  <span class="hljs-comment"># 实际的导入行为取决于控制 sys.path 的外部因素</span><br>  <span class="hljs-comment"># 作者打算导入哪个可能的 jodie 模块？</span><br>  <span class="hljs-keyword">import</span> jodie<br></code></pre></td></tr></table></figure><p>主二进制文件所在的目录不应被假定在 <code>sys.path</code> 中，尽管在某些环境中确实如此。在这种情况下，代码应假定 <code>import jodie</code> 指的是一个名为 <code>jodie</code> 的第三方或顶级包，而不是一个本地的 <code>jodie.py</code>。</p><h3 id="exceptions">2.4 Exceptions</h3><p>允许使用例外，但必须谨慎使用。</p><h4 id="definition-2">2.4.1 Definition</h4><p>异常是一种打破正常控制流以处理错误或其他异常情况的手段。</p><h4 id="pros-3">2.4.2 Pros</h4><p>正常操作代码的控制流并未被错误处理代码所混杂。它还允许在发生某些条件时跳过多个帧，例如，从<span class="math inline">\(N\)</span>个嵌套函数中一步返回，而不必通过错误代码进行传递。</p><h4 id="cons-3">2.4.3 Cons</h4><p>可能导致控制流变得混乱。在进行库调用时，容易遗漏错误情况。</p><h4 id="decision-3">2.4.4 Decision</h4><p>例外必须遵循某些条件：</p><ul><li><p>在合适的情况下，使用内置的异常类。例如，抛出一个 <code>ValueError</code> 来指示编程错误，比如违反了前置条件，这种情况可能在验证函数参数时发生</p></li><li><p>不要将 <code>assert</code> 语句用作条件语句或验证前置条件。它们不应对应用程序逻辑至关重要。一个检验标准是，如果移除 <code>assert</code> 语句，代码仍然能够正常运行。<code>assert</code> 条件语句是 <a href="https://docs.python.org/3/reference/simple_stmts.html#the-assert-statement">不保证</a> 被评估的。对于基于 <a href="https://pytest.org">pytest</a> 的测试，使用 <code>assert</code> 是可以的，并且被期望用于验证预期。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes:<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">connect_to_next_port</span>(<span class="hljs-params">self, minimum: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;Connects to the next available port.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">      minimum: A port value greater or equal to 1024.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Returns:</span><br><span class="hljs-string">      The new minimum port.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Raises:</span><br><span class="hljs-string">      ConnectionError: If no available port is found.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> minimum &lt; <span class="hljs-number">1024</span>:<br>      <span class="hljs-comment"># 请注意，这个引发ValueError的情况在文档中并未提及</span><br>      <span class="hljs-comment"># 由于在字符串的“Raises:”部分中，保证这种特定的行为反应对API误用并不合适</span><br>      <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">f&#x27;Min. port must be at least 1024, not <span class="hljs-subst">&#123;minimum&#125;</span>.&#x27;</span>)<br>    port = <span class="hljs-variable language_">self</span>._find_next_open_port(minimum)<br>    <span class="hljs-keyword">if</span> port <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>      <span class="hljs-keyword">raise</span> ConnectionError(<br>          <span class="hljs-string">f&#x27;Could not connect to service on port <span class="hljs-subst">&#123;minimum&#125;</span> or higher.&#x27;</span>)<br>    <span class="hljs-comment"># 该代码不依赖于此断言的结果</span><br>    <span class="hljs-keyword">assert</span> port &gt;= minimum, (<br>        <span class="hljs-string">f&#x27;Unexpected port <span class="hljs-subst">&#123;port&#125;</span> when minimum was <span class="hljs-subst">&#123;minimum&#125;</span>.&#x27;</span>)<br>    <span class="hljs-keyword">return</span> port<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">No:<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">connect_to_next_port</span>(<span class="hljs-params">self, minimum: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;Connects to the next available port.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">      minimum: A port value greater or equal to 1024.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Returns:</span><br><span class="hljs-string">      The new minimum port.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> minimum &gt;= <span class="hljs-number">1024</span>, <span class="hljs-string">&#x27;Minimum port must be at least 1024.&#x27;</span><br>    <span class="hljs-comment"># The following code depends on the previous assert.</span><br>    port = <span class="hljs-variable language_">self</span>._find_next_open_port(minimum)<br>    <span class="hljs-keyword">assert</span> port <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment"># The type checking of the return statement relies on the assert.</span><br>    <span class="hljs-keyword">return</span> port<br></code></pre></td></tr></table></figure></li><li><p>库或包可以定义它们自己的异常。在这样做时，它们必须继承自现有的异常类。异常名称应以<code>Error</code>结尾，并且不应引入重复（例如<code>foo.FooError</code>）</p></li><li><p>绝不要使用笼统的 <code>except:</code> 语句，或者捕获 <code>Exception</code> 或 <code>StandardError</code>，除非你正在</p><ul><li>重新抛出异常，或者</li><li>在程序中创建一个隔离点，在该点上异常不会被传播，而是被记录并抑制，例如通过保护线程的最外层代码块来防止其崩溃</li></ul><p>在这方面，Python非常宽容，<code>except:</code>确实会捕获所有内容，包括拼写错误的名称、sys.exit()调用、Ctrl+C中断、unittest失败以及所有其他你根本不想捕获的异常</p></li><li><p>最小化<code>try</code>/<code>except</code>块中的代码量。<code>try</code>块的主体越大，越有可能出现您未预料到的代码行引发异常。在这些情况下，<code>try</code>/<code>except</code>块掩盖了一个真实的错误</p></li><li><p>使用 <code>finally</code> 子句来执行代码，无论在 <code>try</code> 块中是否引发异常。这通常对于清理操作很有用，例如，关闭文件</p></li></ul><h3 id="mutable-global-state">2.5 Mutable Global State</h3><p>避免可变的全局状态。</p><h4 id="definition-3">2.5.1 Definition</h4><p>模块级值或类属性在程序执行过程中可能会发生变更。</p><h4 id="pros-4">2.5.2 Pros</h4><p>偶尔有用。</p><h4 id="cons-4">2.5.3 Cons</h4><ul><li><p>打破封装性：这样的设计可能使得实现有效目标变得困难。例如，如果全局状态用于管理数据库连接，那么同时连接到两个不同的数据库（例如在迁移过程中计算差异）就变得困难。类似的问题在全局注册表中也很容易出现。</p></li><li><p>在导入过程中有可能改变模块的行为，因为对全局变量的赋值是在模块首次导入时进行的。</p></li></ul><h4 id="decision-4">2.5.4 Decision</h4><p>避免可变的全局状态。</p><p>在那些使用全局状态被认为合理的罕见情况下，可变的全局实体应在模块级别或作为类属性声明，并通过在名称前加上<code>_</code>来使其内部化。如果有必要，对可变全局状态的外部访问必须通过公共函数或类方法进行。请参见下面的<a href="#s3.16-naming">Naming</a>。请在注释中或通过注释链接的文档中解释使用可变全局状态的设计原因。</p><p>模块级常量是被允许并鼓励使用的。例如：<code>_MAX_HOLY_HANDGRENADE_COUNT = 3</code> 用于内部使用的常量，或 <code>SIR_LANCELOTS_FAVORITE_COLOR = "blue"</code> 用于公共 API 常量。常量的命名必须使用全大写字母并用下划线分隔。请参见下面的 <a href="#s3.16-naming">Naming</a>。</p><h3 id="nestedlocalinner-classes-and-functions">2.6 Nested/Local/Inner Classes and Functions</h3><p>嵌套的局部函数或类在用于封闭局部变量时是可以的。内部类也是可以的。</p><h4 id="definition-4">2.6.1 Definition</h4><p>一个类可以在方法、函数或类内部定义。一个函数可以在方法或函数内部定义。嵌套函数对在封闭作用域中定义的变量具有只读访问权限。</p><h4 id="pros-5">2.6.2 Pros</h4><p>允许定义仅在非常有限的范围内使用的实用类和函数。非常<a href="https://en.wikipedia.org/wiki/Abstract_data_type">ADT</a>风格。通常用于实现装饰器。</p><h4 id="cons-5">2.6.3 Cons</h4><p>嵌套的函数和类无法直接进行测试。嵌套可能会使外部函数变得更长且可读性降低。</p><h4 id="decision-5">2.6.4 Decision</h4><p>它们是可以的，但有一些注意事项。避免嵌套函数或类，除非是为了闭合一个局部值，而这个值不是<code>self</code>或<code>cls</code>。不要仅仅为了隐藏一个函数而嵌套它，以免让模块的用户无法访问。相反，在模块级别用_作为前缀来命名它，以便测试仍然可以访问。</p><h3 id="comprehensions-generator-expressions">2.7 Comprehensions &amp; Generator Expressions</h3><p>可以用于简单的情况。</p><h4 id="definition-5">2.7.1 Definition</h4><p>列表、字典和集合推导式以及生成器表达式提供了一种简洁而高效的方式来创建容器类型和迭代器，而无需使用传统的循环、<code>map()</code>、<code>filter()</code>或<code>lambda</code>。</p><h4 id="pros-6">2.7.2 Pros</h4><p>简单的推导式可以比其他字典、列表或集合的创建技术更清晰和简单。生成器表达式可以非常高效，因为它们完全避免了列表的创建。</p><h4 id="cons-6">2.7.3 Cons</h4><p>复杂的理解或生成器表达式可能难以阅读。</p><h4 id="decision-6">2.7.4 Decision</h4><p>允许的使用推导式，然而不允许使用多个 <code>for</code> 子句或过滤表达式。优化应以可读性为主，而非简洁性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes:<br>  result = [mapping_expr <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> iterable <span class="hljs-keyword">if</span> filter_expr]<br><br>  result = [<br>      is_valid(metric=&#123;<span class="hljs-string">&#x27;key&#x27;</span>: value&#125;)<br>      <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> interesting_iterable<br>      <span class="hljs-keyword">if</span> a_longer_filter_expression(value)<br>  ]<br><br>  descriptive_name = [<br>      transform(&#123;<span class="hljs-string">&#x27;key&#x27;</span>: key, <span class="hljs-string">&#x27;value&#x27;</span>: value&#125;, color=<span class="hljs-string">&#x27;black&#x27;</span>)<br>      <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> generate_iterable(some_input)<br>      <span class="hljs-keyword">if</span> complicated_condition_is_met(key, value)<br>  ]<br><br>  result = []<br>  <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>      <span class="hljs-keyword">if</span> x * y &gt; <span class="hljs-number">10</span>:<br>        result.append((x, y))<br><br>  <span class="hljs-keyword">return</span> &#123;<br>      x: complicated_transform(x)<br>      <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> long_generator_function(parameter)<br>      <span class="hljs-keyword">if</span> x <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (x**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<br><br>  unique_names = &#123;user.name <span class="hljs-keyword">for</span> user <span class="hljs-keyword">in</span> users <span class="hljs-keyword">if</span> user <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">No:<br>  result = [(x, y) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">if</span> x * y &gt; <span class="hljs-number">10</span>]<br><br>  <span class="hljs-keyword">return</span> (<br>      (x, y, z)<br>      <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)<br>      <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)<br>      <span class="hljs-keyword">if</span> x != y<br>      <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)<br>      <span class="hljs-keyword">if</span> y != z<br>  )<br></code></pre></td></tr></table></figure><h3 id="default-iterators-and-operators">2.8 Default Iterators and Operators</h3><p>对于支持默认迭代器和操作符的类型，如列表、字典和文件，使用默认的迭代器和操作符。</p><h4 id="definition-6">2.8.1 Definition</h4><p>容器类型，如字典和列表，定义了默认的迭代器和成员测试操作符（“in”和“not in”）。</p><h4 id="pros-7">2.8.2 Pros</h4><p>默认的迭代器和运算符简单且高效。它们直接表达操作，而无需额外的方法调用。使用默认运算符的函数是通用的。它可以与任何支持该操作的类型一起使用。</p><h4 id="cons-7">2.8.3 Cons</h4><p>通过阅读方法名称，无法判断对象的类型（除非变量有类型注释）。这也是一个优势。</p><h4 id="decision-7">2.8.4 Decision</h4><p>对于支持默认迭代器和操作符的类型，如列表、字典和文件，使用默认的迭代器和操作符。内置类型也定义了迭代器方法。优先使用这些方法，而不是返回列表的方法，除了在迭代时不应修改容器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes:  <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> adict: ...<br>      <span class="hljs-keyword">if</span> obj <span class="hljs-keyword">in</span> alist: ...<br>      <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> afile: ...<br>      <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> adict.items(): ...<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">No:   <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> adict.keys(): ...<br>      <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> afile.readlines(): ...<br></code></pre></td></tr></table></figure><h3 id="generators">2.9 Generators</h3><p>根据需要使用生成器。</p><h4 id="definition-7">2.9.1 Definition</h4><p>生成器函数返回一个迭代器，每次执行 yield 语句时都会产生一个值。在产生一个值之后，生成器函数的运行状态会被挂起，直到下一个值被需要。</p><h4 id="pros-8">2.9.2 Pros</h4><p>更简单的代码，因为每次调用时局部变量的状态和控制流都得以保留。生成器使用的内存比一次性创建整个值列表的函数要少。</p><h4 id="cons-8">2.9.3 Cons</h4><p>生成器中的局部变量在生成器被完全消耗或自身被垃圾回收之前，不会被垃圾回收。</p><h4 id="decision-8">2.9.4 Decision</h4><p>在生成器函数的文档字符串中使用“Yields:”而不是“Returns:”。</p><p>如果生成器管理一个昂贵的资源，请确保强制进行清理。</p><p>进行清理的一个好方法是通过使用上下文管理器来包装生成器 <a href="https://peps.python.org/pep-0533/">PEP-0533</a>。</p><h3 id="lambda-functions">2.10 Lambda Functions</h3><p>适合单行本。优先选择生成器表达式，而不是带有 “lambda ”的 “map() ”或 “filter()”。</p><h4 id="definition-8">2.10.1 Definition</h4><p>Lambda 表达式定义了在表达式中使用的匿名函数，而不是在语句中使用的函数。</p><h4 id="pros-9">2.10.2 Pros</h4><p>方便</p><h4 id="cons-9">2.10.3 Cons</h4><p>比本地函数更难阅读和调试。缺乏名称意味着堆栈跟踪更难以理解。表达能力受到限制，因为该函数可能仅包含一个表达式。</p><h4 id="decision-9">2.10.4 Decision</h4><p>允许使用lambda。如果lambda函数内部的代码跨越多行或长度超过60-80个字符，最好将其定义为常规的<a href="#lexical-scoping">嵌套函数</a>。</p><p>对于像乘法这样的常见操作，建议使用来自<code>operator</code>模块的函数，而不是使用lambda函数。例如，优先选择<code>operator.mul</code>而不是<code>lambda x, y: x * y</code>。</p><h3 id="conditional-expressions">2.11 Conditional Expressions</h3><p>对于简单的情况还可以。</p><h4 id="definition-9">2.11.1 Definition</h4><p>条件表达式（有时称为“三元运算符”）是一种提供更简洁语法的机制，用于 if 语句。例如：<code>x = 1 if cond else 2</code>。</p><h4 id="pros-10">2.11.2 Pros</h4><p>比if语句更简洁和方便。</p><h4 id="cons-10">2.11.3 Cons</h4><p>可能比if语句更难以阅读。如果表达式较长，条件可能难以定位。</p><h4 id="decision-10">2.11.4 Decision</h4><p>可以用于简单情况。每个部分必须适合在一行内：真表达式、如果表达式、否则表达式。当情况变得更复杂时，请使用完整的 if 语句。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes:<br>    one_line = <span class="hljs-string">&#x27;yes&#x27;</span> <span class="hljs-keyword">if</span> predicate(value) <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;no&#x27;</span><br>    slightly_split = (<span class="hljs-string">&#x27;yes&#x27;</span> <span class="hljs-keyword">if</span> predicate(value)<br>                      <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;no, nein, nyet&#x27;</span>)<br>    the_longest_ternary_style_that_can_be_done = (<br>        <span class="hljs-string">&#x27;yes, true, affirmative, confirmed, correct&#x27;</span><br>        <span class="hljs-keyword">if</span> predicate(value)<br>        <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;no, false, negative, nay&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">No:<br>    bad_line_breaking = (<span class="hljs-string">&#x27;yes&#x27;</span> <span class="hljs-keyword">if</span> predicate(value) <span class="hljs-keyword">else</span><br>                         <span class="hljs-string">&#x27;no&#x27;</span>)<br>    portion_too_long = (<span class="hljs-string">&#x27;yes&#x27;</span><br>                        <span class="hljs-keyword">if</span> some_long_module.some_long_predicate_function(<br>                            really_long_variable_name)<br>                        <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;no, false, negative, nay&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="default-argument-values">2.12 Default Argument Values</h3><p>适用于大部分情况。</p><h4 id="definition-10">2.12.1 Definition</h4><p>您可以在函数参数列表的末尾为变量指定值，例如，<code>def foo(a, b=0):</code>。如果仅用一个参数调用<code>foo</code>，则<code>b</code>的值被设定为0。如果用两个参数调用，则<code>b</code>的值为第二个参数的值。</p><h4 id="pros-11">2.12.2 Pros</h4><p>通常情况下，您会有一个使用大量默认值的函数，但在少数情况下，您希望覆盖这些默认值。默认参数值提供了一种简单的方法来实现这一点，而无需为少数例外情况定义大量函数。由于Python不支持方法/函数的重载，默认参数是一种“伪装”重载行为的简单方式。</p><h4 id="cons-11">2.12.3 Cons</h4><p>默认参数在模块加载时只会被评估一次。如果参数是可变对象，例如列表或字典，这可能会导致问题。如果函数修改了该对象（例如，通过向列表中添加一个项目），则默认值会被修改。</p><h4 id="decision-11">2.12.4 Decision</h4><p>可以使用，但需注意以下警告：</p><p>在函数或方法定义中，不要使用可变对象作为默认值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes: <span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">a, b=<span class="hljs-literal">None</span></span>):<br>         <span class="hljs-keyword">if</span> b <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>             b = []<br>Yes: <span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">a, b: <span class="hljs-type">Sequence</span> | <span class="hljs-literal">None</span> = <span class="hljs-literal">None</span></span>):<br>         <span class="hljs-keyword">if</span> b <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>             b = []<br>Yes: <span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">a, b: <span class="hljs-type">Sequence</span> = (<span class="hljs-params"></span>)</span>):  <span class="hljs-comment"># 空元组是可以的，因为元组是不可变的</span><br>         ...<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> absl <span class="hljs-keyword">import</span> flags<br>_FOO = flags.DEFINE_string(...)<br><br>No:  <span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">a, b=[]</span>):<br>         ...<br>No:  <span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">a, b=time.time(<span class="hljs-params"></span>)</span>):  <span class="hljs-comment"># `b` 是不是用来表示这个模块被加载的时间？</span><br>         ...<br>No:  <span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">a, b=_FOO.value</span>):  <span class="hljs-comment"># sys.argv尚未被解析。...</span><br>         ...<br>No:  <span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">a, b: Mapping = &#123;&#125;</span>):  <span class="hljs-comment"># 仍然可能被传递给未检查的代码</span><br>         ...<br></code></pre></td></tr></table></figure><h3 id="properties">2.13 Properties</h3><p>属性可以用于控制获取或设置需要简单计算或逻辑的属性。属性的实现必须符合常规属性访问的一般期望：即它们应该是廉价的、直接的，并且不令人意外。</p><h4 id="definition-11">2.13.1 Definition</h4><p>一种将方法调用封装为获取和设置属性的标准属性访问的方式。</p><h4 id="pros-12">2.13.2 Pros</h4><ul><li>允许使用属性访问和赋值的API，而不是调用<a href="#getters-and-setters">getter和setter</a>方法</li><li>可以用于将属性设置为只读</li><li>允许进行惰性计算</li><li>提供了一种在类的内部独立于类用户演变时，维护类的公共接口的方法</li></ul><h4 id="cons-12">2.13.3 Cons</h4><ul><li>可以像运算符重载一样隐藏副作用</li><li>对于子类来说，这可能会造成混淆</li></ul><h4 id="decision-12">2.13.4 Decision</h4><p>属性是允许的，但与运算符重载一样，只有在必要时才应使用，并且应符合典型属性访问的期望；否则应遵循<a href="#getters-and-setters">getters and setters</a>规则。</p><p>例如，使用属性来简单地获取和设置内部属性是不允许的：没有发生任何计算，因此该属性是多余的（<a href="#getters-and-setters">不如将属性设为公共</a>）。相比之下，使用属性来控制属性访问或计算一个<em>微不足道</em>的派生值是允许的：逻辑简单且不令人意外。</p><p>属性应该使用 <code>@property</code> <a href="#s2.17-function-and-method-decorators">装饰器</a> 创建。手动实现属性描述符被视为一种 <a href="#power-features">强大特性</a>。</p><p>具有属性的继承可能并不明显。不要使用属性来实现子类可能希望重写和扩展的计算。</p><h3 id="truefalse-evaluations">2.14 True/False Evaluations</h3><p>尽可能使用“隐式”假设（有一些注意事项）。</p><h4 id="definition-12">2.14.1 Definition</h4><p>Python在布尔上下文中将某些值评估为<code>False</code>。一个简单的“经验法则”是，所有“空”的值都被视为假，因此<code>0, None, [], &#123;&#125;, ''</code>在布尔上下文中都评估为假。</p><h4 id="pros-13">2.14.2 Pros</h4><p>使用Python布尔值的条件更易于阅读且不易出错。在大多数情况下，它们的执行速度也更快。</p><h4 id="cons-13">2.14.3 Cons</h4><p>这对C/C++开发者来说可能显得有些奇怪。</p><h4 id="decision-13">2.14.4 Decision</h4><p>如果可能的话，请使用“隐式”假值，例如，<code>if foo:</code> 而不是 <code>if foo != []:</code>。不过，有几个注意事项需要牢记：</p><ul><li><p>始终使用 <code>if foo is None:</code>（或 <code>is not None</code>）来检查 <code>None</code> 值。例如，当测试一个默认值为 <code>None</code> 的变量或参数是否被设置为其他值时。其他值可能是在布尔上下文中为假的值！</p></li><li><p>永远不要使用 <code>==</code> 将布尔变量与 <code>False</code> 进行比较。请改用 <code>if not x:</code>。如果需要区分 <code>False</code> 和 <code>None</code>，可以将表达式串联起来，例如 <code>if not x and x is not None:</code></p></li><li><p>对于序列（字符串、列表、元组），可以利用空序列为假这一事实，因此<code>if seq:</code>和<code>if not seq:</code>比<code>if len(seq):</code>和<code>if not len(seq):</code>更为可取</p></li><li><p>在处理整数时，隐式的假值可能带来的风险大于收益（即，意外地将<code>None</code>视为0）。您可以将一个已知为整数的值（并且不是<code>len()</code>的结果）与整数0进行比较</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes: <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> users:<br>         <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;no users&#x27;</span>)<br><br>     <span class="hljs-keyword">if</span> i % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>:<br>         <span class="hljs-variable language_">self</span>.handle_multiple_of_ten()<br><br>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x=<span class="hljs-literal">None</span></span>):<br>         <span class="hljs-keyword">if</span> x <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>             x = []<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">No:  <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(users) == <span class="hljs-number">0</span>:<br>         <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;no users&#x27;</span>)<br><br>     <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> i % <span class="hljs-number">10</span>:<br>         <span class="hljs-variable language_">self</span>.handle_multiple_of_ten()<br><br>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x=<span class="hljs-literal">None</span></span>):<br>         x = x <span class="hljs-keyword">or</span> []<br></code></pre></td></tr></table></figure></li><li><p>请注意，<code>'0'</code>（即，作为字符串的<code>0</code>）的值为真</p></li><li><p>请注意，Numpy 数组在隐式布尔上下文中可能会引发异常。在测试 <code>np.array</code> 的空性时，建议使用 <code>.size</code> 属性（例如，<code>if not users.size</code>）</p></li></ul><h3 id="lexical-scoping">2.16 Lexical Scoping</h3><p>可以使用。</p><h4 id="definition-13">2.16.1 Definition</h4><p>嵌套的 Python 函数可以引用在外部函数中定义的变量，但不能对其进行赋值。变量绑定是通过词法作用域来解析的，即基于静态程序文本。在一个代码块中对某个名称的任何赋值都会导致 Python 将对该名称的所有引用视为局部变量，即使这些引用出现在赋值之前。如果出现全局声明，则该名称被视为全局变量。</p><p>该功能使用的一个示例是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_adder</span>(<span class="hljs-params">summand1: <span class="hljs-built_in">float</span></span>) -&gt; <span class="hljs-type">Callable</span>[[<span class="hljs-built_in">float</span>], <span class="hljs-built_in">float</span>]:<br>    <span class="hljs-string">&quot;&quot;&quot;Returns a function that adds numbers to a given number.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">adder</span>(<span class="hljs-params">summand2: <span class="hljs-built_in">float</span></span>) -&gt; <span class="hljs-built_in">float</span>:<br>        <span class="hljs-keyword">return</span> summand1 + summand2<br><br>    <span class="hljs-keyword">return</span> adder<br></code></pre></td></tr></table></figure><h4 id="pros-14">2.16.2 Pros</h4><p>通常会导致更清晰、更优雅的代码。这对经验丰富的Lisp和Scheme（以及Haskell和ML等）程序员尤其令人感到安慰。</p><h4 id="cons-14">2.16.3 Cons</h4><p>可能会导致令人困惑的错误，例如基于 <a href="https://peps.python.org/pep-0227/">PEP-0227</a> 的这个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">4</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">x: Iterable[<span class="hljs-built_in">int</span>]</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bar</span>():<br>        <span class="hljs-built_in">print</span>(i, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-comment"># ...</span><br>    <span class="hljs-comment"># A bunch of code here</span><br>    <span class="hljs-comment"># ...</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x:  <span class="hljs-comment"># Ah, i *is* local to foo, so this is what bar sees</span><br>        <span class="hljs-built_in">print</span>(i, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    bar()<br></code></pre></td></tr></table></figure><p>因此，<code>foo([1, 2, 3])</code> 将打印 <code>1 2 3 3</code>，而不是 <code>1 2 3 4</code>。</p><h4 id="decision-14">2.16.4 Decision</h4><p>可以使用。</p><h3 id="function-and-method-decorators">2.17 Function and Method Decorators</h3><p>在有明显优势的情况下，谨慎使用装饰器。避免使用 <code>staticmethod</code>，并限制 <code>classmethod</code> 的使用。</p><h4 id="definition-14">2.17.1 Definition</h4><p><a href="https://docs.python.org/3/glossary.html#term-decorator">函数和方法的装饰器</a>（也称为“<code>@</code> 符号”）。一个常见的装饰器是 <code>@property</code>，用于将普通方法转换为动态计算的属性。然而，装饰器语法也允许用户定义装饰器。具体来说，对于某个函数 <code>my_decorator</code>，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>:<br><span class="hljs-meta">    @my_decorator</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># method body ...</span><br></code></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># method body ...</span><br>    method = my_decorator(method)<br></code></pre></td></tr></table></figure><h4 id="pros-15">2.17.2 Pros</h4><p>优雅地指定了一种方法上的某种变换；该变换可能消除一些重复的代码，强制执行不变式等。</p><h4 id="cons-15">2.17.3 Cons</h4><p>装饰器可以对函数的参数或返回值执行任意操作，从而导致意想不到的隐式行为。此外，装饰器在对象定义时执行。对于模块级对象（类、模块函数等），这发生在导入时。装饰器代码中的错误几乎不可能恢复。</p><h4 id="decision-15">2.17.4 Decision</h4><p>在有明显优势的情况下，谨慎使用装饰器。装饰器应遵循与函数相同的导入和命名指南。装饰器的pydoc应清楚地说明该函数是一个装饰器。为装饰器编写单元测试。</p><p>在装饰器本身避免外部依赖（例如，不要依赖文件、套接字、数据库连接等），因为在装饰器运行时（可能是在导入时，例如通过<code>pydoc</code>或其他工具），这些依赖可能不可用。一个使用有效参数调用的装饰器应该（尽可能地）保证在所有情况下都能成功。</p><p>装饰器是“顶层代码”的一个特殊情况——有关更多讨论，请参见 <a href="#s3.17-main">main</a>。</p><p>除非为了与现有库中定义的API集成而被迫使用<code>staticmethod</code>，否则不要使用它。请改为编写模块级函数。</p><p>仅在编写命名构造函数或修改必要全局状态（例如进程范围内的缓存）的类特定例程时使用 <code>classmethod</code>。</p><h3 id="threading">2.18 Threading</h3><p>不要依赖内置类型的原子性。</p><p>虽然Python的内置数据类型如字典似乎具有原子操作，但在某些边缘情况下，它们并不是原子的（例如，如果<code>__hash__</code>或<code>__eq__</code>被实现为Python方法），因此不应依赖它们的原子性。同样，你也不应依赖原子变量赋值（因为这又依赖于字典）。</p><p>使用 <code>queue</code> 模块的 <code>Queue</code> 数据类型作为线程之间传递数据的首选方式。否则，使用 <code>threading</code> 模块及其锁原语。优先使用条件变量和 <code>threading.Condition</code>，而不是使用更低级别的锁。</p><h3 id="power-features">2.19 Power Features</h3><p>避免这些特征。</p><h4 id="definition-15">2.19.1 Definition</h4><p>Python是一种极其灵活的语言，提供了许多华丽的特性，例如自定义元类、对字节码的访问、即时编译、动态继承、对象重新父级、导入黑客、反射（例如<code>getattr()</code>的一些用法）、系统内部的修改、实现自定义清理的<code>__del__</code>方法等。</p><h4 id="pros-16">2.19.2 Pros</h4><p>这些是强大的语言特性。它们可以使你的代码更加简洁。</p><h4 id="cons-16">2.19.3 Cons</h4><p>在不绝对必要的情况下，使用这些“酷炫”的特性是非常诱人的。然而，使用不寻常特性编写的代码往往更难以阅读、理解和调试。起初（对于原作者来说）似乎并非如此，但在重新审视代码时，通常会发现这比那些虽然更长但更直接的代码要困难得多。</p><h4 id="decision-16">2.19.4 Decision</h4><p>在您的代码中避免使用这些特性。</p><p>标准库模块和类内部使用这些特性的可以使用（例如，<code>abc.ABCMeta</code>、<code>dataclasses</code> 和 <code>enum</code>）。</p><h3 id="modern-python-from-__future__-imports">2.20 Modern Python: from __future__ imports</h3><p>新的语言版本的语义变化可能需要通过一个特殊的未来导入来控制，以便在早期运行时的每个文件基础上启用它们。</p><h4 id="definition-16">2.20.1 Definition</h4><p>能够通过 <code>from __future__ import</code> 语句启用一些更现代的特性，使得可以提前使用预期未来 Python 版本中的特性。</p><h4 id="pros-17">2.20.2 Pros</h4><p>这已被证明使得运行时版本升级更加顺畅，因为可以在每个文件的基础上进行更改，同时声明兼容性并防止这些文件中的回归。现代代码更易于维护，因为它不太可能积累在未来运行时升级中会造成问题的技术债务。</p><h4 id="cons-17">2.20.3 Cons</h4><p>这样的代码可能在非常旧的解释器版本上无法运行，特别是在引入所需的未来语句之前。这种需求在支持极其多样化环境的项目中更为常见。</p><h4 id="decision-17">2.20.4 Decision</h4><h5 id="from-__future__-imports">from __future__ imports</h5><p>鼓励使用 <code>from __future__ import</code> 语句。这允许给定的源文件今天开始使用更现代的 Python 语法特性。一旦您不再需要在一个特性被隐藏在 <code>__future__</code> 导入后的版本上运行，您可以随意删除这些行。</p><p>在可能在版本低至 3.5 而非 &gt;= 3.7 上执行的代码中，导入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> generator_stop<br></code></pre></td></tr></table></figure><p>有关更多信息，请阅读<a href="https://docs.python.org/3/library/__future__.html">Python未来声明定义</a>文档。</p><p>请在您确信代码仅在足够现代的环境中使用之前，不要移除这些导入。即使您今天在代码中并未使用特定未来导入所启用的功能，保留它在文件中可以防止后续对代码的修改无意中依赖于旧的行为。</p><p>根据需要使用其他 <code>from __future__</code> 导入语句。</p><h3 id="type-annotated-code">2.21 Type Annotated Code</h3><p>您可以根据 <a href="https://peps.python.org/pep-0484/">PEP-484</a> 为 Python 代码添加类型提示，并使用像 <a href="https://github.com/google/pytype">pytype</a> 这样的类型检查工具在构建时对代码进行类型检查。</p><p>类型注解可以在源代码中或在<a href="https://peps.python.org/pep-0484/#stub-files">stub pyi 文件</a>中。尽可能地，注解应当在源代码中。对于第三方或扩展模块，使用 pyi 文件。</p><h4 id="definition-17">2.21.1 Definition</h4><p>类型注解（或称“类型提示”）用于函数或方法的参数和返回值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">a: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>]:<br></code></pre></td></tr></table></figure><p>您还可以使用类似于 <a href="https://peps.python.org/pep-0526/">PEP-526</a> 的语法来声明变量的类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a: SomeType = some_func()<br></code></pre></td></tr></table></figure><h4 id="pros-18">2.21.2 Pros</h4><p>类型注解提高了代码的可读性和可维护性。类型检查器将许多运行时错误转换为构建时错误，并减少您使用<a href="#power-features">Power Features</a>的能力。</p><h4 id="cons-18">2.21.3 Cons</h4><p>您需要保持类型声明的最新状态。您可能会看到一些您认为是有效代码的类型错误。使用<a href="https://github.com/google/pytype">type checker</a>可能会降低您使用<a href="#power-features">Power Features</a>的能力。</p><h4 id="decision-18">2.21.4 Decision</h4><p>在更新代码时，强烈建议启用Python类型分析。在添加或修改公共API时，请包含类型注释，并在构建系统中通过pytype启用检查。由于静态分析在Python中相对较新，我们承认不希望出现的副作用（例如错误推断的类型）可能会阻碍某些项目的采用。在这些情况下，建议作者在BUILD文件或代码本身中适当地添加带有TODO的注释或链接到描述当前阻碍类型注释采用的问题的错误。</p><h2 id="python-style-rules">3 Python Style Rules</h2><h3 id="semicolons">3.1 Semicolons</h3><p>请勿用分号结束您的行，也不要使用分号将两个语句放在同一行。</p><h3 id="line-length">3.2 Line length</h3><p>最大行长度为<em>80个字符</em>。</p><p>80个字符限制的明确例外：</p><ul><li>长导入语句</li><li>URLs、路径名或注释中的长标志</li><li>长字符串模块级常量不包含空格，这使得在诸如URL或路径名等情况下，跨行拆分变得不方便<ul><li>Pylint 禁用注释。（例如：<code># pylint: disable=invalid-name</code>）</li></ul></li></ul><p>请勿使用反斜杠进行<a href="https://docs.python.org/3/reference/lexical_analysis.html#explicit-line-joining">显式行续接</a>。</p><p>相反，可以利用Python的<a href="http://docs.python.org/reference/lexical_analysis.html#implicit-line-joining">在括号、方括号和大括号内的隐式行连接</a>。如果有必要，可以在一个表达式周围添加一对额外的括号。</p><p>请注意，这条规则并不禁止在字符串中使用反斜杠转义的换行符（见<a href="#strings">下文</a>）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes: foo_bar(<span class="hljs-variable language_">self</span>, width, height, color=<span class="hljs-string">&#x27;black&#x27;</span>, design=<span class="hljs-literal">None</span>, x=<span class="hljs-string">&#x27;foo&#x27;</span>,<br>             emphasis=<span class="hljs-literal">None</span>, highlight=<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>Yes: <span class="hljs-keyword">if</span> (width == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> height == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span><br>         color == <span class="hljs-string">&#x27;red&#x27;</span> <span class="hljs-keyword">and</span> emphasis == <span class="hljs-string">&#x27;strong&#x27;</span>):<br><br>     (bridge_questions.clarification_on<br>      .average_airspeed_of.unladen_swallow) = <span class="hljs-string">&#x27;African or European?&#x27;</span><br><br>     <span class="hljs-keyword">with</span> (<br>         very_long_first_expression_function() <span class="hljs-keyword">as</span> spam,<br>         very_long_second_expression_function() <span class="hljs-keyword">as</span> beans,<br>         third_thing() <span class="hljs-keyword">as</span> eggs,<br>     ):<br>       place_order(eggs, beans, spam, beans)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>No:  <span class="hljs-keyword">if</span> width == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> height == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> \<br>         color == <span class="hljs-string">&#x27;red&#x27;</span> <span class="hljs-keyword">and</span> emphasis == <span class="hljs-string">&#x27;strong&#x27;</span>:<br><br>     bridge_questions.clarification_on \<br>         .average_airspeed_of.unladen_swallow = <span class="hljs-string">&#x27;African or European?&#x27;</span><br><br>     <span class="hljs-keyword">with</span> very_long_first_expression_function() <span class="hljs-keyword">as</span> spam, \<br>           very_long_second_expression_function() <span class="hljs-keyword">as</span> beans, \<br>           third_thing() <span class="hljs-keyword">as</span> eggs:<br>       place_order(eggs, beans, spam, beans)<br></code></pre></td></tr></table></figure><p>当一个字面字符串无法在单行中显示时，请使用括号进行隐式行连接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">x = (<span class="hljs-string">&#x27;This will build a very long long &#x27;</span><br>     <span class="hljs-string">&#x27;long long long long long long string&#x27;</span>)<br></code></pre></td></tr></table></figure><p>优先在尽可能高的句法层次上换行。如果必须换行两次，则两次都应在相同的句法层次上换行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes: bridgekeeper.answer(<br>         name=<span class="hljs-string">&quot;Arthur&quot;</span>, quest=questlib.find(owner=<span class="hljs-string">&quot;Arthur&quot;</span>, perilous=<span class="hljs-literal">True</span>))<br><br>     answer = (a_long_line().of_chained_methods()<br>               .that_eventually_provides().an_answer())<br><br>     <span class="hljs-keyword">if</span> (<br>         config <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span><br>         <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;editor.language&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> config<br>         <span class="hljs-keyword">or</span> config[<span class="hljs-string">&#x27;editor.language&#x27;</span>].use_spaces <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span><br>     ):<br>       use_tabs()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">No: bridgekeeper.answer(name=<span class="hljs-string">&quot;Arthur&quot;</span>, quest=questlib.find(<br>        owner=<span class="hljs-string">&quot;Arthur&quot;</span>, perilous=<span class="hljs-literal">True</span>))<br><br>    answer = a_long_line().of_chained_methods().that_eventually_provides(<br>        ).an_answer()<br><br>    <span class="hljs-keyword">if</span> (config <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;editor.language&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> config <span class="hljs-keyword">or</span> config[<br>        <span class="hljs-string">&#x27;editor.language&#x27;</span>].use_spaces <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>):<br>      use_tabs()<br><br></code></pre></td></tr></table></figure><p>在评论中，如果有必要，将较长的URL单独放在一行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes:  <span class="hljs-comment"># See details at</span><br>      <span class="hljs-comment"># http://www.example.com/us/developer/documentation/api/content/v2.0/csv_file_name_extension_full_specification.html</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">No:  <span class="hljs-comment"># See details at</span><br>     <span class="hljs-comment"># http://www.example.com/us/developer/documentation/api/content/\</span><br>     <span class="hljs-comment"># v2.0/csv_file_name_extension_full_specification.html</span><br></code></pre></td></tr></table></figure><p>请注意上述行续例中元素的缩进；有关解释，请参见<a href="#s3.4-indentation">indentation</a>部分。</p><p>在所有其他情况下，当一行超过80个字符，并且<a href="https://github.com/psf/black">Black</a>或<a href="https://github.com/google/pyink">Pyink</a>自动格式化工具无法将该行缩短到限制之内时，该行可以超过此最大限制。鼓励作者在合理的情况下根据上述说明手动断开该行。</p><h3 id="parentheses">3.3 Parentheses</h3><p>谨慎使用括号。</p><p>在元组周围使用括号是可以的，但并不是必须的。在返回语句或条件语句中，除非使用括号表示隐含的行继续或指示一个元组，否则不应使用括号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes: <span class="hljs-keyword">if</span> foo:<br>         bar()<br>     <span class="hljs-keyword">while</span> x:<br>         x = bar()<br>     <span class="hljs-keyword">if</span> x <span class="hljs-keyword">and</span> y:<br>         bar()<br>     <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> x:<br>         bar()<br>     <span class="hljs-comment"># 对于一个包含1个项目的元组，括号比逗号在视觉上更为明显</span><br>     onesie = (foo,)<br>     <span class="hljs-keyword">return</span> foo<br>     <span class="hljs-keyword">return</span> spam, beans<br>     <span class="hljs-keyword">return</span> (spam, beans)<br>     <span class="hljs-keyword">for</span> (x, y) <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span>.items(): ...<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">No:  <span class="hljs-keyword">if</span> (x):<br>         bar()<br>     <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span>(x):<br>         bar()<br>     <span class="hljs-keyword">return</span> (foo)<br></code></pre></td></tr></table></figure><h3 id="indentation">3.4 Indentation</h3><p>将代码块缩进 <em>4 个空格</em>。</p><p>切勿使用制表符。隐含的行续应将换行的元素垂直对齐（见<a href="#s3.2-line-length">line length examples</a>），或者使用悬挂的4个空格缩进。闭合的（圆形、方形或花括号）括号可以放在表达式的末尾，或单独放在新行上，但此时应与对应的开括号所在行保持相同的缩进。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes:   <span class="hljs-comment"># 与开口分隔符对齐</span><br>       foo = long_function_name(var_one, var_two,<br>                                var_three, var_four)<br>       meal = (spam,<br>               beans)<br><br>       <span class="hljs-comment"># 与字典中的开口分隔符对齐</span><br>       foo = &#123;<br>           <span class="hljs-string">&#x27;long_dictionary_key&#x27;</span>: value1 +<br>                                  value2,<br>           ...<br>       &#125;<br><br>       <span class="hljs-comment"># 4-space 悬挂缩进；第一行无内容</span><br>       foo = long_function_name(<br>           var_one, var_two, var_three,<br>           var_four)<br>       meal = (<br>           spam,<br>           beans)<br><br>       <span class="hljs-comment"># 4-space 悬挂缩进；第一行无内容，</span><br>       <span class="hljs-comment"># 在新的一行上关闭括号</span><br>       foo = long_function_name(<br>           var_one, var_two, var_three,<br>           var_four<br>       )<br>       meal = (<br>           spam,<br>           beans,<br>       )<br><br>       <span class="hljs-comment"># 4-space hanging indent in a dictionary.</span><br>       foo = &#123;<br>           <span class="hljs-string">&#x27;long_dictionary_key&#x27;</span>:<br>               long_dictionary_value,<br>           ...<br>       &#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">No:    <span class="hljs-comment"># 第一行的内容是禁止的</span><br>       foo = long_function_name(var_one, var_two,<br>           var_three, var_four)<br>       meal = (spam,<br>           beans)<br><br>       <span class="hljs-comment"># 2-space hanging indent forbidden.</span><br>       foo = long_function_name(<br>         var_one, var_two, var_three,<br>         var_four)<br><br>       <span class="hljs-comment"># No hanging indent in a dictionary.</span><br>       foo = &#123;<br>           <span class="hljs-string">&#x27;long_dictionary_key&#x27;</span>:<br>           long_dictionary_value,<br>           ...<br>       &#125;<br></code></pre></td></tr></table></figure><h4 id="trailing-commas-in-sequences-of-items">3.4.1 Trailing commas in sequences of items?</h4><p>在项目序列中，只有当闭合容器标记<code>]</code>、<code>)</code>或<code>&#125;</code>不与最后一个元素位于同一行时，才建议使用尾随逗号，同时对于只有一个元素的元组也适用。尾随逗号的存在还被用作提示我们的Python代码自动格式化工具 <a href="https://github.com/psf/black">Black</a> 或 <a href="https://github.com/google/pyink">Pyink</a>，以指示它在最后一个元素后存在<code>,</code>时，将项目容器自动格式化为每行一个项目。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes:   golomb3 = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>]<br>       golomb4 = [<br>           <span class="hljs-number">0</span>,<br>           <span class="hljs-number">1</span>,<br>           <span class="hljs-number">4</span>,<br>           <span class="hljs-number">6</span>,<br>       ]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">No:    golomb4 = [<br>           <span class="hljs-number">0</span>,<br>           <span class="hljs-number">1</span>,<br>           <span class="hljs-number">4</span>,<br>           <span class="hljs-number">6</span>,]<br></code></pre></td></tr></table></figure><h3 id="blank-lines">3.5 Blank Lines</h3><p>在顶层定义之间留出两个空行，无论是函数定义还是类定义。在方法定义之间以及<code>class</code>的文档字符串与第一个方法之间留出一个空行。在<code>def</code>行后不要留空行。在函数或方法内部，根据判断适当使用单个空行。</p><p>空行不必与定义相连。例如，紧接在函数、类和方法定义之前的相关注释是有意义的。考虑一下，您的注释是否可以作为文档字符串的一部分更有用。</p><h3 id="whitespace">3.6 Whitespace</h3><p>遵循标准排版规则，在标点符号周围使用空格。</p><p>括号、方括号或大括号内不得有空格。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes: spam(ham[<span class="hljs-number">1</span>], &#123;<span class="hljs-string">&#x27;eggs&#x27;</span>: <span class="hljs-number">2</span>&#125;, [])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">No:  spam( ham[ <span class="hljs-number">1</span> ], &#123; <span class="hljs-string">&#x27;eggs&#x27;</span>: <span class="hljs-number">2</span> &#125;, [ ] )<br></code></pre></td></tr></table></figure><p>在逗号、分号或冒号之前不要留空格。在逗号、分号或冒号之后应留空格，但在行末除外。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes: <span class="hljs-keyword">if</span> x == <span class="hljs-number">4</span>:<br>         <span class="hljs-built_in">print</span>(x, y)<br>     x, y = y, x<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">No:  <span class="hljs-keyword">if</span> x == <span class="hljs-number">4</span> :<br>         <span class="hljs-built_in">print</span>(x , y)<br>     x , y = y , x<br></code></pre></td></tr></table></figure><p>在开始参数列表、索引或切片的开放括号/方括号之前，不应有空格。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes: spam(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">No:  spam (<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes: <span class="hljs-built_in">dict</span>[<span class="hljs-string">&#x27;key&#x27;</span>] = <span class="hljs-built_in">list</span>[index]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">No:  <span class="hljs-built_in">dict</span> [<span class="hljs-string">&#x27;key&#x27;</span>] = <span class="hljs-built_in">list</span> [index]<br></code></pre></td></tr></table></figure><p>没有多余的空格。</p><p>在赋值操作符（<code>=</code>）、比较操作符（<code>==, &lt;, &gt;, !=, &lt;&gt;, &lt;=, &gt;=, in, not in, is, is not</code>）和布尔运算符（<code>and, or, not</code>）的两侧各留一个空格。对于算术运算符（<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code>, <code>@</code>）周围空格的插入，请根据你的判断进行处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes: x == <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">No:  x&lt;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>在传递关键字参数或定义默认参数值时，切勿在<code>=</code>周围使用空格，唯一的例外是：<a href="#typing-default-values">当存在类型注解时</a>，<em>应</em>在默认参数值的<code>=</code>周围使用空格。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes: <span class="hljs-keyword">def</span> <span class="hljs-title function_">complex</span>(<span class="hljs-params">real, imag=<span class="hljs-number">0.0</span></span>): <span class="hljs-keyword">return</span> Magic(r=real, i=imag)<br>Yes: <span class="hljs-keyword">def</span> <span class="hljs-title function_">complex</span>(<span class="hljs-params">real, imag: <span class="hljs-built_in">float</span> = <span class="hljs-number">0.0</span></span>): <span class="hljs-keyword">return</span> Magic(r=real, i=imag)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">No:  <span class="hljs-keyword">def</span> <span class="hljs-title function_">complex</span>(<span class="hljs-params">real, imag = <span class="hljs-number">0.0</span></span>): <span class="hljs-keyword">return</span> Magic(r = real, i = imag)<br>No:  <span class="hljs-keyword">def</span> <span class="hljs-title function_">complex</span>(<span class="hljs-params">real, imag: <span class="hljs-built_in">float</span>=<span class="hljs-number">0.0</span></span>): <span class="hljs-keyword">return</span> Magic(r = real, i = imag)<br></code></pre></td></tr></table></figure><p>不要使用空格来垂直对齐连续行上的标记，因为这会增加维护负担（适用于 <code>:</code>, <code>#</code>, <code>=</code>, 等等）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes:<br>  foo = <span class="hljs-number">1000</span>  <span class="hljs-comment"># comment</span><br>  long_name = <span class="hljs-number">2</span>  <span class="hljs-comment"># comment that should not be aligned</span><br><br>  dictionary = &#123;<br>      <span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-string">&#x27;long_name&#x27;</span>: <span class="hljs-number">2</span>,<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">No:<br>  foo       = <span class="hljs-number">1000</span>  <span class="hljs-comment"># comment</span><br>  long_name = <span class="hljs-number">2</span>     <span class="hljs-comment"># comment that should not be aligned</span><br><br>  dictionary = &#123;<br>      <span class="hljs-string">&#x27;foo&#x27;</span>      : <span class="hljs-number">1</span>,<br>      <span class="hljs-string">&#x27;long_name&#x27;</span>: <span class="hljs-number">2</span>,<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="shebang-line">3.7 Shebang Line</h3><p>大多数 <code>.py</code> 文件不需要以 <code>#!</code> 行开头。程序的主文件应以 <code>#!/usr/bin/env python3</code> 开始（以支持虚拟环境），或者根据 <a href="https://peps.python.org/pep-0394/">PEP-394</a> 使用 <code>#!/usr/bin/python3</code>。</p><p>这一行由内核用于查找Python解释器，但在导入模块时被Python忽略。它仅在文件旨在直接执行时是必要的。</p><h3 id="comments-and-docstrings">3.8 Comments and Docstrings</h3><p>确保为模块、函数、方法的文档字符串和内联注释使用正确的风格。</p><h4 id="docstrings">3.8.1 Docstrings</h4><p>Python使用<em>docstrings</em>来对代码进行文档化。文档字符串是一个字符串，它是包、模块、类或函数中的第一条语句。这些字符串可以通过对象的<code>__doc__</code>成员自动提取，并被<code>pydoc</code>使用。（尝试在您的模块上运行 <code>pydoc</code> 以查看其外观。）始终使用三重引号 <code>"""</code> 格式来编写文档字符串（根据 <a href="https://peps.python.org/pep-0257/">PEP 257</a>）。文档字符串应组织为一个摘要行（一个物理行，不超过 80 个字符），以句号、问号或感叹号结束。当编写更多内容时（鼓励这样做），必须在摘要行后留出一个空行，然后在与第一行第一个引号相同的光标位置开始其余的文档字符串。下面还有更多关于文档字符串的格式指南。</p><h4 id="modules">3.8.2 Modules</h4><p>每个文件应包含许可证模板。选择与项目所使用的许可证相对应的模板（例如，Apache 2.0、BSD、LGPL、GPL）。</p><p>文件应以文档字符串开头，描述模块的内容和使用方法。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;A one-line summary of the module or program, terminated by a period.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Leave one blank line.  The rest of this docstring should contain an</span><br><span class="hljs-string">overall description of the module or program.  Optionally, it may also</span><br><span class="hljs-string">contain a brief description of exported classes and functions and/or usage</span><br><span class="hljs-string">examples.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Typical usage example:</span><br><span class="hljs-string"></span><br><span class="hljs-string">  foo = ClassFoo()</span><br><span class="hljs-string">  bar = foo.FunctionBar()</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure></p><h5 id="test-modules">3.8.2.1 Test modules</h5><p>测试文件的模块级文档字符串并不是必需的。只有在可以提供额外信息时，才应包含它们。</p><p>示例包括有关测试应如何进行的一些具体细节、对不寻常的设置模式的解释、对外部环境的依赖等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;This blaze test uses golden files.</span><br><span class="hljs-string"></span><br><span class="hljs-string">You can update those files by running</span><br><span class="hljs-string">`blaze run //foo/bar:foo_test -- --update_golden_files` from the `google3`</span><br><span class="hljs-string">directory.</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>不应使用不提供任何新信息的文档字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;Tests for foo.bar.&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="functions-and-methods">3.8.3 Functions and Methods</h4><p>在本节中，“函数”指的是一种方法、函数、生成器或属性。</p><p>每个具有以下一个或多个特性的函数都必须包含文档字符串：</p><ul><li>作为公共API的一部分</li><li>非平凡大小</li><li>非显而易见的逻辑</li></ul><p>文档字符串应提供足够的信息，以便在不阅读函数代码的情况下编写对该函数的调用。文档字符串应描述函数的调用语法及其语义，但通常不应涉及其实现细节，除非这些细节与函数的使用方式相关。例如，一个作为副作用改变其参数之一的函数应在其文档字符串中指出这一点。否则，与调用者无关的函数实现的微妙但重要的细节，最好以注释的形式与代码一起表达，而不是放在函数的文档字符串中。</p><p>文档字符串可以是描述性风格（<code>"""从 Bigtable 获取行。"""</code>）或命令式风格（<code>"""获取来自 Bigtable 的行。"""</code>），但在一个文件内风格应保持一致。<code>@property</code> 数据描述符的文档字符串应与属性或<a href="#doc-function-args">函数参数</a>的文档字符串使用相同的风格（<code>"""Bigtable 路径。"""</code>，而不是 <code>"""返回 Bigtable 路径。"""</code>）。</p><p>某些函数的特定方面应在特别的部分中进行记录，具体如下所列。每个部分以一个标题行开始，标题行以冒号结束。除了标题之外的所有部分应保持两个或四个空格的悬挂缩进（在一个文件中保持一致）。在函数的名称和签名足够信息丰富，以至于可以用一行文档字符串恰当地描述的情况下，这些部分可以省略。</p><p><a id="doc-function-args"></a> <a href="#doc-function-args"><em>Args:</em></a> : 逐一列出每个参数的名称。描述应紧随名称之后，并用冒号分隔，后面跟一个空格或换行。如果描述过长，无法在单行80个字符内显示，则应使用比参数名称多2或4个空格的悬挂缩进（在文件中保持一致）。描述应包括所需的类型，如果代码中没有相应的类型注释。如果一个函数接受<code>*foo</code>（可变长度参数列表）和/或<code>**bar</code>（任意关键字参数），则应将其列为<code>*foo</code>和<code>**bar</code>。</p><p><a id="doc-function-returns"></a> <a href="#doc-function-returns"><em>Returns:</em> (or <em>Yields:</em> for generators)</a> : 描述返回值的语义，包括类型注释未提供的任何类型信息。如果函数仅返回 None，则此部分不是必需的。如果文档字符串以“Return”、“Returns”、“Yield”或“Yields”开头（例如 <code>"""Returns row from Bigtable as a tuple of strings."""</code>）<em>并且</em>开头的句子足以描述返回值，则可以省略此部分。不要模仿较旧的“NumPy 风格”（<a href="https://numpy.org/doc/1.24/reference/generated/numpy.linalg.qr.html">示例</a>），该风格常常将元组返回值记录为多个具有各自名称的返回值（从不提及元组）。相反，应将此类返回值描述为：“返回：一个元组 (mat_a, mat_b)，其中 mat_a 是...，而...”。文档字符串中的辅助名称不必与函数体中使用的任何内部名称相对应（因为这些不是 API 的一部分）。如果函数使用 <code>yield</code>（是一个生成器），则 <code>Yields:</code> 部分应记录 <code>next()</code> 返回的对象，而不是调用评估的生成器对象本身。</p><p><a id="doc-function-raises"></a> <a href="#doc-function-raises"><em>Raises:</em></a> : 列出所有与接口相关的异常，并附上描述。使用类似的异常名称 + 冒号 + 空格或换行以及悬挂缩进的样式，如<em>Args:</em>中所述。您不应记录在文档字符串中指定的API被违反时引发的异常（因为这将悖论性地使违反API时的行为成为API的一部分）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_smalltable_rows</span>(<span class="hljs-params"></span><br><span class="hljs-params">    table_handle: smalltable.Table,</span><br><span class="hljs-params">    keys: <span class="hljs-type">Sequence</span>[<span class="hljs-built_in">bytes</span> | <span class="hljs-built_in">str</span>],</span><br><span class="hljs-params">    require_all_keys: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>,</span><br><span class="hljs-params"></span>) -&gt; Mapping[<span class="hljs-built_in">bytes</span>, <span class="hljs-built_in">tuple</span>[<span class="hljs-built_in">str</span>, ...]]:<br>    <span class="hljs-string">&quot;&quot;&quot;Fetches rows from a Smalltable.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Retrieves rows pertaining to the given keys from the Table instance</span><br><span class="hljs-string">    represented by table_handle.  String keys will be UTF-8 encoded.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        table_handle: An open smalltable.Table instance.</span><br><span class="hljs-string">        keys: A sequence of strings representing the key of each table</span><br><span class="hljs-string">          row to fetch.  String keys will be UTF-8 encoded.</span><br><span class="hljs-string">        require_all_keys: If True only rows with values set for all keys will be</span><br><span class="hljs-string">          returned.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Returns:</span><br><span class="hljs-string">        A dict mapping keys to the corresponding table row data</span><br><span class="hljs-string">        fetched. Each row is represented as a tuple of strings. For</span><br><span class="hljs-string">        example:</span><br><span class="hljs-string"></span><br><span class="hljs-string">        &#123;b&#x27;Serak&#x27;: (&#x27;Rigel VII&#x27;, &#x27;Preparer&#x27;),</span><br><span class="hljs-string">         b&#x27;Zim&#x27;: (&#x27;Irk&#x27;, &#x27;Invader&#x27;),</span><br><span class="hljs-string">         b&#x27;Lrrr&#x27;: (&#x27;Omicron Persei 8&#x27;, &#x27;Emperor&#x27;)&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Returned keys are always bytes.  If a key from the keys argument is</span><br><span class="hljs-string">        missing from the dictionary, then that row was not found in the</span><br><span class="hljs-string">        table (and require_all_keys must have been False).</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Raises:</span><br><span class="hljs-string">        IOError: An error occurred accessing the smalltable.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>同样，这种带有换行的<code>Args:</code>变体也是允许的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_smalltable_rows</span>(<span class="hljs-params"></span><br><span class="hljs-params">    table_handle: smalltable.Table,</span><br><span class="hljs-params">    keys: <span class="hljs-type">Sequence</span>[<span class="hljs-built_in">bytes</span> | <span class="hljs-built_in">str</span>],</span><br><span class="hljs-params">    require_all_keys: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>,</span><br><span class="hljs-params"></span>) -&gt; Mapping[<span class="hljs-built_in">bytes</span>, <span class="hljs-built_in">tuple</span>[<span class="hljs-built_in">str</span>, ...]]:<br>    <span class="hljs-string">&quot;&quot;&quot;Fetches rows from a Smalltable.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Retrieves rows pertaining to the given keys from the Table instance</span><br><span class="hljs-string">    represented by table_handle.  String keys will be UTF-8 encoded.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">      table_handle:</span><br><span class="hljs-string">        An open smalltable.Table instance.</span><br><span class="hljs-string">      keys:</span><br><span class="hljs-string">        A sequence of strings representing the key of each table row to</span><br><span class="hljs-string">        fetch.  String keys will be UTF-8 encoded.</span><br><span class="hljs-string">      require_all_keys:</span><br><span class="hljs-string">        If True only rows with values set for all keys will be returned.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Returns:</span><br><span class="hljs-string">      A dict mapping keys to the corresponding table row data</span><br><span class="hljs-string">      fetched. Each row is represented as a tuple of strings. For</span><br><span class="hljs-string">      example:</span><br><span class="hljs-string"></span><br><span class="hljs-string">      &#123;b&#x27;Serak&#x27;: (&#x27;Rigel VII&#x27;, &#x27;Preparer&#x27;),</span><br><span class="hljs-string">       b&#x27;Zim&#x27;: (&#x27;Irk&#x27;, &#x27;Invader&#x27;),</span><br><span class="hljs-string">       b&#x27;Lrrr&#x27;: (&#x27;Omicron Persei 8&#x27;, &#x27;Emperor&#x27;)&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">      Returned keys are always bytes.  If a key from the keys argument is</span><br><span class="hljs-string">      missing from the dictionary, then that row was not found in the</span><br><span class="hljs-string">      table (and require_all_keys must have been False).</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Raises:</span><br><span class="hljs-string">      IOError: An error occurred accessing the smalltable.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h5 id="overridden-methods">3.8.3.1 Overridden Methods</h5><p>一种重写基类方法的方法，如果明确使用<a href="https://typing-extensions.readthedocs.io/en/latest/#override"><code>@override</code></a>（来自<code>typing_extensions</code>或<code>typing</code>模块）进行装饰，则不需要文档字符串，除非重写的方法的行为实质性地细化了基方法的契约，或者需要提供细节（例如，记录额外的副作用），在这种情况下，重写的方法必须包含至少这些差异的文档字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing_extensions <span class="hljs-keyword">import</span> override<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Parent</span>:<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">do_something</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Parent method, includes docstring.&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># Child class, method annotated with override.</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span>(<span class="hljs-title class_ inherited__">Parent</span>):<br><span class="hljs-meta">  @override</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">do_something</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Child class, but without @override decorator, a docstring is required.</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span>(<span class="hljs-title class_ inherited__">Parent</span>):<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">do_something</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># Docstring is trivial, @override is sufficient to indicate that docs can be</span><br><span class="hljs-comment"># found in the base class.</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span>(<span class="hljs-title class_ inherited__">Parent</span>):<br><span class="hljs-meta">  @override</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">do_something</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;See base class.&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="classes">3.8.4 Classes</h4><p>类下面应该有一个文档字符串，描述该类。公共属性（不包括<a href="#properties">属性</a>）应在此处的<code>Attributes</code>部分进行文档说明，并遵循与<a href="#doc-function-args">函数的<code>Args</code></a>部分相同的格式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SampleClass</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;Summary of class here.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Longer class information...</span><br><span class="hljs-string">    Longer class information...</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Attributes:</span><br><span class="hljs-string">        likes_spam: A boolean indicating if we like SPAM or not.</span><br><span class="hljs-string">        eggs: An integer count of the eggs we have laid.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, likes_spam: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Initializes the instance based on spam preference.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">          likes_spam: Defines if instance exhibits this preference.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>.likes_spam = likes_spam<br>        <span class="hljs-variable language_">self</span>.eggs = <span class="hljs-number">0</span><br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">butter_sticks</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;The number of butter sticks we have.&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>所有类的文档字符串应以一行摘要开始，该摘要描述类实例所代表的内容。这意味着<code>Exception</code>的子类也应描述该异常所代表的内容，而不是它可能发生的上下文。类的文档字符串不应重复不必要的信息，例如该类是一个类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Yes:</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CheeseShopAddress</span>:<br>  <span class="hljs-string">&quot;&quot;&quot;The address of a cheese shop.</span><br><span class="hljs-string"></span><br><span class="hljs-string">  ...</span><br><span class="hljs-string">  &quot;&quot;&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OutOfCheeseError</span>(<span class="hljs-title class_ inherited__">Exception</span>):<br>  <span class="hljs-string">&quot;&quot;&quot;No more cheese is available.&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># No:</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CheeseShopAddress</span>:<br>  <span class="hljs-string">&quot;&quot;&quot;Class that describes the address of a cheese shop.</span><br><span class="hljs-string"></span><br><span class="hljs-string">  ...</span><br><span class="hljs-string">  &quot;&quot;&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OutOfCheeseError</span>(<span class="hljs-title class_ inherited__">Exception</span>):<br>  <span class="hljs-string">&quot;&quot;&quot;Raised when no more cheese is available.&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="block-and-inline-comments">3.8.5 Block and Inline Comments</h4><p>最终需要添加注释的地方是在代码的复杂部分。如果你在下一个<a href="http://en.wikipedia.org/wiki/Code_review">代码审查</a>中需要解释它，那么你应该现在就进行注释。在复杂操作开始之前，应该添加几行注释。对于不明显的操作，则在行末添加注释。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># We use a weighted dictionary search to find out where i is in</span><br><span class="hljs-comment"># the array.  We extrapolate position based on the largest num</span><br><span class="hljs-comment"># in the array and the array size and then do binary search to</span><br><span class="hljs-comment"># get the exact number.</span><br><br><span class="hljs-keyword">if</span> i &amp; (i-<span class="hljs-number">1</span>) == <span class="hljs-number">0</span>:  <span class="hljs-comment"># True if i is 0 or a power of 2.</span><br></code></pre></td></tr></table></figure><p>为了提高可读性，这些注释应至少距离代码有两个空格，并以注释字符<code>#</code>开头，随后在注释文本之前至少留一个空格。</p><p>另一方面，切勿对代码进行描述。假设阅读代码的人比你更了解Python（尽管他们可能不清楚你想要实现的目标）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># BAD COMMENT: Now go through the b array and make sure whenever i occurs</span><br><span class="hljs-comment"># the next element is i+1</span><br></code></pre></td></tr></table></figure><!-- The next section is copied from the C++ style guide. --><h4 id="punctuation-spelling-and-grammar">3.8.6 Punctuation, Spelling, and Grammar</h4><p>请注意标点、拼写和语法；阅读写得好的评论比阅读写得差的评论要容易得多。</p><p>评论应当像叙述文本一样易于阅读，使用恰当的大小写和标点。在许多情况下，完整的句子比句子片段更易于阅读。较短的评论，例如代码行末尾的评论，有时可以不那么正式，但你应保持风格的一致性。</p><p>尽管代码审查者指出你在应该使用分号的地方使用了逗号可能会让人感到沮丧，但源代码保持高水平的清晰度和可读性是非常重要的。恰当的标点、拼写和语法有助于实现这一目标。</p><h3 id="strings">3.10 Strings</h3><p>使用<a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings">f-string</a>、<code>%</code>运算符或<code>format</code>方法来格式化字符串，即使所有参数都是字符串。请根据自己的判断在字符串格式化选项之间做出选择。使用<code>+</code>进行单次连接是可以的，但不要使用<code>+</code>进行格式化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes: x = <span class="hljs-string">f&#x27;name: <span class="hljs-subst">&#123;name&#125;</span>; score: <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span><br>     x = <span class="hljs-string">&#x27;%s, %s!&#x27;</span> % (imperative, expletive)<br>     x = <span class="hljs-string">&#x27;&#123;&#125;, &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(first, second)<br>     x = <span class="hljs-string">&#x27;name: %s; score: %d&#x27;</span> % (name, n)<br>     x = <span class="hljs-string">&#x27;name: %(name)s; score: %(score)d&#x27;</span> % &#123;<span class="hljs-string">&#x27;name&#x27;</span>:name, <span class="hljs-string">&#x27;score&#x27;</span>:n&#125;<br>     x = <span class="hljs-string">&#x27;name: &#123;&#125;; score: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, n)<br>     x = a + b<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">No: x = first + <span class="hljs-string">&#x27;, &#x27;</span> + second<br>    x = <span class="hljs-string">&#x27;name: &#x27;</span> + name + <span class="hljs-string">&#x27;; score: &#x27;</span> + <span class="hljs-built_in">str</span>(n)<br></code></pre></td></tr></table></figure><p>避免在循环中使用 <code>+</code> 和 <code>+=</code> 运算符来累积字符串。在某些情况下，使用加法累积字符串可能导致二次而非线性的运行时间。尽管这种常见的累积方式在 CPython 中可能会被优化，但这属于实现细节。优化适用的条件并不容易预测，并且可能会发生变化。相反，应该将每个子字符串添加到一个列表中，并在循环结束后使用 <code>''.join</code> 将列表连接起来，或者将每个子字符串写入 <code>io.StringIO</code> 缓冲区。这些技术在时间复杂度上始终具有摊销线性运行时间复杂度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes: items = [<span class="hljs-string">&#x27;&lt;table&gt;&#x27;</span>]<br>     <span class="hljs-keyword">for</span> last_name, first_name <span class="hljs-keyword">in</span> employee_list:<br>         items.append(<span class="hljs-string">&#x27;&lt;tr&gt;&lt;td&gt;%s, %s&lt;/td&gt;&lt;/tr&gt;&#x27;</span> % (last_name, first_name))<br>     items.append(<span class="hljs-string">&#x27;&lt;/table&gt;&#x27;</span>)<br>     employee_table = <span class="hljs-string">&#x27;&#x27;</span>.join(items)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">No: employee_table = <span class="hljs-string">&#x27;&lt;table&gt;&#x27;</span><br>    <span class="hljs-keyword">for</span> last_name, first_name <span class="hljs-keyword">in</span> employee_list:<br>        employee_table += <span class="hljs-string">&#x27;&lt;tr&gt;&lt;td&gt;%s, %s&lt;/td&gt;&lt;/tr&gt;&#x27;</span> % (last_name, first_name)<br>    employee_table += <span class="hljs-string">&#x27;&lt;/table&gt;&#x27;</span><br></code></pre></td></tr></table></figure><p>在一个文件中，要保持字符串引号字符的一致性。选择使用<code>'</code>或<code>"</code>，并坚持使用它。在字符串中使用另一种引号字符是可以的，这样可以避免在字符串内需要使用反斜杠转义引号字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes:<br>  Python(<span class="hljs-string">&#x27;Why are you hiding your eyes?&#x27;</span>)<br>  Gollum(<span class="hljs-string">&quot;I&#x27;m scared of lint errors.&quot;</span>)<br>  Narrator(<span class="hljs-string">&#x27;&quot;Good!&quot; thought a happy Python reviewer.&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">No:<br>  Python(<span class="hljs-string">&quot;Why are you hiding your eyes?&quot;</span>)<br>  Gollum(<span class="hljs-string">&#x27;The lint. It burns. It burns us.&#x27;</span>)<br>  Gollum(<span class="hljs-string">&quot;Always the great lint. Watching. Watching.&quot;</span>)<br></code></pre></td></tr></table></figure><p>建议使用 <code>"""</code> 来表示多行字符串，而不是 <code>'''</code>。项目可以选择仅在同时使用 <code>'</code> 表示常规字符串的情况下，使用 <code>'''</code> 来表示所有非文档字符串的多行字符串。无论如何，文档字符串必须使用 <code>"""</code>。</p><p>多行字符串不会随着程序其余部分的缩进而变化。如果您需要避免在字符串中嵌入额外的空格，可以使用连接的单行字符串或使用 <a href="https://docs.python.org/3/library/textwrap.html#textwrap.dedent"><code>textwrap.dedent()</code></a> 的多行字符串，以去除每行开头的空格：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">  No:<br>  long_string = <span class="hljs-string">&quot;&quot;&quot;This is pretty ugly.</span><br><span class="hljs-string">Don&#x27;t do this.</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes:<br>long_string = <span class="hljs-string">&quot;&quot;&quot;This is fine if your use case can accept</span><br><span class="hljs-string">    extraneous leading spaces.&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes:<br>long_string = (<span class="hljs-string">&quot;And this is fine if you cannot accept\n&quot;</span> +<br>               <span class="hljs-string">&quot;extraneous leading spaces.&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes:<br>long_string = (<span class="hljs-string">&quot;And this too is fine if you cannot accept\n&quot;</span><br>               <span class="hljs-string">&quot;extraneous leading spaces.&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes:<br><span class="hljs-keyword">import</span> textwrap<br><br>long_string = textwrap.dedent(<span class="hljs-string">&quot;&quot;&quot;\</span><br><span class="hljs-string">    This is also fine, because textwrap.dedent()</span><br><span class="hljs-string">    will collapse common leading spaces in each line.&quot;&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>请注意，在这里使用反斜杠并不违反对<a href="#line-length">显式行续</a>的禁止；在这种情况下，反斜杠是<a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals">转义字符串字面量中的换行符</a>。</p><h4 id="logging">3.10.1 Logging</h4><p>对于那些将模式字符串（带有%-占位符）作为第一个参数的日志记录函数：始终使用字符串字面量（而不是f-string！）作为第一个参数，并将模式参数作为后续参数传递。一些日志记录实现会将未展开的模式字符串收集为可查询的字段。这也可以防止花费时间渲染一个没有配置输出的日志记录器的消息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes:<br><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br>logger = tf.get_logger()<br>logger.info(<span class="hljs-string">&#x27;TensorFlow Version is: %s&#x27;</span>, tf.__version__)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes:<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> absl <span class="hljs-keyword">import</span> logging<br><br>logging.info(<span class="hljs-string">&#x27;Current $PAGER is: %s&#x27;</span>, os.getenv(<span class="hljs-string">&#x27;PAGER&#x27;</span>, default=<span class="hljs-string">&#x27;&#x27;</span>))<br><br>homedir = os.getenv(<span class="hljs-string">&#x27;HOME&#x27;</span>)<br><span class="hljs-keyword">if</span> homedir <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> os.access(homedir, os.W_OK):<br>  logging.error(<span class="hljs-string">&#x27;Cannot write to home directory, $HOME=%r&#x27;</span>, homedir)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">No:<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> absl <span class="hljs-keyword">import</span> logging<br><br>logging.info(<span class="hljs-string">&#x27;Current $PAGER is:&#x27;</span>)<br>logging.info(os.getenv(<span class="hljs-string">&#x27;PAGER&#x27;</span>, default=<span class="hljs-string">&#x27;&#x27;</span>))<br><br>homedir = os.getenv(<span class="hljs-string">&#x27;HOME&#x27;</span>)<br><span class="hljs-keyword">if</span> homedir <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> os.access(homedir, os.W_OK):<br>  logging.error(<span class="hljs-string">f&#x27;Cannot write to home directory, $HOME=<span class="hljs-subst">&#123;homedir!r&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="error-messages">3.10.2 Error Messages</h4><p>错误信息（例如：关于异常的消息字符串，如 <code>ValueError</code>，或显示给用户的消息）应遵循三个准则：</p><ol type="1"><li><p>信息需要与实际的错误状态精确匹配</p></li><li><p>插值片段必须始终清晰可辨</p></li><li><p>它们应该允许简单的自动化处理（例如，使用grep命令）</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes:<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-number">0</span> &lt;= p &lt;= <span class="hljs-number">1</span>:<br>  <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">f&#x27;Not a probability: <span class="hljs-subst">&#123;p=&#125;</span>&#x27;</span>)<br><br><span class="hljs-keyword">try</span>:<br>  os.rmdir(workdir)<br><span class="hljs-keyword">except</span> OSError <span class="hljs-keyword">as</span> error:<br>  logging.warning(<span class="hljs-string">&#x27;Could not remove directory (reason: %r): %r&#x27;</span>,<br>                  error, workdir)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">No:<br><span class="hljs-keyword">if</span> p &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> p &gt; <span class="hljs-number">1</span>:  <span class="hljs-comment"># PROBLEM: also false for float(&#x27;nan&#x27;)!</span><br>  <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">f&#x27;Not a probability: <span class="hljs-subst">&#123;p=&#125;</span>&#x27;</span>)<br><br><span class="hljs-keyword">try</span>:<br>  os.rmdir(workdir)<br><span class="hljs-keyword">except</span> OSError:<br>  <span class="hljs-comment"># PROBLEM: Message makes an assumption that might not be true:</span><br>  <span class="hljs-comment"># Deletion might have failed for some other reason, misleading</span><br>  <span class="hljs-comment"># whoever has to debug this.</span><br>  logging.warning(<span class="hljs-string">&#x27;Directory already was deleted: %s&#x27;</span>, workdir)<br><br><span class="hljs-keyword">try</span>:<br>  os.rmdir(workdir)<br><span class="hljs-keyword">except</span> OSError:<br>  <span class="hljs-comment"># PROBLEM: The message is harder to grep for than necessary, and</span><br>  <span class="hljs-comment"># not universally non-confusing for all possible values of `workdir`.</span><br>  <span class="hljs-comment"># Imagine someone calling a library function with such code</span><br>  <span class="hljs-comment"># using a name such as workdir = &#x27;deleted&#x27;. The warning would read:</span><br>  <span class="hljs-comment"># &quot;The deleted directory could not be deleted.&quot;</span><br>  logging.warning(<span class="hljs-string">&#x27;The %s directory could not be deleted.&#x27;</span>, workdir)<br></code></pre></td></tr></table></figure><h3 id="files-sockets-and-similar-stateful-resources">3.11 Files, Sockets, and similar Stateful Resources</h3><p>在完成对文件和套接字的操作后，应显式关闭它们。这个规则自然扩展到内部使用套接字的可关闭资源，例如数据库连接，以及其他需要以类似方式关闭的资源。仅举几个例子，这还包括<a href="https://docs.python.org/3/library/mmap.html">mmap</a>映射、<a href="https://docs.h5py.org/en/stable/high/file.html">h5py文件对象</a>和<a href="https://matplotlib.org/2.1.0/api/_as_gen/matplotlib.pyplot.close.html">matplotlib.pyplot图形窗口</a>。</p><p>不必要地保持文件、套接字或其他此类有状态对象处于打开状态有许多缺点：</p><ul><li>它们可能会消耗有限的系统资源，例如文件描述符。处理许多此类对象的代码如果在使用后未能及时将其返回给系统，可能会不必要地耗尽这些资源</li><li>保持文件打开可能会阻止其他操作，例如移动或删除它们，或卸载文件系统</li><li>在程序中共享的文件和套接字可能在逻辑上被关闭后，无意中被读取或写入。如果它们实际上已经关闭，尝试从中读取或写入将引发异常，从而更早地使问题显现</li></ul><p>此外，虽然文件和套接字（以及一些类似行为的资源）在对象被析构时会自动关闭，但将对象的生命周期与资源的状态耦合在一起是一种不良实践：</p><ul><li>没有保证运行时何时会实际调用<code>__del__</code>方法。不同的Python实现使用不同的内存管理技术，例如延迟垃圾回收，这可能会任意且无限期地延长对象的生命周期。</li><li>意外的对文件的引用，例如在全局变量或异常回溯中，可能会使其存在的时间比预期更长。</li></ul><p>依赖终结器进行自动清理并产生可观察的副作用，这一做法在多个十年和多种语言中被反复重新发现，导致了重大问题（例如，参见<a href="https://wiki.sei.cmu.edu/confluence/display/java/MET12-J.+Do+not+use+finalizers">这篇文章</a>关于Java的讨论）。</p><p>管理文件和类似资源的首选方式是使用 <a href="http://docs.python.org/reference/compound_stmts.html#the-with-statement"><code>with</code> 语句</a>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;hello.txt&quot;</span>) <span class="hljs-keyword">as</span> hello_file:<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> hello_file:<br>        <span class="hljs-built_in">print</span>(line)<br></code></pre></td></tr></table></figure><p>对于不支持<code>with</code>语句的类文件对象，请使用<code>contextlib.closing()</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> contextlib<br><br><span class="hljs-keyword">with</span> contextlib.closing(urllib.urlopen(<span class="hljs-string">&quot;http://www.python.org/&quot;</span>)) <span class="hljs-keyword">as</span> front_page:<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> front_page:<br>        <span class="hljs-built_in">print</span>(line)<br></code></pre></td></tr></table></figure><p>在上下文基础的资源管理不可行的少数情况下，代码文档必须清楚地解释资源生命周期是如何管理的。</p><h3 id="todo-comments">3.12 TODO Comments</h3><p>对于临时代码、短期解决方案或虽然足够好但并不完美的代码，请使用 <code>TODO</code> 注释。</p><p>一个 <code>TODO</code> 注释以全大写的单词 <code>TODO</code> 开头，后接冒号，以及指向包含上下文的资源的链接，理想情况下是一个错误引用。错误引用更为理想，因为错误会被跟踪并有后续评论。接着用一个以连字符 <code>-</code> 引入的解释性字符串来补充这一上下文。</p><p>其目的是建立一个一致的 <code>TODO</code> 格式，以便能够进行搜索，从而获取更多细节。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> crbug.com/192795 - Investigate cpufreq optimizations.</span><br></code></pre></td></tr></table></figure><p>旧风格，曾被推荐，但在新代码中不鼓励使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># TODO(crbug.com/192795): Investigate cpufreq optimizations.</span><br><span class="hljs-comment"># TODO(yourusername): Use a &quot;\*&quot; here for concatenation operator.</span><br></code></pre></td></tr></table></figure><p>避免添加将个人或团队作为上下文的TODO。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> @yourusername - File an issue and use a &#x27;*&#x27; for repetition.</span><br></code></pre></td></tr></table></figure><p>如果你的 <code>TODO</code> 形式为“在未来的某个日期做某事”，请确保你要么包含一个非常具体的日期（例如“在2009年11月之前修复”），要么包含一个非常具体的事件（例如“当所有客户端都能处理XML响应时移除此代码”），以便未来的代码维护者能够理解。问题跟踪非常适合用于此。</p><h3 id="imports-formatting">3.13 Imports formatting</h3><p>导入语句应分行书写；对于<code>typing</code>和<code>collections.abc</code>的导入语句有<a href="#typing-imports">例外情况</a>。</p><p>E.g.:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes: <span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Mapping, <span class="hljs-type">Sequence</span><br>     <span class="hljs-keyword">import</span> os<br>     <span class="hljs-keyword">import</span> sys<br>     <span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Any</span>, NewType<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">No:  <span class="hljs-keyword">import</span> os, sys<br></code></pre></td></tr></table></figure><p>导入语句总是放在文件的顶部，紧接在任何模块注释和文档字符串之后，并在模块全局变量和常量之前。导入语句应按从最通用到最不通用的顺序进行分组：</p><ol type="1"><li><p>Python未来的导入语句。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> annotations<br></code></pre></td></tr></table></figure><p>请参见<a href="#from-future-imports">上文</a>以获取有关这些内容的更多信息。</p></li><li><p>Python标准库导入。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br></code></pre></td></tr></table></figure></li><li><p>第三方模块或包的导入。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br></code></pre></td></tr></table></figure></li><li><p>代码库子包导入。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> otherproject.ai <span class="hljs-keyword">import</span> mind<br></code></pre></td></tr></table></figure></li><li><p><strong>已弃用：</strong> 与此文件属于同一顶级子包的特定应用程序导入。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> myproject.backend.hgwells <span class="hljs-keyword">import</span> time_machine<br></code></pre></td></tr></table></figure><p>您可能会发现较旧的 Google Python 风格代码是这样做的，但这已不再是必需的。<strong>鼓励新代码不必对此烦恼。</strong> 只需将特定于应用程序的子包导入视为与其他子包导入相同即可。</p></li></ol><p>在每个分组内，导入应根据每个模块的完整包路径（即<code>from path import ...</code>中的<code>path</code>）按字典顺序排序，忽略大小写。代码可以选择在导入部分之间放置一个空行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> collections<br><span class="hljs-keyword">import</span> queue<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">from</span> absl <span class="hljs-keyword">import</span> app<br><span class="hljs-keyword">from</span> absl <span class="hljs-keyword">import</span> flags<br><span class="hljs-keyword">import</span> bs4<br><span class="hljs-keyword">import</span> cryptography<br><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><br><span class="hljs-keyword">from</span> book.genres <span class="hljs-keyword">import</span> scifi<br><span class="hljs-keyword">from</span> myproject.backend <span class="hljs-keyword">import</span> huxley<br><span class="hljs-keyword">from</span> myproject.backend.hgwells <span class="hljs-keyword">import</span> time_machine<br><span class="hljs-keyword">from</span> myproject.backend.state_machine <span class="hljs-keyword">import</span> main_loop<br><span class="hljs-keyword">from</span> otherproject.ai <span class="hljs-keyword">import</span> body<br><span class="hljs-keyword">from</span> otherproject.ai <span class="hljs-keyword">import</span> mind<br><span class="hljs-keyword">from</span> otherproject.ai <span class="hljs-keyword">import</span> soul<br><br><span class="hljs-comment"># Older style code may have these imports down here instead:</span><br><span class="hljs-comment">#from myproject.backend.hgwells import time_machine</span><br><span class="hljs-comment">#from myproject.backend.state_machine import main_loop</span><br></code></pre></td></tr></table></figure><h3 id="statements">3.14 Statements</h3><p>通常每行只包含一个陈述。</p><p>然而，只有当整个语句适合在一行上时，您才能将测试的结果放在与测试相同的行上。特别是，您绝对不能在<code>try</code>/<code>except</code>中这样做，因为<code>try</code>和<code>except</code>无法同时放在同一行上，而只有在没有<code>else</code>的情况下，您才能在<code>if</code>中这样做。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes:<br><br>  <span class="hljs-keyword">if</span> foo: bar(foo)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">No:<br><br>  <span class="hljs-keyword">if</span> foo: bar(foo)<br>  <span class="hljs-keyword">else</span>:   baz(foo)<br><br>  <span class="hljs-keyword">try</span>:               bar(foo)<br>  <span class="hljs-keyword">except</span> ValueError: baz(foo)<br><br>  <span class="hljs-keyword">try</span>:<br>      bar(foo)<br>  <span class="hljs-keyword">except</span> ValueError: baz(foo)<br></code></pre></td></tr></table></figure><h3 id="getters-and-setters">3.15 Getters and Setters</h3><p>获取器和设置器函数（也称为访问器和变更器）应在它们为获取或设置变量的值提供有意义的角色或行为时使用。</p><p>特别是在获取或设置变量的过程复杂或成本显著时，无论是当前还是在合理的未来，都应使用它们。</p><p>例如，如果一对获取器/设置器仅仅是读取和写入一个内部属性，那么这个内部属性应该被公开。相比之下，如果设置一个变量意味着某个状态被失效或重建，那么它应该是一个设置函数。函数调用暗示着可能正在发生一个非平凡的操作。或者，当需要简单逻辑时，<a href="#properties">属性</a> 可能是一个选项，或者重构以不再需要获取器和设置器。</p><p>获取器和设置器应遵循<a href="#s3.16-naming">命名</a>指南，例如<code>get_foo()</code>和<code>set_foo()</code>。</p><p>如果过去的行为允许通过某个属性进行访问，则不要将新的getter/setter函数绑定到该属性上。任何仍试图通过旧方法访问变量的代码都应明显中断，以便让它们意识到复杂性的变化。</p><h3 id="naming">3.16 Naming</h3><p><code>module_name</code>, <code>package_name</code>, <code>ClassName</code>, <code>method_name</code>, <code>ExceptionName</code>, <code>function_name</code>, <code>GLOBAL_CONSTANT_NAME</code>, <code>global_var_name</code>, <code>instance_var_name</code>, <code>function_parameter_name</code>, <code>local_var_name</code>, <code>query_proper_noun_for_thing</code>, <code>send_acronym_via_https</code>.</p><p>函数名称、变量名称和文件名应具有描述性；避免使用缩写。特别是，不要使用对项目外的读者模糊或不熟悉的缩写，也不要通过删除单词中的字母来进行缩写。</p><p>始终使用 <code>.py</code> 文件名扩展名。切勿使用破折号。</p><h4 id="names-to-avoid">3.16.1 Names to Avoid</h4><ul><li><p>单字符名称，除非在特定允许的情况下：</p><ul><li>计数器或迭代器（例如 <code>i</code>、<code>j</code>、<code>k</code>、<code>v</code> 等）。</li><li>在<code>try/except</code>语句中，<code>e</code>作为异常标识符。</li><li>在<code>with</code>语句中将<code>f</code>作为文件句柄</li><li>私有<a href="#typing-type-var">type variables</a>没有约束（例如，<code>_T = TypeVar("_T")</code>，<code>_P = ParamSpec("_P")</code>）</li></ul><p>请注意不要滥用单字符命名。一般来说，描述性应与名称的可见范围成正比。例如，<code>i</code> 可能是一个适合于 5 行代码块的良好名称，但在多个嵌套作用域中，它可能显得过于模糊。</p></li><li><p>在任何包/模块名称中使用破折号（<code>-</code>）</p></li><li><p><code>__double_leading_and_trailing_underscore__</code> 名称（由 Python 保留）</p></li><li><p>冒犯性术语</p></li><li><p>不必要地包含变量类型的名称（例如：<code>id_to_name_dict</code>）</p></li></ul><h4 id="naming-conventions">3.16.2 Naming Conventions</h4><ul><li><p>“内部”是指模块内部，或在类中受保护或私有的部分。</p></li><li><p>在模块变量和函数前加一个下划线（<code>_</code>）在一定程度上可以保护它们（代码检查工具会标记受保护成员的访问）。请注意，单元测试可以访问被测试模块中的受保护常量。</p></li><li><p>在实例变量或方法前加上双下划线（<code>__</code>，也称为“dunder”）实际上使得该变量或方法对其类私有（通过名称重整）；我们不鼓励使用这种方式，因为它会影响可读性和可测试性，并且并不是真正的私有。更推荐使用单下划线。</p></li><li><p>将相关的类和顶层函数放在同一个模块中。 与Java不同，模块中不需要限制自己只能有一个类。</p></li><li><p>对于类名使用大写字母开头的单词（CapWords），而对于模块名则使用小写字母加下划线（lower_with_under.py）。尽管有一些旧的模块名为 CapWords.py，但现在不再推荐使用这种命名方式，因为当模块恰好以类的名称命名时，这会造成混淆。（“等一下——我写的是 <code>import StringIO</code> 还是 <code>from StringIO import StringIO</code>？”）</p></li><li><p>新的 <em>单元测试</em> 文件遵循符合 PEP 8 的 lower_with_under 方法命名规则，例如，<code>test_&lt;method_under_test&gt;_&lt;state&gt;</code>。为了与遵循 CapWords 函数命名规则的遗留模块保持一致（*），在以 <code>test</code> 开头的方法名称中，可能会出现下划线，以分隔名称的逻辑组成部分。一种可能的模式是 <code>test&lt;MethodUnderTest&gt;_&lt;state&gt;</code>。</p></li></ul><h4 id="file-naming">3.16.3 File Naming</h4><p>Python 文件名必须具有 <code>.py</code> 扩展名，并且不得包含破折号（<code>-</code>）。这使得它们可以被导入和单元测试。如果您希望可执行文件在没有扩展名的情况下可访问，请使用符号链接或包含 <code>exec "\$0.py" "\$@"</code> 的简单 bash 包装器。</p><h4 id="guidelines-derived-from-guidos-recommendations">3.16.4 Guidelines derived from <a href="https://en.wikipedia.org/wiki/Guido_van_Rossum">Guido</a>'s Recommendations</h4><table><thead><tr class="header"><th style="text-align: left;">Type</th><th style="text-align: left;">Public</th><th style="text-align: left;">Internal</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">Packages</td><td style="text-align: left;"><code>lower_with_under</code></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;">Modules</td><td style="text-align: left;"><code>lower_with_under</code></td><td style="text-align: left;"><code>_lower_with_under</code></td></tr><tr class="odd"><td style="text-align: left;">Classes</td><td style="text-align: left;"><code>CapWords</code></td><td style="text-align: left;"><code>_CapWords</code></td></tr><tr class="even"><td style="text-align: left;">Exceptions</td><td style="text-align: left;"><code>CapWords</code></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;">Functions</td><td style="text-align: left;"><code>lower_with_under()</code></td><td style="text-align: left;"><code>_lower_with_under()</code></td></tr><tr class="even"><td style="text-align: left;">Global/Class Constants</td><td style="text-align: left;"><code>CAPS_WITH_UNDER</code></td><td style="text-align: left;"><code>_CAPS_WITH_UNDER</code></td></tr><tr class="odd"><td style="text-align: left;">Global/Class Variables</td><td style="text-align: left;"><code>lower_with_under</code></td><td style="text-align: left;"><code>_lower_with_under</code></td></tr><tr class="even"><td style="text-align: left;">Instance Variables</td><td style="text-align: left;"><code>lower_with_under</code></td><td style="text-align: left;"><code>_lower_with_under</code> (protected)</td></tr><tr class="odd"><td style="text-align: left;">Method Names</td><td style="text-align: left;"><code>lower_with_under()</code></td><td style="text-align: left;"><code>_lower_with_under()</code> (protected)</td></tr><tr class="even"><td style="text-align: left;">Function/Method Parameters</td><td style="text-align: left;"><code>lower_with_under</code></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;">Local Variables</td><td style="text-align: left;"><code>lower_with_under</code></td><td style="text-align: left;"></td></tr></tbody></table><h4 id="mathematical-notation">3.16.5 Mathematical Notation</h4><p>对于数学计算密集的代码，当短变量名与参考文献或算法中的既定符号相匹配时，尽管可能违反风格指南，仍然优先使用这些短变量名。在这样做时，应在注释或文档字符串中引用所有命名约定的来源，或者如果来源不可访问，则清晰地记录命名约定。对于公共API，优先使用符合PEP8标准的<code>descriptive_names</code>，因为它们在上下文之外被遇到的可能性更大。</p><h3 id="main">3.17 Main</h3><p>在Python中，<code>pydoc</code>以及单元测试都要求模块能够被导入。如果一个文件旨在作为可执行文件使用，其主要功能应放在<code>main()</code>函数中，并且在执行主程序之前，您的代码应始终检查<code>if __name__ == '__main__'</code>，以确保在模块被导入时不会执行该程序。</p><p>在使用 <a href="https://github.com/abseil/abseil-py">absl</a> 时，请使用 <code>app.run</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> absl <span class="hljs-keyword">import</span> app<br>...<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">argv: <span class="hljs-type">Sequence</span>[<span class="hljs-built_in">str</span>]</span>):<br>    <span class="hljs-comment"># process non-flag arguments</span><br>    ...<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(main)<br></code></pre></td></tr></table></figure><p>否则，请使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    ...<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>所有顶层的代码将在模块被导入时执行。请注意，不要调用函数、创建对象或执行其他在文件被 <code>pydoc</code> 处理时不应执行的操作。</p><h3 id="function-length">3.18 Function length</h3><p>偏好小而专注的函数。</p><p>我们认识到长函数有时是合适的，因此对函数长度没有严格限制。如果一个函数超过大约40行，请考虑是否可以在不损害程序结构的情况下将其拆分。</p><p>即使你的长函数现在运行得非常完美，几个月后有人对其进行修改时，可能会添加新的行为。这可能导致难以发现的错误。保持函数简短和简单使其他人更容易阅读和修改你的代码。</p><p>在处理某些代码时，您可能会遇到冗长而复杂的函数。不要因修改现有代码而感到畏惧：如果处理这样的函数变得困难，您发现错误难以调试，或者您希望在多个不同的上下文中使用其中的一部分，考虑将该函数拆分为更小且更易于管理的部分。</p><h3 id="type-annotations">3.19 Type Annotations</h3><h4 id="general-rules">3.19.1 General Rules</h4><ul><li><p>请熟悉<a href="https://peps.python.org/pep-0484/">PEP-484</a>。</p></li><li><p>对<code>self</code>或<code>cls</code>进行注解通常不是必要的。 <a href="https://docs.python.org/3/library/typing.html#typing.Self"><code>Self</code></a> 可以在需要提供正确的类型信息时使用，例如。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> Self<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseClass</span>:<br><span class="hljs-meta">  @classmethod</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">cls</span>) -&gt; Self:<br>    ...<br><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">difference</span>(<span class="hljs-params">self, other: Self</span>) -&gt; <span class="hljs-built_in">float</span>:<br>    ...<br></code></pre></td></tr></table></figure></li><li><p>同样，不必强迫自己对<code>__init__</code>的返回值进行注释（其中<code>None</code>是唯一有效的选项）。</p></li><li><p>如果其他任何变量或返回类型不应被表达，则使用<code>Any</code>。</p></li><li><p>您并不需要对模块中的所有函数进行注释。</p><ul><li>至少对你的公共API进行注释</li><li>运用判断力在安全性与清晰性之间，以及灵活性之间取得良好的平衡</li><li>注释容易出现类型相关错误的代码（之前的错误或复杂性）</li><li>注释难以理解的代码</li><li>从类型的角度对代码进行注释，随着代码的稳定性提高。在许多情况下，您可以对成熟代码中的所有函数进行注释，而不会失去太多灵活性</li></ul></li></ul><h4 id="line-breaking">3.19.2 Line Breaking</h4><p>请尽量遵循现有的<a href="#indentation">indentation</a>规则。</p><p>在注释之后，许多函数签名将变为“每行一个参数”。为了确保返回类型也能单独占据一行，可以在最后一个参数后面加上一个逗号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_method</span>(<span class="hljs-params"></span><br><span class="hljs-params">    self,</span><br><span class="hljs-params">    first_var: <span class="hljs-built_in">int</span>,</span><br><span class="hljs-params">    second_var: Foo,</span><br><span class="hljs-params">    third_var: Bar | <span class="hljs-literal">None</span>,</span><br><span class="hljs-params"></span>) -&gt; <span class="hljs-built_in">int</span>:<br>  ...<br></code></pre></td></tr></table></figure><p>始终优先在变量之间进行换行，而不是，例如，在变量名称和类型注释之间进行换行。然而，如果所有内容都能适应在同一行中，则可以这样做。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_method</span>(<span class="hljs-params">self, first_var: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>  ...<br></code></pre></td></tr></table></figure><p>如果函数名、最后一个参数和返回类型的组合过长，请在新的一行缩进4个空格。当使用换行时，建议将每个参数和返回类型放在各自的行上，并将闭合括号与<code>def</code>对齐：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_method</span>(<span class="hljs-params"></span><br><span class="hljs-params">    self,</span><br><span class="hljs-params">    other_arg: MyLongType | <span class="hljs-literal">None</span>,</span><br><span class="hljs-params"></span>) -&gt; <span class="hljs-built_in">tuple</span>[MyLongType1, MyLongType1]:<br>  ...<br></code></pre></td></tr></table></figure><p>可选地，返回类型可以与最后一个参数放在同一行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">Okay:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_method</span>(<span class="hljs-params"></span><br><span class="hljs-params">    self,</span><br><span class="hljs-params">    first_var: <span class="hljs-built_in">int</span>,</span><br><span class="hljs-params">    second_var: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">dict</span>[OtherLongType, MyLongType]:<br>  ...<br></code></pre></td></tr></table></figure><p><code>pylint</code> 允许您将闭合括号移动到新的一行，并与开括号对齐，但这样会降低可读性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">No:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_method</span>(<span class="hljs-params">self,</span><br><span class="hljs-params">              other_arg: MyLongType | <span class="hljs-literal">None</span>,</span><br><span class="hljs-params">             </span>) -&gt; <span class="hljs-built_in">dict</span>[OtherLongType, MyLongType]:<br>  ...<br></code></pre></td></tr></table></figure><p>如上面的例子所示，尽量避免断开类型。然而，有时它们的长度过长，无法在一行内显示（尽量保持子类型不被断开）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_method</span>(<span class="hljs-params"></span><br><span class="hljs-params">    self,</span><br><span class="hljs-params">    first_var: <span class="hljs-built_in">tuple</span>[<span class="hljs-built_in">list</span>[MyLongType1],</span><br><span class="hljs-params">                     <span class="hljs-built_in">list</span>[MyLongType2]],</span><br><span class="hljs-params">    second_var: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">dict</span>[</span><br><span class="hljs-params">        MyLongType3, MyLongType4]],</span><br><span class="hljs-params"></span>) -&gt; <span class="hljs-literal">None</span>:<br>  ...<br></code></pre></td></tr></table></figure><p>如果单个名称和类型过长，可以考虑为该类型使用一个<a href="#typing-aliases">别名</a>。最后的手段是在冒号后换行并缩进4个空格。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_function</span>(<span class="hljs-params"></span><br><span class="hljs-params">    long_variable_name:</span><br><span class="hljs-params">        long_module_name.LongTypeName,</span><br><span class="hljs-params"></span>) -&gt; <span class="hljs-literal">None</span>:<br>  ...<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">No:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_function</span>(<span class="hljs-params"></span><br><span class="hljs-params">    long_variable_name: long_module_name.</span><br><span class="hljs-params">        LongTypeName,</span><br><span class="hljs-params"></span>) -&gt; <span class="hljs-literal">None</span>:<br>  ...<br></code></pre></td></tr></table></figure><h4 id="forward-declarations">3.19.3 Forward Declarations</h4><p>如果您需要使用一个尚未定义的类名（来自同一模块）——例如，如果您需要在该类的声明中使用类名，或者如果您使用的是在代码中稍后定义的类——可以选择使用 <code>from __future__ import annotations</code>，或者使用字符串来表示类名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes:<br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> annotations<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>:<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, stack: <span class="hljs-type">Sequence</span>[MyClass], item: OtherClass</span>) -&gt; <span class="hljs-literal">None</span>:<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OtherClass</span>:<br>  ...<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes:<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>:<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, stack: <span class="hljs-type">Sequence</span>[<span class="hljs-string">&#x27;MyClass&#x27;</span>], item: <span class="hljs-string">&#x27;OtherClass&#x27;</span></span>) -&gt; <span class="hljs-literal">None</span>:<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OtherClass</span>:<br>  ...<br></code></pre></td></tr></table></figure><h4 id="default-values">3.19.4 Default Values</h4><p>根据<a href="https://peps.python.org/pep-0008/#other-recommendations">PEP-008</a>，仅对同时具有类型注解和默认值的参数在<code>=</code>周围使用空格。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">a: <span class="hljs-built_in">int</span> = <span class="hljs-number">0</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>  ...<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">No:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">a:<span class="hljs-built_in">int</span>=<span class="hljs-number">0</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>  ...<br></code></pre></td></tr></table></figure><h4 id="nonetype">3.19.5 NoneType</h4><p>在Python类型系统中，<code>NoneType</code>是一个“第一类”类型，并且在类型声明中，<code>None</code>是<code>NoneType</code>的别名。如果一个参数可以是<code>None</code>，则必须进行声明！您可以使用<code>|</code>联合类型表达式（在新的Python 3.10+代码中推荐使用），或者使用较旧的<code>Optional</code>和<code>Union</code>语法。</p><p>使用显式的 <code>X | None</code> 而不是隐式的。早期版本的 PEP 484 允许将 <code>a: str = None</code> 解释为 <code>a: str | None = None</code>，但这不再是首选的行为。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">modern_or_union</span>(<span class="hljs-params">a: <span class="hljs-built_in">str</span> | <span class="hljs-built_in">int</span> | <span class="hljs-literal">None</span>, b: <span class="hljs-built_in">str</span> | <span class="hljs-literal">None</span> = <span class="hljs-literal">None</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>  ...<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">union_optional</span>(<span class="hljs-params">a: <span class="hljs-type">Union</span>[<span class="hljs-built_in">str</span>, <span class="hljs-built_in">int</span>, <span class="hljs-literal">None</span>], b: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>  ...<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">No:<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">nullable_union</span>(<span class="hljs-params">a: <span class="hljs-type">Union</span>[<span class="hljs-literal">None</span>, <span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-built_in">str</span>:<br>  ...<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">implicit_optional</span>(<span class="hljs-params">a: <span class="hljs-built_in">str</span> = <span class="hljs-literal">None</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>  ...<br></code></pre></td></tr></table></figure><h4 id="type-aliases">3.19.6 Type Aliases</h4><p>您可以声明复杂类型的别名。别名的名称应采用大写字母开头的格式。如果该别名仅在此模块中使用，则应为_Private。</p><p>请注意，<code>: TypeAlias</code> 注释仅在版本 3.10 及以上中受支持。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> TypeAlias<br><br>_LossAndGradient: TypeAlias = <span class="hljs-built_in">tuple</span>[tf.Tensor, tf.Tensor]<br>ComplexTFMap: TypeAlias = Mapping[<span class="hljs-built_in">str</span>, _LossAndGradient]<br></code></pre></td></tr></table></figure><h4 id="ignoring-types">3.19.7 Ignoring Types</h4><p>您可以通过特殊注释 <code># type: ignore</code> 在某一行禁用类型检查。</p><p><code>pytype</code> 提供了一个选项，可以针对特定错误进行禁用（类似于 lint）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># pytype: disable=attribute-error</span><br></code></pre></td></tr></table></figure><h4 id="typing-variables">3.19.8 Typing Variables</h4><p><a id="annotated-assignments"></a> <a href="#annotated-assignments"><em>Annotated Assignments</em></a> : 如果一个内部变量的类型难以或不可能推断，则通过带注释的赋值来指定其类型——在变量名和数值之间使用冒号和类型（与具有默认值的函数参数的处理方式相同）：</p><pre><code class="hljs"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a: Foo = SomeUndecoratedFunction()<br></code></pre></td></tr></table></figure></code></pre><p><a id="type-comments"></a> <a href="#type-comments"><em>Type Comments</em></a> : 尽管你可能会看到它们仍然存在于代码库中（在 Python 3.6 之前是必要的），但请不要在行末添加更多的 <code># type: &lt;type name&gt;</code> 注释：</p><pre><code class="hljs"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a = SomeUndecoratedFunction()  <span class="hljs-comment"># type: Foo</span><br></code></pre></td></tr></table></figure></code></pre><h4 id="tuples-vs-lists">3.19.9 Tuples vs Lists</h4><p>类型列表只能包含单一类型的对象。类型元组可以具有单一重复的类型，或者具有一定数量的不同类型元素。后者通常用作函数的返回类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>b: <span class="hljs-built_in">tuple</span>[<span class="hljs-built_in">int</span>, ...] = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>c: <span class="hljs-built_in">tuple</span>[<span class="hljs-built_in">int</span>, <span class="hljs-built_in">str</span>, <span class="hljs-built_in">float</span>] = (<span class="hljs-number">1</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-number">3.5</span>)<br></code></pre></td></tr></table></figure><h4 id="type-variables">3.19.10 Type variables</h4><p>Python 的类型系统具有 <a href="https://peps.python.org/pep-0484/#generics">generics</a>类型变量，例如 <code>TypeVar</code> 和 <code>ParamSpec</code>，是使用它们的常见方式。</p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> <span class="hljs-type">Callable</span><br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> ParamSpec, TypeVar<br>_P = ParamSpec(<span class="hljs-string">&quot;_P&quot;</span>)<br>_T = TypeVar(<span class="hljs-string">&quot;_T&quot;</span>)<br>...<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">l: <span class="hljs-built_in">list</span>[_T]</span>) -&gt; _T:<br>  <span class="hljs-keyword">return</span> l.pop()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_when_called</span>(<span class="hljs-params">f: <span class="hljs-type">Callable</span>[_P, _T]</span>) -&gt; <span class="hljs-type">Callable</span>[_P, _T]:<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>(<span class="hljs-params">*args: _P.args, **kwargs: _P.kwargs</span>) -&gt; _T:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Function was called&quot;</span>)<br>    <span class="hljs-keyword">return</span> f(*args, **kwargs)<br>  <span class="hljs-keyword">return</span> inner<br></code></pre></td></tr></table></figure><p>一个 <code>TypeVar</code> 可以被约束：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">AddableType = TypeVar(<span class="hljs-string">&quot;AddableType&quot;</span>, <span class="hljs-built_in">int</span>, <span class="hljs-built_in">float</span>, <span class="hljs-built_in">str</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a: AddableType, b: AddableType</span>) -&gt; AddableType:<br>  <span class="hljs-keyword">return</span> a + b<br></code></pre></td></tr></table></figure><p><code>typing</code> 模块中一个常见的预定义类型变量是 <code>AnyStr</code>。在多个注解中使用它，这些注解可以是 <code>bytes</code> 或 <code>str</code>，并且必须都是相同的类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> AnyStr<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_length</span>(<span class="hljs-params">x: AnyStr</span>) -&gt; AnyStr:<br>  <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(x) &lt;= <span class="hljs-number">42</span>:<br>    <span class="hljs-keyword">return</span> x<br>  <span class="hljs-keyword">raise</span> ValueError()<br></code></pre></td></tr></table></figure><p>类型变量必须具有描述性名称，除非它满足以下所有标准：</p><ul><li>不对外可见</li><li>未受限制</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">Yes:<br>  _T = TypeVar(<span class="hljs-string">&quot;_T&quot;</span>)<br>  _P = ParamSpec(<span class="hljs-string">&quot;_P&quot;</span>)<br>  AddableType = TypeVar(<span class="hljs-string">&quot;AddableType&quot;</span>, <span class="hljs-built_in">int</span>, <span class="hljs-built_in">float</span>, <span class="hljs-built_in">str</span>)<br>  AnyFunction = TypeVar(<span class="hljs-string">&quot;AnyFunction&quot;</span>, bound=<span class="hljs-type">Callable</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">No:<br>  T = TypeVar(<span class="hljs-string">&quot;T&quot;</span>)<br>  P = ParamSpec(<span class="hljs-string">&quot;P&quot;</span>)<br>  _T = TypeVar(<span class="hljs-string">&quot;_T&quot;</span>, <span class="hljs-built_in">int</span>, <span class="hljs-built_in">float</span>, <span class="hljs-built_in">str</span>)<br>  _F = TypeVar(<span class="hljs-string">&quot;_F&quot;</span>, bound=<span class="hljs-type">Callable</span>)<br></code></pre></td></tr></table></figure><h4 id="string-types">3.19.11 String types</h4><blockquote><p>在新代码中请勿使用 <code>typing.Text</code>。它仅用于 Python 2/3 的兼容性。</p></blockquote><p>对于字符串/文本数据，请使用 <code>str</code>。对于处理二进制数据的代码，请使用 <code>bytes</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">deals_with_text_data</span>(<span class="hljs-params">x: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>  ...<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">deals_with_binary_data</span>(<span class="hljs-params">x: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>  ...<br></code></pre></td></tr></table></figure><p>如果一个函数的所有字符串类型始终相同，例如如果返回类型与上述代码中的参数类型相同，则使用 <a href="#typing-type-var">AnyStr</a>。</p><h4 id="imports-for-typing">3.19.12 Imports For Typing</h4><p>对于来自 <code>typing</code> 或 <code>collections.abc</code> 模块的符号（包括类型、函数和常量），用于支持静态分析和类型检查时，始终直接导入符号本身。这使得常见的注解更加简洁，并与全球范围内使用的类型注释实践相匹配。您被明确允许在一行中从 <code>typing</code> 和 <code>collections.abc</code> 模块导入多个特定符号。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Mapping, <span class="hljs-type">Sequence</span><br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Any</span>, <span class="hljs-type">Generic</span>, cast, TYPE_CHECKING<br></code></pre></td></tr></table></figure><p>鉴于这种导入方式会将项目添加到本地命名空间，因此<code>typing</code>或<code>collections.abc</code>中的名称应被视为类似于关键字，并且不应在您的Python代码中定义，无论是否有类型。如果类型与模块中现有名称发生冲突，请使用<code>import x as y</code>进行导入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Any</span> <span class="hljs-keyword">as</span> AnyType<br></code></pre></td></tr></table></figure><p>在可用的情况下，优先使用内置类型作为注解。Python 通过 <a href="https://peps.python.org/pep-0585/">PEP-585</a> 支持使用参数化容器类型的类型注解，该提案在 Python 3.9 中引入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_foo_scores</span>(<span class="hljs-params">foo: <span class="hljs-built_in">set</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-built_in">list</span>[<span class="hljs-built_in">float</span>]:<br>  ...<br></code></pre></td></tr></table></figure><h4 id="conditional-imports">3.19.13 Conditional Imports</h4><p>仅在特殊情况下使用条件导入，即在运行时必须避免进行类型检查所需的额外导入时。这个模式是不被鼓励的；应优先考虑重构代码以允许顶层导入等替代方案。</p><p>仅在类型注解中需要的导入可以放置在<code>if TYPE_CHECKING:</code>块内。</p><ul><li>条件导入的类型需要作为字符串进行引用，以便与 Python 3.6 向前兼容，因为在该版本中，注解表达式实际上会被评估</li><li>仅应在此处定义仅用于类型的实体；这包括别名。否则，将会出现运行时错误，因为该模块在运行时不会被导入</li><li>该代码块应紧接在所有正常导入之后</li><li>在输入的导入列表中不应有空行</li><li>将此列表按常规导入列表的方式进行排序 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> typing<br><span class="hljs-keyword">if</span> typing.TYPE_CHECKING:<br>  <span class="hljs-keyword">import</span> sketch<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x: <span class="hljs-string">&quot;sketch.Sketch&quot;</span></span>): ...<br></code></pre></td></tr></table></figure></li></ul><h4 id="circular-dependencies">3.19.14 Circular Dependencies</h4><p>由类型引起的循环依赖是代码异味。这类代码是重构的良好候选者。尽管从技术上讲，保持循环依赖是可能的，但各种构建系统将不允许这样做，因为每个模块必须依赖于另一个模块。</p><p>将创建循环依赖导入的模块替换为<code>Any</code>。设置一个具有意义的名称的<a href="#typing-aliases">别名</a>，并使用该模块的真实类型名称（<code>Any</code>的任何属性都是<code>Any</code>）。别名定义应与最后一个导入之间隔开一行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Any</span><br><br>some_mod = <span class="hljs-type">Any</span>  <span class="hljs-comment"># some_mod.py imports this module.</span><br>...<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_method</span>(<span class="hljs-params">self, var: <span class="hljs-string">&quot;some_mod.SomeType&quot;</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>  ...<br></code></pre></td></tr></table></figure><h4 id="generics">3.19.15 Generics</h4><p>在注释时，建议为泛型类型指定类型参数；否则，<a href="https://peps.python.org/pep-0484/#the-any-type">泛型的参数将被假定为 <code>Any</code></a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Yes:</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_names</span>(<span class="hljs-params">employee_ids: <span class="hljs-type">Sequence</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; Mapping[<span class="hljs-built_in">int</span>, <span class="hljs-built_in">str</span>]:<br>  ...<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># No:</span><br><span class="hljs-comment"># This is interpreted as get_names(employee_ids: Sequence[Any]) -&gt; Mapping[Any, Any]</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_names</span>(<span class="hljs-params">employee_ids: <span class="hljs-type">Sequence</span></span>) -&gt; Mapping:<br>  ...<br></code></pre></td></tr></table></figure><p>如果一个泛型的最佳类型参数是 <code>Any</code>，请明确指出，但请记住，在许多情况下 <a href="#typing-type-var"><code>TypeVar</code></a> 可能更为合适：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># No:</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_names</span>(<span class="hljs-params">employee_ids: <span class="hljs-type">Sequence</span>[<span class="hljs-type">Any</span>]</span>) -&gt; Mapping[<span class="hljs-type">Any</span>, <span class="hljs-built_in">str</span>]:<br>  <span class="hljs-string">&quot;&quot;&quot;Returns a mapping from employee ID to employee name for given IDs.&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Yes:</span><br>_T = TypeVar(<span class="hljs-string">&#x27;_T&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_names</span>(<span class="hljs-params">employee_ids: <span class="hljs-type">Sequence</span>[_T]</span>) -&gt; Mapping[_T, <span class="hljs-built_in">str</span>]:<br>  <span class="hljs-string">&quot;&quot;&quot;Returns a mapping from employee ID to employee name for given IDs.&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="parting-words">4 Parting Words</h2><p><em>保持一致性</em>。</p><p>如果你正在编辑代码，花几分钟时间查看你周围的代码并确定其风格。如果他们在索引变量名中使用 <code>_idx</code> 后缀，你也应该这样做。如果他们的注释周围有小方框的哈希标记，你的注释也应该有小方框的哈希标记。</p><p>制定风格指南的目的是为了拥有一个共同的编码词汇，使人们能够专注于你所表达的内容，而不是你表达的方式。我们在这里提出全球风格规则，以便人们了解这一词汇，但地方风格同样重要。如果你添加到文件中的代码与周围现有代码的风格差异过大，当读者去阅读时，会打乱他们的阅读节奏。</p><p>然而，一致性是有其局限性的。它在局部的应用更为显著，并且对于全球风格未指定的选择也更为适用。一般来说，不应将一致性作为以旧风格进行操作的理由，而不考虑新风格的优势，或代码库随着时间的推移趋向于更新风格的倾向。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>计算机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法设计与分析作业</title>
    <link href="/2024/01/13/2024-01-13-algorithm/"/>
    <url>/2024/01/13/2024-01-13-algorithm/</url>
    
    <content type="html"><![CDATA[<h1 id="一分治">一、分治</h1><div class="note note-info">            <p><strong>主定理</strong></p><p><span class="math display">\[T(n)=aT\left(\dfrac nb\right) + f(n^d)=\begin{cases}O(n^{\log_ba}) &amp; d&lt;\log_ba\\O(n^{\log_ba}\log n) &amp;d=\log_ba\\O(n^d)&amp;d&gt;\log_ba\end{cases}\]</span></p><p>其中：</p><ul><li>a：子问题的数量</li><li>b：子问题规模与原问题的比</li><li><span class="math inline">\(f(n^d)\)</span>：合并子问题以及除了递归调用之外的算法的时间复杂度</li></ul>          </div><h2 id="q1">Q1</h2><h3 id="题目">题目</h3><p>You are interested in analyzing some hard-to-obtain data from two separate databases. Each database contains n numerical values, so there are 2n values total and you may assume that no two values are the same. You’d like to determine the median of this set of 2n values, which we will define here to be the nth smallest value. However, the only way you can access these values is through queries to the databases. In a single query, you can specify a value k to one of the two databases, and the chosen database will return the kth smallest value that it contains. Since queries are expensive, you would like to compute the median using as few queries as possible. Give an algorithm that finds the median value using at most <span class="math inline">\(O(\log n)\)</span> queries.</p><h3 id="思路">思路</h3><ol type="1"><li>首先对两个数据库各取中位数<span class="math inline">\(\frac{n}{2}\)</span></li><li>比较两中位数的大小，假设其中较小的一个为M1，较大的为M2</li><li>全局中位数必然位于相应数据库中大于M1或小于M2的部分中</li><li>取这两部分作为新的数据库，再次重复上述操作</li><li>直到数据库长度为1时停止，由于本题令中位数为全局的第N个，因此这里取两个中较小的一个即为答案</li></ol><h3 id="伪代码">伪代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">FINDMID</span>(<span class="hljs-params"><span class="hljs-built_in">len</span>, k1, k2</span>):<br>M1 = ask(<span class="hljs-number">1</span>, k1)<br>M2 = ask(<span class="hljs-number">2</span>, k2)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span> == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(M1, M2)<br>    <span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">if</span> M1&lt;M2:<br>            FINDMID(<span class="hljs-built_in">len</span>/<span class="hljs-number">2</span>, k1 + k1/<span class="hljs-number">2</span>, k2 - k2/<span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">else</span>:<br>            FINDMID(<span class="hljs-built_in">len</span>/<span class="hljs-number">2</span>, k1 - k1/<span class="hljs-number">2</span>, k2 + k2/<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h3 id="时间复杂度">时间复杂度</h3><p>由于需要查询直到数据库长度为1，表现为树就是需要一直遍历到树底，则迭代次数为<span class="math inline">\(\log(n)\)</span>，每次需要进行两次查询操作，时间复杂度均为1，故总时间复杂度为 <span class="math display">\[T(n) = T(\frac{n}{2}) + c = O(\log n)\]</span></p><h2 id="q2">Q2</h2><h3 id="题目-1">题目</h3><p>Given any 10 points, <span class="math inline">\(p_1, p_2, \dots, p_{10}\)</span>, on a two-dimensional Euclidean plane, please write an algorithm to find the distance between the closest pair of points.</p><ol type="1"><li>Using a brute-force algorithm to solve this problem, analyze the time complexity of your implemented brute-force algorithm and explain why the algorithm’s time complexity is <span class="math inline">\(O(n^2)\)</span>, where n is the number of points.</li><li>Propose an improved algorithm to solve this problem with a time complexity better than the brute-force algorithm. Describe the algorithm’s idea and analyze its time complexity.</li></ol><h3 id="暴力解">1、暴力解</h3><h4 id="思路-1">思路</h4><ol type="1"><li>遍历每一个点，计算它与其他点的距离</li><li>遍历过程中保存当前MAX值，并不断更新</li><li>返回结果</li></ol><h4 id="伪代码-1">伪代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">SOLVE</span>():<br>    max_value = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> <span class="hljs-number">10</span>:<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> <span class="hljs-number">10</span>:<br>            max_value = <span class="hljs-built_in">max</span>(max_value, GET_DISTANCE(p[i], p[j]))<br>    <span class="hljs-keyword">return</span> max_value<br></code></pre></td></tr></table></figure><h3 id="分治优化">2、分治优化</h3><h4 id="思路-2">思路</h4><ol type="1"><li>首先将所有点按照X轴坐标排序</li><li>对于排序好的点，平分成两个子集<ul><li>若该子集中只有不超过三个点，则使用暴力法算出最近距离</li><li>否则继续分成两个子集</li></ul></li><li>经过上述操作分别得到左右点集中的最短点对距离，并取其中的最小值记为w</li><li>对于点集分界线两侧w宽度区域内的点，按照y轴进行排序</li><li>遍历排序后的点，分别计算它与其他点的距离，并与w比较，取最小值</li><li>返回w</li></ol><h4 id="伪代码-2">伪代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">SORT_BY_X(P)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">FIND</span>(<span class="hljs-params">P, l, r</span>):<br>    <span class="hljs-keyword">if</span> P[l:r].size &lt;= <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">return</span> GET_MIN(P)<br>    <span class="hljs-keyword">else</span>:<br>        w1 = FIND(P, l, (l+r)/<span class="hljs-number">2</span>)<br>        w2 = FIND(P, (l+r)/<span class="hljs-number">2</span>, r)<br>        <br>        w = <span class="hljs-built_in">min</span>(w1, w2)<br>        <br>        P_new = P[(l+r)/<span class="hljs-number">2</span>-w:(l+r)/<span class="hljs-number">2</span>+w]<br>        SORT_BY_Y(P_new)<br>        <br>        <span class="hljs-keyword">for</span> point <span class="hljs-keyword">in</span> P_new:<br>            h = GET_DIS(point, P_new)<br>            w = <span class="hljs-built_in">min</span>(w, h)<br>        <br>        <span class="hljs-keyword">return</span> w<br></code></pre></td></tr></table></figure><h4 id="时间复杂度-1">时间复杂度：</h4><p>最开始需要进行一次全体排序，时间复杂度为<span class="math inline">\(O(n\log{n})\)</span>，之后FIND部分，包含两个递归调用和一次排序、一次遍历： <span class="math display">\[T(n)= 2T(\frac{n}{2}) + O(n\log{n}) + O(n) = O(n\log^2{n})\]</span></p><h2 id="q3">Q3</h2><h3 id="题目-2">题目</h3><p>Given an integer <span class="math inline">\(n\)</span>, where <span class="math inline">\(100 &lt; n &lt; 10000\)</span>, please design an efficient algorithm to calculate <span class="math inline">\(3^n\)</span>, with a time complexity not exceeding <span class="math inline">\(O(n)\)</span>.</p><ol type="1"><li>Implement a naive calculation method to compute <span class="math inline">\(3^n\)</span> and analyze the time complexity of the naive calculation method.</li><li>Propose an improved algorithm to calculate 3n with a time complexity not exceeding <span class="math inline">\(O(n)\)</span>. Describe the algorithm’s concept and analyze its time complexity</li></ol><h3 id="暴力解-1">1、暴力解</h3><h4 id="思路-3">思路</h4><p>对于输入的n，直接进行一个N次循环，每次*3</p><h4 id="伪代码-3">伪代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">CAL</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> n:<br>        <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span> * <span class="hljs-number">3</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span><br></code></pre></td></tr></table></figure><h4 id="时间复杂度-2">时间复杂度</h4><p>由于仅有一个循环，且循环内仅有一次操作，故总的时间复杂度为<span class="math inline">\(O(n)\)</span></p><h3 id="优化">2、优化</h3><h4 id="思路-4">思路</h4><ul><li>若n为0，直接返回1</li><li>若n为偶数，则<span class="math inline">\(3^n=(3^{\frac{n}{2}})^2\)</span></li><li>若n为奇数，则<span class="math inline">\(3^n=3^{n-1}\times3\)</span></li></ul><h4 id="伪代码-4">伪代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">CAL</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <br>    <span class="hljs-keyword">if</span> n%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> CAL(n/<span class="hljs-number">2</span>)**<span class="hljs-number">2</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> CAL(n-<span class="hljs-number">1</span>)*<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h4 id="时间复杂度-3">时间复杂度</h4><p>每次递归需要的运算为平方、乘法，时间复杂度均为<span class="math inline">\(O(1)\)</span>，递归次数为 <span class="math inline">\(\log n\)</span>，因此时间复杂度为 <span class="math display">\[T(n) = \begin{cases}1 &amp; n = 0\\T(\frac{n}{2}) + c = O() &amp; n\neq 0\end{cases}\]</span></p><h2 id="q4">Q4</h2><h3 id="题目-3">题目</h3><p>Given a binary tree T, please give an <span class="math inline">\(O(n)\)</span> algorithm to invert binary tree. For example below, inverting the left binary tree, we get the right binary tree.</p><h3 id="思路-5">思路</h3><ul><li>对于每一个节点的左右孩子，分两种情况：<ul><li>是叶子节点，下一步</li><li>不是叶子节点，递归调用</li></ul></li><li>两个子节点处理结束之后，对换左右孩子</li></ul><h3 id="伪代码-5">伪代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">INVERT</span>(<span class="hljs-params">Node N</span>):<br>    <span class="hljs-keyword">if</span> N.L是叶子节点 &amp;&amp; N.R是叶子节点:<br>        swap(N.L, N.R)<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> N.L是叶子节点:<br>            INVERT(N.L)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> N.R是叶子节点:<br>            INVERT(N.R)<br><br>        swap(N.L, N.R)<br></code></pre></td></tr></table></figure><h3 id="时间复杂度-4">时间复杂度</h3><p>每一次递归中进行的运算为交换左右孩子，时间夫复杂度为<span class="math inline">\(O(1)\)</span>，递归调用的次数等于节点数，因此时间复杂度为<span class="math inline">\(O(n)\)</span></p><h2 id="q5">Q5</h2><h3 id="题目-4">题目</h3><p>There are <span class="math inline">\(N\)</span> rooms in a prison, one for each prisoner, and there are <span class="math inline">\(M\)</span> religions, and each prisoner will follow one of them. If the prisoners in the adjacent room are of the same religion, escape may occur. Please give an <span class="math inline">\(O(n)\)</span> algorithm to find out how many states escape can occur. For example, there are 3 rooms and 2 kinds of religions, then 6 different states escape will occur.</p><h3 id="思路-6">思路</h3><p>由于直接计算会越狱的情况比较复杂，转而求出总的情况和不会越狱的情况，相减得到会越狱的数量。</p><p>对于不会越狱，实际上就是要求相邻两个牢房的宗教信仰不一样即可，设第一间房间有m种可能，则他的相邻房间不会越狱的可选情况有m-1种，再相邻的依旧。因此实际上是求 <span class="math display">\[m^n - m(m-1)^{n-1}\]</span> 而求幂函数在Q3中已经有优化方法，这里直接使用</p><h3 id="伪代码-6">伪代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">SQUARING</span>(<span class="hljs-params">m, n</span>):<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <br>    <span class="hljs-keyword">if</span> n%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> SQUARING(n/<span class="hljs-number">2</span>)**<span class="hljs-number">2</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> SQUARING(n-<span class="hljs-number">1</span>)*m<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">CAL</span>(<span class="hljs-params">M, N</span>):<br>    <span class="hljs-built_in">sum</span> = SQUARING(M, N)<br>    success = SQUARING(M-<span class="hljs-number">1</span>, N-<span class="hljs-number">1</span>) * M<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span> - success<br>    <br></code></pre></td></tr></table></figure><h3 id="时间复杂度-5">时间复杂度</h3><p>核心操作为两次幂运算，每次的时间复杂度均为<span class="math inline">\(\log{n}\)</span>，故总的时间复杂度仍然为<span class="math inline">\(\log{n}\)</span></p><p><span class="math display">\[T(n) = 2T(\frac{n}{2}) + O(1) = O(\log{n})\]</span></p><h1 id="二动态规划">二、动态规划</h1><h2 id="q1-money-robbing">Q1 Money Robbing</h2><h3 id="题目-5">题目</h3><p>A robber is planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.</p><ol type="1"><li>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.</li><li>What if all houses are arranged in a circle?</li></ol><h3 id="普通解">1、普通解</h3><h4 id="思路-7">思路</h4><ul><li><strong>状态</strong>：每一个房子有两种状态，抢劫或不抢，i表示第i个房子</li><li><strong>状态转移方程</strong>：</li></ul><p><span class="math display">\[dp[i] = \max\begin{cases}money_i+dp[i-2]\\dp[i-1]\end{cases}\]</span></p><ul><li><strong>初始状态</strong>：<ul><li>dp[0]=0</li><li>dp[1]=1</li></ul></li><li><strong>计算顺序</strong>：采用自底向上的方式，一直计算到dp[n]，其值即为所求最大值</li></ul><h4 id="伪代码-7">伪代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">function robHouses(money):<br>    n = length(money)<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> money[<span class="hljs-number">1</span>]<br><br>    dp = new Array(n+<span class="hljs-number">1</span>)<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>    dp[<span class="hljs-number">1</span>] = money[<span class="hljs-number">1</span>]<br><br>    <span class="hljs-keyword">for</span> i = <span class="hljs-number">2</span> to n:<br>        dp[i] = <span class="hljs-built_in">max</span>(dp[i-<span class="hljs-number">1</span>], dp[i-<span class="hljs-number">2</span>] + money[i])<br><br>    <span class="hljs-keyword">return</span> dp[n]<br></code></pre></td></tr></table></figure><h4 id="时间复杂度-6">时间复杂度</h4><p>子问题的个数为n，每一个问题的求解时间为1，因此此算法的时间复杂度为O(n)</p><h3 id="环形街道">2、环形街道</h3><h4 id="分析">分析</h4><p>相比较于原题，当街道是环形时，将整个问题分为两个小的子问题：不抢第一个房子和不抢最后一个房子，在这两个情况下分别DP求出最优解，取其中较大的一个作为答案即可。</p><h4 id="伪代码-8">伪代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">function robHouses(money): <br>    n = length(money) <br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>: <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> <br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span>: <br>        <span class="hljs-keyword">return</span> money[<span class="hljs-number">0</span>]<br><br>    // 不抢劫第一座房子的情况<br>    dp1[<span class="hljs-number">1</span>] = money[<span class="hljs-number">0</span>]<br><br>    // 不抢劫最后一座房子的情况<br>    dp2[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>    dp2[<span class="hljs-number">1</span>] = money[<span class="hljs-number">1</span>]<br><br>    <span class="hljs-keyword">for</span> i = <span class="hljs-number">1</span> to n-<span class="hljs-number">1</span>:<br>        dp1[i] = <span class="hljs-built_in">max</span>(dp1[i-<span class="hljs-number">1</span>], dp1[i-<span class="hljs-number">2</span>] + money[i])<br><br>    <span class="hljs-keyword">for</span> i = <span class="hljs-number">2</span> to n:<br>        dp2[i] = <span class="hljs-built_in">max</span>(dp2[i-<span class="hljs-number">1</span>], dp2[i-<span class="hljs-number">2</span>] + money[i])<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(dp1[n-<span class="hljs-number">1</span>], dp2[n])<br></code></pre></td></tr></table></figure><h4 id="时间复杂度-7">时间复杂度</h4><p>虽然拆分成了两个子问题，但是时间复杂度仍然为O(n)</p><h2 id="q2-ugly-number">Q2 Ugly Number</h2><h3 id="题目-6">题目</h3><h3 id="暴力解-2">1、暴力解</h3><h4 id="思路-8">思路</h4><p>直接从1开始遍历所有自然数，并判断每一个数是否为丑数。具体方法为一直除2、3、5，并看最后余数是否为1</p><p>An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5. Given an integer <span class="math inline">\(n\)</span>, return the <span class="math inline">\(n^{th}\)</span> ugly number.</p><ol type="1"><li>Using a brute-force algorithm to solve this problem, analyze the time complexity of your implemented brute-force algorithm and explain why the algorithm’s time complexity is <span class="math inline">\(O(n^2)\)</span>, where <span class="math inline">\(n\)</span> is the number of points.</li><li>Propose an improved algorithm to solve this problem with a time complexity better than the brute-force algorithm. Describe the algorithm’s idea and analyze its time complexity.</li></ol><h4 id="伪代码-9">伪代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">function is_ugly(num):<br>    <span class="hljs-keyword">while</span> num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        num /= <span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> num % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>:<br>        num /= <span class="hljs-number">3</span><br>    <span class="hljs-keyword">while</span> num % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>:<br>        num /= <span class="hljs-number">5</span><br>    <span class="hljs-keyword">return</span> num == <span class="hljs-number">1</span><br><br>function nth_ugly_number(n):<br>    count = <span class="hljs-number">0</span><br>    num = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> count &lt; n:<br>        <span class="hljs-keyword">if</span> is_ugly(num):<br>            count += <span class="hljs-number">1</span><br>        num += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> num - <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="动态规划">2、动态规划</h3><h4 id="思路-9">思路</h4><ul><li><strong>状态</strong>：对于每一个数，它必然是由<span class="math inline">\(2^{p_2}\times 3^{p_3} \times 5^{p_5}\)</span>所组成的，即在之前的某个丑数的基础上乘以2、3或5得到</li><li><strong>状态转移方程</strong></li></ul><p><span class="math display">\[dp[i] = \min\begin{cases}dp[p2] * 2\\dp[p3] * 3\\dp[p5] * 5\end{cases}\]</span></p><ul><li><strong>初始状态</strong>：初始时p2=p3=p5=1，dp[0] = 1</li><li><strong>计算顺序</strong>：从1开始，逐个递推，每次将选中的<span class="math inline">\(p_i\)</span>更新为它要指向的下一个要乘以i的丑数，dp[n]即为第n个丑数</li></ul><h4 id="伪代码-10">伪代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">function nth_ugly_number(n):<br>    dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br>    p2, p3, p5 = <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">for</span> i = <span class="hljs-number">2</span> to n：<br>        next_ugly = <span class="hljs-built_in">min</span>(dp[p2] * <span class="hljs-number">2</span>, dp[p3] * <span class="hljs-number">3</span>, dp[p5] * <span class="hljs-number">5</span>)<br>        dp[i] = next_ugly<br><br>        <span class="hljs-keyword">if</span> next_ugly == dp[p2] * <span class="hljs-number">2</span>：<br>            p2++<br>        <span class="hljs-keyword">elif</span> next_ugly == dp[p3] * <span class="hljs-number">3</span>：<br>            p3++<br>        <span class="hljs-keyword">elif</span> next_ugly == dp[p5] * <span class="hljs-number">5</span>：<br>            p5++<br><br>    <span class="hljs-keyword">return</span> dp[n]<br></code></pre></td></tr></table></figure><h4 id="时间复杂度-8">时间复杂度</h4><p>子问题的个数为N-1，每次运算的复杂度为常数级，不存在递归调用，因此总的时间复杂度为O(n)</p><h2 id="q3-unique-binary-search-trees">Q3 Unique Binary Search Trees</h2><h3 id="题目-7">题目</h3><p>Given <span class="math inline">\(n\)</span>, how many structurally unique BST’s (binary search trees) that store values 1...n?</p><p>Note: Given <span class="math inline">\(n = 3\)</span>, there are a total of 5 unique BST’s</p><h3 id="思路-10">思路</h3><ul><li><p><strong>状态</strong>：用dp[i]表示取i为二叉树的根，则可以将全部的数字分为[1:i-1]和[i+1:n]两部分，分别属于左右子树</p></li><li><p><strong>状态转移方程</strong>：每一个根确定的情况下，通过累加求得右子树乘以左子树的值</p></li></ul><p><span class="math display">\[dp[i] = \sum_{j=1}^i\left(dp[j-1]\times dp[i-j]\right)\]</span></p><ul><li><strong>初始状态</strong>：显然，dp[0]=dp[1]=1</li><li><strong>计算顺序</strong>：从2开始循环遍历直到n，dp[n]的值即为所求结果</li></ul><h3 id="伪代码-11">伪代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">function numTrees(n):<br>    dp[<span class="hljs-number">0</span>] = dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">for</span> i = <span class="hljs-number">2</span> to n:<br>        dp[i] = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> j = <span class="hljs-number">1</span> to i:<br>            dp[i] += dp[j-<span class="hljs-number">1</span>] * dp[i-j]<br><br>    <span class="hljs-keyword">return</span> dp[n]<br></code></pre></td></tr></table></figure><h3 id="时间复杂度-9">时间复杂度</h3><p>本题外层循环n-1次，对于每个内层，循环的次数为<span class="math inline">\(\sum i\)</span>，因此，总的时间复杂度为<span class="math inline">\(O(n^2)\)</span></p><h2 id="q4-largest-divisible-subset">Q4 Largest Divisible Subset</h2><h3 id="题目-8">题目</h3><p>Given a set of distinct positive integers, find the largest subset such that every pair <span class="math inline">\((S_i, S_j)\)</span> of elements in this subset satisfies: <span class="math inline">\(S_i\%S_j = 0\)</span> or <span class="math inline">\(S_j\%S_i = 0\)</span>. Please return the largest size of the subset.</p><p>Note: <span class="math inline">\(S_i\%S_j = 0\)</span> means that <span class="math inline">\(S_i\)</span> is divisible by <span class="math inline">\(S_j\)</span>.</p><h3 id="思路-11">思路</h3><ul><li><strong>状态</strong>：首先假设所给集合为升序排列，用dp[i]表示以第i个数结尾的最大子集大小</li><li><strong>转移方程</strong>：对于每一个数字num[i]，若它可以被某个小于它的数num[j]整除，则它也一定可以被能够整除num[j]的所有数整除，即有</li></ul><p><span class="math display">\[dp[i] = \max\begin{cases}dp[i]\\dp[j] + 1\end{cases}\]</span></p><ul><li><strong>初始状态</strong>：初始化所有dp[i]=1，因为显然数字自己成为一个子集</li></ul><h3 id="伪代码-12">伪代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">function largestSubset(nums):<br>maxSize = <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">from</span> <span class="hljs-number">1</span> to n-<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">from</span> <span class="hljs-number">0</span> to i:<br>            <span class="hljs-keyword">if</span> nums[j] % nums[i] == <span class="hljs-number">0</span>:<br>                dp[i] = <span class="hljs-built_in">max</span>(dp[i], dp[j] + <span class="hljs-number">1</span>)<br><br>        maxSize = <span class="hljs-built_in">max</span>(dp[i], maxSize)<br><br>    <span class="hljs-keyword">return</span> maxSize<br></code></pre></td></tr></table></figure><h3 id="时间复杂度-10">时间复杂度</h3><p>本题中，外层循环的次数为n-1，内层次数为<span class="math inline">\(\sum i\)</span>，因此总的时间复杂度为<span class="math inline">\(O(n^2)\)</span></p><h2 id="q5-target-sum">Q5 Target Sum</h2><h3 id="题目-9">题目</h3><p>You are given an integer array nums and an integer target. You want to build an expression out of nums by adding one of the symbols ’+’ and ’-’ before each integer in nums and then concatenate all the integers.</p><p>For example, if nums = [2, 1], you can add a ’+’ before 2 and a ’-’ before 1 and concatenate them to build the expression ”+2-1”.</p><p>Return the number of different expressions that you can build, which evaluates to target.</p><p>Example:</p><ul><li><strong>Input</strong>: nums = [1,1,1,1,1], target = 3</li><li><strong>Output</strong>: 5</li><li><strong>Explanation</strong>: There are 5 ways to assign symbols to make the sum of nums be target 3.</li></ul><p><span class="math display">\[-1 + 1 + 1 +1+1=3\\ +1- 1 + 1 +1+1=3\\ +1 + 1- 1 +1+1=3\\ +1 + 1 +1-1+1=3\\ +1 + 1 +1+1-1=3\]</span></p><h3 id="思路-12">思路</h3><p>对于每一个数字而言，只有+和-两种选择，那么假设所有加的数为一个集合S1，则剩下的数必然属于减去的集合S2。显然，有 <span class="math display">\[\begin{align}target &amp;= \sum S1_{i} - \sum S2_i\\&amp;= \sum S_i - 2\sum S2_i\end{align}\]</span> 即： <span class="math display">\[\sum S2_i = \frac{\sum S - target}{2}\]</span> 则所求问题变为：从全集S中挑选n个数，组成一个集合S2，使得S2的求和等于S的总和减去target</p><ul><li><strong>状态</strong>：取<span class="math inline">\(dp[i][j]\)</span>表示对于前i个数，和为j的方案数</li><li><strong>转移方程</strong>：令S2的求和等于S的总和减去target的值为diff，则对于小于diff的每一个j，计算<span class="math inline">\(dp[i][j]\)</span>。显然，要想取这个数，j必然大于等于<span class="math inline">\(num[i]\)</span>，因此有</li></ul><p><span class="math display">\[dp[i]=\begin{cases}dp [i-1][j] &amp; j &lt; nums[i]\\dp[i-1][j] + dp[i-1][j-nums[i]] &amp; j\geq nums[i]\end{cases}\]</span></p><ul><li><strong>初始状态</strong>：当S为空集时，和为0，方案数为1（即什么都不选），因此<span class="math inline">\(dp[0][0]=1\)</span></li></ul><h3 id="伪代码-13">伪代码</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stylus">function <span class="hljs-built_in">findTargetSumWays</span>(nums<span class="hljs-selector-attr">[]</span>, target): <br>sum = <span class="hljs-number">0</span> <br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums: <br>sum += num <br>    diff = (sum - target)/<span class="hljs-number">2</span> <br>    <br>    dp<span class="hljs-selector-attr">[0]</span><span class="hljs-selector-attr">[0]</span> = <span class="hljs-number">1</span> <br>    <br>    <span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> = <span class="hljs-number">1</span> to n: <br>    num = nums<span class="hljs-selector-attr">[i - 1]</span> <br>    <span class="hljs-keyword">for</span> j = <span class="hljs-number">0</span> to diff: <br>    dp<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-attr">[j]</span> = dp<span class="hljs-selector-attr">[i - 1]</span><span class="hljs-selector-attr">[j]</span> <br>    <span class="hljs-keyword">if</span> j &gt;= num: <br>    dp<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-attr">[j]</span> += dp<span class="hljs-selector-attr">[i - 1]</span><span class="hljs-selector-attr">[j - num]</span> <br>    return dp<span class="hljs-selector-attr">[n]</span><span class="hljs-selector-attr">[diff]</span><br></code></pre></td></tr></table></figure><h3 id="时间复杂度-11">时间复杂度</h3><p>最开始求和，需要O(n)的时间，主体部分，外层循环n次，内层循环diff次，因此总的时间复杂度为<span class="math inline">\(O(n \times diff)\)</span></p><h1 id="三贪心">三、贪心</h1><h2 id="q1-commando-war">Q1 Commando War</h2><h3 id="题目-10">题目</h3><p>There is a war and it doesn’t look very promising for your country. Now it’s time to act. You have a commando squad at your disposal and planning an ambush on an important enemy camp located nearby. You have N soldiers in your squad. In your master-plan, every single soldier has a unique responsibility and you don’t want any of your soldier to know the plan for other soldiers so that everyone can focus on his task only. In order to enforce this, you brief every individual soldier about his tasks separately and just before sending him to the battlefield. You know that every single soldier needs a certain amount of time to execute his job. You also know very clearly how much time you need to brief every single soldier. Being anxious to finish the total operation as soon as possible, you need to find an order of briefing your soldiers that will minimize the time necessary for all the soldiers to complete their tasks. You may assume that, no soldier has a plan that depends on the tasks of his fellows. In other words, once a soldier begins a task, he can finish it without the necessity of pausing in between.</p><p><strong>Input</strong>: There will be multiple test cases in the input file. Every test case starts with an integer N<span class="math inline">\((1 \leq N \leq 1000)\)</span>, denoting the number of soldiers. Each of the following N lines describe a soldier with two integers B(1 &lt;= B &lt;= 10000)&amp;J(1 &lt;= J &lt;= 10000). B seconds are needed to brief the soldier while completing his job needs J seconds. The end of input will be denoted by a case with N = 0 . This case should not be processed.</p><p><strong>Output</strong>: For each test case, print a line in the format, “Case X: Y”, where X is the case number &amp;Y is the total number of seconds counted from the start of your first briefing till the completion of all jobs.</p><h3 id="思路-13">思路</h3><p><strong>贪心规则</strong>：优先选择所需时间最长的工作</p><ul><li>所需时间相同时，先选择安排工作时间长的</li></ul><h2 id="伪代码-14">伪代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">function briefingTime(soldiers)<br>    sort soldiers by B <span class="hljs-keyword">in</span> ascending order<br><br>    totalBriefingTime = <span class="hljs-number">0</span><br>    totalTime = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">for</span> i = <span class="hljs-number">1</span> to N<br>        totalTime += soldiers[i].B<br>        totalBriefingTime = <span class="hljs-built_in">max</span>(totalTime + soldiers[i].J, totalBriefingTime)<br><br>    <span class="hljs-keyword">return</span> totalBriefingTime<br></code></pre></td></tr></table></figure><h2 id="时间复杂度-12">时间复杂度</h2><p>首先需要进行一个排序，所需时间复杂度为<span class="math inline">\(O(n\log n)\)</span>，接下来进行了一层遍历，每次遍历中进行的运算为常数级，故总的时间复杂度为<span class="math inline">\(O(n\log n)\)</span></p><h2 id="q2-dna-consensus-string">Q2 DNA Consensus String</h2><h3 id="题目-11">题目</h3><p>The Hamming distance is the number of different characters at each position from two strings of equal length. For example, assume we are given the two strings “AGCAT” and “GGAAT.” The Hamming distance of these two strings is 2 because the 1st and the 3rd characters of the two strings are different. Using the Hamming distance, we can define a representative string for a set of multiple strings of equal length. Given a set of strings <span class="math inline">\(S = \{s_1,\dots,s_m\}\)</span> of length n, the consensus error between a string y of length n and the set S is the sum of the Hamming distances between y and each si in S. If the consensus error between y and S is the minimum among all possible strings y of length n, y is called a consensus string of S. For example, given the three strings “AGCAT” “AGACT” and “GGAAT” the consensus string of the given strings is “AGAAT” because the sum of the Hamming distances between “AGAAT” and the three strings is 3 which is minimal. (In this case, the consensus string is unique, but in general, there can be more than one consensus string.) We use the consensus string as a representative of the DNA sequence. For the example of Figure 1 above, a consensus string of gene X is “GCAAATGGCTGTGCA” and the consensus error is 7. <span class="math display">\[\begin{array}{l|l} &amp; \text { DNA sequence of gene X } \\\hline \text { Cat: } &amp; \text { GCATATGGCTGTGCA } \\\text { Dog: } &amp; \text { GCAAATGGCTGTGCA } \\\text { Horse: } &amp; \text { GCTAATGGGTGTCCA } \\\text { Cow: } &amp; \text { GCAAATGGCTGTGCA } \\\text { Monkey: } &amp; \text { GCAAATCGGTGAGCA }\end{array}\]</span> <strong>Input</strong>: Your program is to read from standard input. The input consists of T test cases. The number of test cases T is given in the first line of the input. Each test case starts with a line containing two integers m and n which are separated by a single space. The integer <span class="math inline">\(m(4 \leq m \leq 50)\)</span> represents the number of DNA sequences and <span class="math inline">\(n(4 \leq n \leq 1000)\)</span> represents the length of the DNA sequences, respectively. In each of the next m lines, each DNA sequence is given.</p><p><strong>Output</strong>: Your program is to write to standard output. Print the consensus string in the first line of each case and the consensus error in the second line of each case. If there exists more than one consensus string, print the lexicographically smallest consensus string.</p><h3 id="思路-14">思路</h3><p><strong>贪心规则</strong>：对于每一位上的字母，统计输入的各个字符串，得到每一位上出现频次最高的字母，若有相同则按照字典序取较低的（对于本题即A-C-G-T）</p><h3 id="伪代码-15">伪代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">function consensus(sequences):<br>    result = <span class="hljs-string">&quot;&quot;</span><br>    <br>    <span class="hljs-keyword">for</span> i = <span class="hljs-number">1</span> to <span class="hljs-built_in">len</span>(sequences[<span class="hljs-number">0</span>]):<br>        charMap = createEmptyMap()<br>        <br>        <span class="hljs-keyword">for</span> sequence <span class="hljs-keyword">in</span> sequences:<br>            charMap.put(sequence[i], charMap.get(sequence[i]))<br>            <br>        sort charMap by value <span class="hljs-keyword">in</span> ascending order<br>        result += charMap.get(<span class="hljs-number">0</span>).key<br>        <br>    <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><h3 id="时间复杂度-13">时间复杂度</h3><p>外层循环有n次，即每个序列的长度；内层循环有m次，即序列的数量。每一次外层循环中包含m次map读写以及一次排序，即<span class="math inline">\(m + O(4 \log 4)\)</span>，由于实际上只有4中碱基，因此排序的元素永远只有四个，这一步可以认为是常数级别。故总时间复杂度为<span class="math inline">\(O(nm)\)</span></p><h2 id="q3-opponents">Q3 Opponents</h2><h3 id="题目-12">题目</h3><p>Arya has n opponents in the school. Each day he will fight with all opponents who are present this day. His opponents have some fighting plan that guarantees they will win, but implementing this plan requires presence of them all. That means if one day at least one of Arya’s opponents is absent at the school, then Arya will beat all present opponents. Otherwise, if all opponents are present, then they will beat Arya.</p><p>For each opponent Arya knows his schedule — whether or not he is going to present on each particular day. Tell him the maximum number of consecutive days that he will beat all present opponents.</p><p>Note that if some day there are no opponents present, Arya still considers he beats all the present opponents.</p><p><strong>Input</strong>: The first line of the input contains two integers <span class="math inline">\(n\)</span> and <span class="math inline">\(d ( 1\leq n,d \leq 100 )\)</span> — the number of opponents and the number of days, respectively. The i-th of the following d lines contains a string of length n consisting of characters ’0’ and ’1’. The j-th character of this string is ’0’ if the j-th opponent is going to be absent on the i-th day.</p><p><strong>Output</strong>: Print the only integer — the maximum number of consecutive days that Arya will beat all present opponents.</p><h3 id="思路-15">思路</h3><ul><li><strong>分析</strong>：每天有两种情况，对手到齐或没有到齐，也就是对应着赢或输</li><li><strong>贪心规则</strong>：统计当前连胜天数，并与历史连胜天数比较，取其中最大的即可</li></ul><h3 id="伪代码-16">伪代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">function win(opponents):<br>    max_win = <span class="hljs-number">0</span><br>    now_win = <span class="hljs-number">0</span><br>    <br>    <span class="hljs-keyword">for</span> i = <span class="hljs-number">1</span> to <span class="hljs-built_in">len</span>(opponents):<br>        <span class="hljs-keyword">if</span> opponents[i] == <span class="hljs-number">1</span>:<br>            now_win = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">else</span>:<br>            now_win += <span class="hljs-number">1</span><br>            max_win = <span class="hljs-built_in">max</span>(max_win, now_win)<br>    <br>    <span class="hljs-keyword">return</span> max_win<br></code></pre></td></tr></table></figure><h3 id="时间复杂度-14">时间复杂度</h3><p>仅需要一次遍历即可得出结果，因此时间复杂度为<span class="math inline">\(O(n)\)</span></p><h2 id="q4-minimum-varied-number">Q4 Minimum Varied Number</h2><h3 id="题目-13">题目</h3><p>Find the minimum number with the given sum of digits s such that all digits in it are distinct (i.e. all digits are unique).</p><p>For example, if s = 20 , then the answer is 389 . This is the minimum number in which all digits are different and the sum of the digits is 20 ( 3+8+9 = 20 ).</p><p>For the given s print the required number.</p><p><strong>Input</strong>: The first line contains an integer <span class="math inline">\(t ( 1 \leq t \leq 45 )\)</span> — the number of test cases. Each test case is specified by a line that contains the only integer <span class="math inline">\(s ( 1 \leq s \leq 45 )\)</span>.</p><p><strong>Output</strong>: Print t integers — the answers to the given test cases.</p><h3 id="思路-16">思路</h3><ul><li><strong>分析</strong>：实际上就是需要在1到9的数字间选取最少的数使得和为S，那么从大到小选取即可</li><li><strong>贪心规则</strong><ul><li>若s小于等于9，则结果就是s本身</li><li>若s大于9，则从9开始遍历，依次加上能加的最大数</li></ul></li></ul><h3 id="伪代码-17">伪代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">MIN_NUMBER</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> s</span>):<br>    result = <span class="hljs-string">&#x27;&#x27;</span><br>    last_max = <span class="hljs-number">9</span><br>    <br>    <span class="hljs-keyword">while</span> s&gt;last_max:<br>        s -= last_max<br>        result = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;last_max&#125;</span><span class="hljs-subst">&#123;result&#125;</span>&#x27;</span><br>        last_max--<br>        <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;s&#125;</span><span class="hljs-subst">&#123;result&#125;</span>&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="时间复杂度-15">时间复杂度</h3><p>由于这一算法必然能够在9次以内得到结果，因此时间复杂度为<span class="math inline">\(O(C)\)</span></p><h2 id="q5-joey-takes-money">Q5 Joey Takes Money</h2><p>Joey is low on money. His friend Chandler wants to lend Joey some money, but can’t give him directly, as Joey is too proud of himself to accept it. So, in order to trick him, Chandler asks Joey to play a game.</p><p>In this game, Chandler gives Joey an array <span class="math inline">\(a_1,a_2,\dots,a_n ( n \geq 2 )\)</span> of positive integers <span class="math inline">\(( a_i \geq 1 )\)</span>. Joey can perform the following operation on the array any number of times:</p><ol type="1"><li>Take two indices i and j <span class="math inline">\(( 1 \leq i &lt; j \leq n)\)</span> .</li><li>Choose two integers x and y <span class="math inline">\(( x,y \geq 1 )\)</span> such that <span class="math inline">\(x\cdot y =a_i \cdot a_j\)</span> .</li><li>Replace <span class="math inline">\(a_i\)</span> by <span class="math inline">\(x\)</span> and <span class="math inline">\(a_j\)</span> by <span class="math inline">\(y\)</span> .</li></ol><p>In the end, Joey will get the money equal to the sum of elements of the final array.</p><p>Find the maximum amount of money ans Joey can get but print <span class="math inline">\(2022 \cdot ans\)</span> . Why multiplied by 2022 ? Because we are never gonna see it again!</p><p>It is guaranteed that the product of all the elements of the array a doesn’t exceed <span class="math inline">\(10^{12}\)</span> .</p><p><strong>Input</strong>: Each test contains multiple test cases. The first line contains the number of test cases <span class="math inline">\(t ( 1 \leq t \leq 4000 )\)</span>. Description of the test cases follows. The first line of each test case contains a single integer <span class="math inline">\(n ( 2 \leq n \leq 50 )\)</span> — the length of the array a . The second line contains n integers <span class="math inline">\(a_1, a_2,\dots,a_n ( 1 \leq a_i \leq 10^6 )\)</span> — the array itself. It’s guaranteed that the product of all ai doesn’t exceed <span class="math inline">\(10^{12} (i. e. a_1 \cdot a_2 \cdot \dots \cdot a_n \leq 10^{12} )\)</span>.</p><p><strong>Output</strong>: For each test case, print the maximum money Joey can get multiplied by 2022 .</p><h3 id="思路-17">思路</h3><ul><li><strong>分析</strong>：<ul><li>这道题的目的就是对于array中的数对，选取它们的相等因子替换，使得得到的总和最大</li><li>而两个数相乘的所有因子中，合最大的就是1和乘积本身</li><li>因此依次将所有数全部换为乘积和1，则可以得到最大和</li></ul></li><li><strong>贪心规则</strong>：对所有数相乘即可</li></ul><h3 id="伪代码-18">伪代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">MAX_MONEY</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] array</span>):<br>    <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> array:<br>        result *= num<br>    <span class="hljs-keyword">return</span> result + <span class="hljs-built_in">len</span>(array) - <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="时间复杂度-16">时间复杂度</h3><p>由于仅需要一次遍历连乘，因此时间复杂度为<span class="math inline">\(O(n)\)</span></p><h1 id="四线性规划">四、线性规划</h1><h2 id="q1-1">Q1</h2><h3 id="题目-14">题目</h3><p>You want to determine the quantities <span class="math inline">\(x_1,x_2,\dots,x_n\)</span> of n different foods, each containing m types of nutrients. The amount of the i-th nutrient in the j-th food is represented as an, and the prices of the n foods are <span class="math inline">\(c_1,c_2,\dots,c_n\)</span>. Your goal is to find a recipe where the content of each of the m nutrients is at least <span class="math inline">\(b_1,b_2,\dots,b_m\)</span>, while minimizing the total cost.</p><h3 id="建模">建模</h3><p><span class="math display">\[\begin{align}\min\ &amp;\sum_{i=1}^n c_ix_i\\\text{s.t.}\ &amp;\sum_{j=1}^m a_{ij}x_{ij} - b_i \geq 0 &amp;i=1,2,\dots,m\\&amp;x_i\geq 0 &amp; i=1,2,\dots,m\end{align}\]</span></p><h2 id="q2-1">Q2</h2><h3 id="题目-15">题目</h3><p>You now need to pack dormitory items. You have m items and n boxes, with enough boxes to accommodate all items. The space occupied by the i-th item is <span class="math inline">\(C_i\)</span>, and the capacity of the j-th box is <span class="math inline">\(S_j\)</span>. Your goal is to pack all items using as few boxes as possible.</p><h3 id="建模-1">建模</h3><p>这里设 <span class="math inline">\(x_{ij}\)</span> 表示第i个物品是否放在第j个盒子里，由于目标是使用尽可能少的盒子，因此对于每一列（即每个盒子）我们的希望是全部为零的列越多越好，则可以列出如下式子： $$ <span class="math display">\[\begin{align}\min &amp;\sum_{j=1}^{n} A_j\\\text{s.t.}\ &amp; A_j = \begin{cases}1 &amp;  \sum\limits_{i=1}^{m} x_{ij} \neq 0 \\0 &amp; otherwise\end{cases}\\&amp; \sum_i^m C_ix_{ij} - S_j \leq 0 &amp; j = 1,2,\dots,n\\&amp;x_{ij} \in \{0,1\}\end{align}\]</span> $$</p><h2 id="q3-1">Q3</h2><h3 id="题目-16">题目</h3><p>On a farm, there are two different crops: wheat and soybeans. Planting one acre of wheat requires 5 units of fertilizer and 2 units of water, while planting one acre of soybeans requires 3 units of fertilizer and 4 units of water. The farm has 30 units of fertilizer and 20 units of water available. Each acre of wheat can be sold for 150 dollars, and each acre of soybeans can be sold for 120 dollars. The farm owner wants to maximize the total income.</p><h3 id="建模-2">建模</h3><p>设小麦和大豆分种植数量分别为<span class="math inline">\(x_1\)</span>和<span class="math inline">\(x_2\)</span>，则要求的是最大化收入，约束为使用的水和肥料不能超过农场的库存，则可以进行如下建模： <span class="math display">\[\begin{align}\max\ &amp;150x_1+120x_2\\\text{s.t.}\ &amp;5x_1+3x_2 - 30 \leq 0\\&amp;2x_1 + 4x_2 - 20 \leq 0\end{align}\]</span></p><h2 id="q4-1">Q4</h2><h3 id="题目-17">题目</h3><p>The company manufactures three products, A1, A2, and A3, utilizing resources such as metal sheets, labor, and machinery. The quantities of various resources required to manufacture one unit of each product are provided in the table below. Without considering fixed costs, the unit profits for each product are 40,000 yuan, 50,000 yuan, and 60,000 yuan, respectively. Available resources include 500 tons of metal sheets, 300 workers per month, and 100 machines per month. In addition to production, fixed costs must be paid: 1 million yuan for A1, 1.5 million yuan for A2, and 2 million yuan for A3. Develop a production plan for the company to maximize profits.</p><table><thead><tr class="header"><th style="text-align: center;">Resources</th><th style="text-align: center;">A1</th><th style="text-align: center;">A2</th><th style="text-align: center;">A3</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Metal sheets/t</td><td style="text-align: center;">2</td><td style="text-align: center;">4</td><td style="text-align: center;">8</td></tr><tr class="even"><td style="text-align: center;">Labor force (person/month)</td><td style="text-align: center;">2</td><td style="text-align: center;">3</td><td style="text-align: center;">4</td></tr><tr class="odd"><td style="text-align: center;">Machinery (units/month)</td><td style="text-align: center;">1</td><td style="text-align: center;">2</td><td style="text-align: center;">3</td></tr></tbody></table><h3 id="建模-3">建模</h3><p>这道题存在一个fixed costs，但是题目中并没有表明它的缴费频率或者与是否生产对应成本有关，不过无论如何缴费，这这里我们都可以将fixed costs视为一个常数<span class="math inline">\(C_i\)</span>，因为它和产品的数量并无关系。</p><p>那么设三种产品生产数量分别为<span class="math inline">\(x_1\)</span>、<span class="math inline">\(x_2\)</span>、<span class="math inline">\(x_3\)</span>，则可以进行如下建模： <span class="math display">\[\begin{align}\max\ &amp; 40000x_1+50000x_2+60000x_3 -\sum_{i=1}^3C_ia_i\\\text{s.t.}\ &amp;2x_1+4x_2+8x_3 - 500 \leq 0\\&amp;2x_1+3x_2+4x_3 - 300 \leq 0\\&amp;x_1+2x_2+3x_3 - 100 \leq 0\\&amp;a_i = \begin{cases}0 &amp; x_i = 0\\1 &amp; x_i \neq0\end{cases}\quad ,i\in\{1,2,3\}\end{align}\]</span></p><h2 id="q5-1">Q5</h2><h3 id="题目-18">题目</h3><p>The company plans to open branches in four districts in the urban area, with a total of 10 locations to choose from. Taking into account the consumption levels and residential density of residents in each district, the following rules are established:</p><ul><li>In District 1, at most two points can be selected from <span class="math inline">\(A_1\)</span>, <span class="math inline">\(A_2\)</span>, and <span class="math inline">\(A_3\)</span>;</li><li>In District 2, at least one point must be selected from <span class="math inline">\(A_4\)</span> and <span class="math inline">\(A_5\)</span>;</li><li>In District 3, at least one point must be selected from <span class="math inline">\(A_6\)</span> and <span class="math inline">\(A_7\)</span>;</li><li>In District 4, at least two points must be selected from <span class="math inline">\(A_8\)</span>, <span class="math inline">\(A_9\)</span>, and <span class="math inline">\(A_{10}\)</span>.</li></ul><p>The investment and annual profit for each point <span class="math inline">\(A_j\)</span> vary depending on the location, as shown in the table below. The total investment of the company should not exceed 7.2 million yuan. Which sales points should be selected to maximize the company’s annual profit?</p><table><thead><tr class="header"><th style="text-align: center;"></th><th style="text-align: center;">A1</th><th style="text-align: center;">A2</th><th style="text-align: center;">A3</th><th style="text-align: center;">A4</th><th style="text-align: center;">A5</th><th style="text-align: center;">A6</th><th style="text-align: center;">A7</th><th style="text-align: center;">A8</th><th style="text-align: center;">A9</th><th style="text-align: center;">A10</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Investment</td><td style="text-align: center;">100</td><td style="text-align: center;">120</td><td style="text-align: center;">150</td><td style="text-align: center;">80</td><td style="text-align: center;">70</td><td style="text-align: center;">90</td><td style="text-align: center;">80</td><td style="text-align: center;">140</td><td style="text-align: center;">160</td><td style="text-align: center;">180</td></tr><tr class="even"><td style="text-align: center;">Profit</td><td style="text-align: center;">36</td><td style="text-align: center;">40</td><td style="text-align: center;">50</td><td style="text-align: center;">22</td><td style="text-align: center;">20</td><td style="text-align: center;">30</td><td style="text-align: center;">25</td><td style="text-align: center;">48</td><td style="text-align: center;">58</td><td style="text-align: center;">61</td></tr></tbody></table><h3 id="建模-4">建模</h3><p>对于这道题，设<span class="math inline">\(x_i\)</span>为是否选择<span class="math inline">\(A_i\)</span>，是则为1，否则为0。为了方便起见，设每一点的Investment为<span class="math inline">\(I_i\)</span>，Profit为<span class="math inline">\(P_i\)</span>则可以进行如下建模： <span class="math display">\[\begin{align}\max\ &amp;\sum_{i=1}^{10}P_i\times x_i\\\text{s.t.}\ &amp;\sum_{i=1}^{10}x_i = 4\\&amp;x_1+x_2+x_3 \leq 2\\&amp;x_4+x_5 \geq 1\\&amp;x_6+x_7 \geq 1\\&amp;x_8+x_9+x_{10} \geq 2\\&amp;\sum_{i=1}^{10} I_i \times x_i  \leq 7200000\\&amp;x_i \in \{0,1\}\end{align}\]</span></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生物信息学复习</title>
    <link href="/2024/01/08/2024-01-08-bioinfo/"/>
    <url>/2024/01/08/2024-01-08-bioinfo/</url>
    
    <content type="html"><![CDATA[<h1 id="国科大生物信息学期末考点">国科大生物信息学期末考点</h1><h2 id="一什么是生物信息学">一、什么是生物信息学</h2><ul><li>它是一个学科领域，包含着基因组信息的获取、处理、存储、分配 、分析和解释的所有方面</li><li>生物信息学是把基因组DNA序列信息分析作为源头，破译隐藏在DNA序列中的遗传语言，特别是非编码区的实质；同时在发现了新基因信息之后进行蛋白质空间结构模拟和预测</li><li>生物信息学的研究目标是揭示“基因组信息结构的复杂性及遗传语言的根本规律”。它是当今自然科学和技术科学领域中“基因组、“信息结构”和“复杂性”这三个重大科学问题的有机结合</li></ul><h3 id="生物研究和生物信息学的重要性和实例">生物研究和生物信息学的重要性和实例</h3><ul><li><strong>人类基因组计划</strong>：生物信息学在人类基因组计划中扮演了关键角色。这一项目成功解析了人类基因组，帮助科学家识别数千个基因以及与各种疾病相关的遗传变异</li><li><strong>疫苗开发</strong>：生物研究在新兴病原体如COVID-19病毒的疫苗开发中起着关键作用。科学家通过研究病毒的生物学特性，例如其蛋白质结构和传播机制，能够设计疫苗，如mRNA疫苗，来防止病毒传播</li><li>更多：<ul><li>怎样从新测得的DNA序列中找到编码区？</li><li>非编码区与编码区的差别是什么？</li><li>非编码区有什么具体功能？</li><li>RNAi现象对于细胞来说有着很重要的意义，包括基因表达的调控等等，那么都有哪些具体机制可以诱导正常细胞产生RNAi现象？</li><li>SARS病毒的比较基因组研究</li><li>治疗SARS的RNAi设计</li><li>SARS蛋白的结构预测和模拟</li></ul></li></ul><h3 id="怎么理解">怎么理解：</h3><p>生物信息学是把基因组DNA序列信息分析作为源头，找到基因组序列中代表蛋白质和RNA基因的编码区；同时，阐明基因组中大量存在的非编码区的信息实质，破译隐藏在DNA序列中的遗传语言规律；在此基础上，归纳、整理与基因组遗传信息释放及其调控相关的转录谱和蛋白谱数据，从而认识代谢、发育、分化、进化的规律。</p><p>其还利用基因组中编码区信息进行蛋白空间结构模拟和蛋白功能预测，并将此类信息与生物体和生命过程的生理生化信息结合，阐明其分子机理，最终进行蛋白、核酸分子设计、药物设计、个体化医疗保健设计。</p><h2 id="二发现新基因的两种方法是什么算法的本质是">二、发现新基因的两种方法是什么？算法的本质是？</h2><h3 id="通过大规模基因测序查找具有编码特征的序列">1、通过大规模基因测序，查找具有编码特征的序列。</h3><p>通过大规模基因测序得到完整序列的数据出发，然后理论上识别和预测在这个基础序列里面有哪些特定的序列段具有编码序列特征。实际上是通过基因组序列去找到具有编码序列特征的区域。</p><p>一般可分为：</p><p>（1）基于信号，如剪切位点、序列中的promoter与terminator</p><p>（2）基于组分，即基因家族、特殊序列间比较，complexity analysis，neutral network</p><h4 id="本质">本质</h4><p>以一个序列片段为线索, 通过它和整个数据库的比较, 还原出全序列原貌。当测序获得一条EST序列时，它来自哪一个基因的哪个区域是未知的(随机的)，所以属于同一个基因的不同EST序列之间常有交叠的区域。根据这种“交叠”现象，就能找出属于同一个基因的所有EST序列，进而将它们拼接成和完整基因相对应的全长cDNA序列。</p><h3 id="通过est序列est数据库拼接组装">2、通过EST序列（EST数据库），拼接组装。</h3><p>ESC系列( Expression Sequence Tag) 都是归属于编码序列的，无需去识别，你只需要把它组装就好。</p><p>国际上现已出现了几个基于EST的基因索引如UniGene, Merck-Gene, GenExpress-index</p><p>数据来源于大量的序列小片段，EST较短，故关键在正确拼接。方法有基因组序列比对、拼接、组装法等。经常采用SiClone策略：</p><p>主要步骤：</p><ul><li>构建数据库；</li><li>将序列纯化格式标准化；</li><li>从种子库中取序列和大库序列比对；</li><li>延长种子序列，至不能再延长；</li><li>放入contig库</li></ul><h2 id="三利用核酸或蛋白序列数据进行生物进化研究有哪些计算步骤在这一领域当前存在的重要困难是什么有何解决途径">三、利用核酸或蛋白序列数据进行生物进化研究有哪些计算步骤？在这一领域当前存在的重要困难是什么？有何解决途径？</h2><h3 id="计算步骤">1、计算步骤：</h3><ol type="1"><li>序列相似性比较。可以找到和目标序列相似的序列，但无法确定序列间的同源关系。就是将待研究序列与DNA或蛋白质序列库进行比较，用于确定该序列的生物属性，也就是找出与此序列相似的已知序列是什么。完成这一工作只需要使用两两序列比较算法。常用分析有BLAST等</li><li>序列同源性分析。是将待研究序列加入到一组与之同源，但来自不同物种的序列中进行多序列同时比较，以确定该序列与其它序列间的同源性大小。这是理论分析方法中最关键的一步。完成这一工作必须使用多序列比较算法。常用的程序包有CLUSTAL等</li><li>构建系统进化树。一般单独一种方法是不够的，通常需要多种方法才能构建反映物种间进化关系的进化树。根据序列同源性分析的结果，重建反映物种间进化关系的进化树。为完成这一工作已发展了多种软件包，例如PYLIP、MEGA等</li><li>稳定性检验（分支的确定）。只有稳定的分支才有意义，为了检验构建好的进化树的可靠性，通常构建过程要随机成百上千次，大概率（70%以上）出现的分支点才是可靠的，通用的方法使用 Bootstrap算法，相应的软件已包括在构建系统进化树所用的软件包当中</li></ol><h3 id="当前的主要困难">2、当前的主要困难</h3><p>基因的横向迁移（LGT，Lateral gene transfer）现象。即进化程度不同的物种间存在着遗传信息基因的传递，如果拿迁移的基因做进化分析就会出错。</p><h3 id="解决方法">3、解决方法：</h3><ol type="1"><li>maker去掉横向迁移的的gene；在所有序列中筛选出有垂直进化关系的序列数据集，如COG数据库</li><li>用完整的基因组和蛋白质组比较：<ul><li>以whole genome为单位，进行基因组水平上的比对</li><li>利用生物体的蛋白质组构建进化树</li></ul></li></ol><p>选取特征比对，不用长度的序列字符串进行比对后，对照其genome进行归一化</p><p>ORF对比，将all predicted ORF采用COG的分类规则进行分类，再构建进化树</p><h4 id="进化树方法研究古生物时的问题">进化树方法研究古生物时的问题：</h4><p>样品测序是在几千万年前被固定的，而对比库则是现存的，故两者时间差是无法避免的，所以必须采取方法使两者的时间差尽可能的缩短，可采用的方法有两种：</p><ul><li>建立与样品同时代的database</li><li>构建模型，使样品序列模拟进化</li></ul><h2 id="四什么是-snp-为什么snp的研究是重要的-你能给出2到3个snp-相关的-web-sites吗">四、什么是 SNP? 为什么SNP的研究是重要的? 你能给出2到3个SNP 相关的 web sites吗?</h2><h3 id="定义">1、定义：</h3><p>SNP（single nucleotide polymorphisms）是指单核苷酸多态性，主要是指在基因组水平上由单个核苷酸的变异所引起的 DNA序列多态性，代表了基因组水平上遗传密码的变异，由于这种变异很多以单碱基突变的形式出现，因此称为单核苷酸多态性；它反映了不同个体间、正常与异常个体之间基因组上的差别，现在这个概念有所扩大，不限于一个核苷酸的差异。</p><h3 id="重要性">2、重要性：</h3><p>SNP研究是基因组领域理论成果走向应用的关键步骤，是联系基因型和表现型之间关系的桥梁。</p><h3 id="snp网站">3、SNP网站：</h3><ul><li>NCBI SNP database：将这些数据进行整理，去掉冗余，使每个 SNP 都是唯一的。此时的SNP 被称为 reference SNP 或 refSNP</li><li>The Human Genic Bi-Allelic Sequences Database(HGBASE)：收录了人基因组中所有已知的序列变化，包括：SNPs、Indels、简单重复序列等</li><li>Database(ALFRED)：它是人类群体等位基因频率数据库。</li><li>Breast Cancer Mutation Data Base (BIC)：它收录了与乳腺癌相关的基因突变和SNP</li></ul><h2 id="五什么是系统生物学-系统生物学对生物功能实现的理解有何本质变化">五、什么是系统生物学? 系统生物学对生物功能实现的理解有何本质变化?</h2><h3 id="系统生物学定义">1、系统生物学定义</h3><p>包含三个相互衔接的组成：</p><ul><li><strong>整合各个层次、各个元件的信息</strong>：整合从所有不同生物水平获得的信息——DNA信息、RNA信息、蛋白质信息、蛋白质相互作用信息、途径等等</li><li><strong>基于信息建立模型</strong>：利用这些信息编写数学模型，能够预测评估中的生物系统的结构</li><li><strong>用模型去预测系统未来的发展</strong>：在特定种类的刺激或扰动下预测其性质。</li></ul><h3 id="本质变化">2、本质变化</h3><p>传统生物学是：序列→结构→功能，只考虑单个个体，单个 gene，单个蛋白质。</p><p>系统生物学是：相互作用→网络→功能，除考虑单个个体，单个 gene，还考虑个体与个体之间的相互作用，把整个生命活动作为一个网络来考查它们的相互作用。 所以，系统生物学认为真正实现生物学功能的是一组相互作用形成网络的蛋白质集合，不仅考虑单个分子元件而且要考虑其相互作用，以相互作用的网络来研究其功能，基因组是网络中的一部分，只有通过相互作用的网络才能体现功能。</p><h2 id="六什么是contig和scaffoldl50和n50是什么">六、什么是contig和scaffold，L50和N50是什么</h2><h3 id="contig">1、contig</h3><p>A contig (from contiguous) is a set of overlapping DNA segments that together represent a consensus region of DNA.</p><p>重叠群（来自连续的）是一组重叠的、完整连续的DNA片断</p><h3 id="scaffold">2、scaffold：</h3><p>A scaffold is a portion of the genome sequence reconstructed from end-sequenced whole-genome shotgun clones. Scaffolds are composed of contigs and gaps.</p><p>支架是从末端测序的全基因组鸟枪克隆重建的基因组序列的一部分。脚手架由重叠部分和间隙组成。</p><h3 id="n50">3、N50</h3><p>把contig或scaffold按照从大到小的顺序排列，长度达到基因组大小（所有contig或scaffold的长度）的50%时，那条contig/scaffold的长度，即为contig/scaffold N50. N50越大，说明基因组组装的质量越高。</p><h3 id="l50">4、L50</h3><p>长度总和产生N50的contig/scaffold的数量。</p><h2 id="七大数据分析需要注意的问题">七、大数据分析需要注意的问题</h2><ul><li>角度的正确性</li><li>参照的合理性</li><li>采样的代表性</li><li>结论的正确性</li></ul><h2 id="八真阳性真阴性假阳性假阴性灵敏度特异性">八、真阳性，真阴性，假阳性，假阴性，灵敏度，特异性</h2><h3 id="真阳性真阴性假阳性假阴性">1、真阳性，真阴性，假阳性，假阴性</h3><ul><li>True Positive （真阳性, TP）被模型预测为正的正样本；可以称作判断为真的正确率</li><li>True Negative（真阴性, TN）被模型预测为负的负样本 ；可以称作判断为假的正确率</li><li>False Positive （假阳性, FP）被模型预测为正的负样本；可以称作误报率</li><li>False Negative（假阴性, FN）被模型预测为负的正样本；可以称作漏报率</li></ul><h3 id="灵敏度sensitivity">2、灵敏度Sensitivity：</h3><p><span class="math display">\[TPR = \frac{TP}{TP + FN}\]</span></p><p>正样本预测结果数 / 正样本实际数</p><h3 id="特异性specificity">3、特异性Specificity：</h3><p><span class="math display">\[TNR = \frac{TN}{TN + FP}\]</span> 负样本预测结果数 / 负样本实际数</p><h2 id="九基因组相关概念">九、基因组相关概念</h2><ul><li><strong>Genotype</strong>：the genetic constitution of the organism</li><li><strong>Phenotype</strong>：the composite of an organism's observable characteristics or traits</li><li><strong>Trait（性状）</strong>：is a distinct variant of a phenotypic characteristic of an organism that may be inherited, be environmentally determined or be a combination of the two</li><li><strong>Locus</strong>：a chromosomal location</li><li><strong>Alleles（等位基因）</strong>：also called allelomorph, refers to any one of two or more genes that may occur alternatively at a given site (locus) on a chromosome</li><li><strong>Mutation</strong>：a change in the genetic material, usually rare and pathological</li><li><strong>Polymorphism（多态性）</strong>：a change in the genetic material, usually common and not pathological</li><li><strong>Homozygote（纯合子）</strong>：an organism with identical pair of alleles for a specific trait.</li><li><strong>Heterozygote（杂合子）</strong>：an organism that has different alleles at a particular gene locus on homologous chromosomes.</li><li><strong>Hemizygote（半合子）</strong>：an organism that has only one allele for a specific trait<ul><li>Males are hemizygous for most genes on the sex chromosomes</li></ul></li><li><strong>Dominant trait（显性性状）</strong>：a trait that shows in a heterozygote</li><li><strong>Recessive trait（隐性性状）</strong>：a trait that is hidden in a heterozygote</li><li><strong>Karyotype（核型分析）</strong>：A karyotype is the number and appearance of chromosome in the nucleus of an eukaryotic cell</li><li><strong>Population Genetics（群体遗传学）</strong>：Population genetics is the study of variation within populations of individuals, and the forces which shape it. This involves studying changes in the frequencies of genetic variation in populations over space and time</li><li><strong>Population（种群）</strong>：An interbreeding group of the same species in a given geographical area</li><li><strong>Population genetics</strong>：The study of the genetics of a population and how the alleles vary with time</li><li><strong>Gene pool</strong>：The collection of all alleles in the members of the population</li><li><strong>Gene flow</strong>：Movement of alleles between populations when people migrate and mate</li><li><strong>Allele Frequencies（等位基因频率）</strong>：特定等位基因/所有等位基因。Count both chromosomes of each individual. affect the genotype frequencies<ul><li>The frequency of the two homozygotes and the heterozygote in the population</li></ul></li><li><strong>Cohort（队列）</strong>：a group of people who share a common characteristic or experience within a defined period (e.g., are born, are exposed to a drug or vaccine or pollutant, or undergo a certain medical procedure).</li><li><strong>Pedigree chart（谱系图）</strong>：A chart showing the genetic connections between individuals</li><li><strong>Microevolution（微进化）</strong>：The small genetic changes due to changing allelic frequencies in populations<ul><li>Five factors can change genotypic frequencies：<ul><li>Nonrandom mating</li><li>Migration</li><li>Genetic drift</li><li>Mutation</li><li>Natural selection</li></ul></li></ul></li><li><strong>Genetic drift（基因漂移）</strong>：(also known as allelic drift or the Sewall Wright effect after biologist Sewall Wright) is the change in the frequency of a gene variant (allele) in a population due to random sampling of organisms.</li><li><strong>Linked Genes（连锁基因）</strong>：Genes located together on a chromosome. Linked genes can assort separately from one another only through crossing over</li><li><strong>Missense mutation（错义突变）</strong>：A point mutation in which a single nucleotide change results in a codon that codes for a different amino acid</li><li><strong>Nonsense mutation（无义突变）</strong>：A point mutation that results in a stop codon (nonsense codon) in a transcribed mRNA, which encodes incomplete and usually nonfunctional protein product</li></ul>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>期末复习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>期末复习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自用ffmpeg脚本合集</title>
    <link href="/2023/12/22/2023-12-22-ffmepg-merge/"/>
    <url>/2023/12/22/2023-12-22-ffmepg-merge/</url>
    
    <content type="html"><![CDATA[<h1 id="指令">指令</h1><h2 id="视频相关">视频相关</h2><h3 id="拼接视频">拼接视频</h3><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off<br><br>ffmpeg.exe -f concat -i .\filelist.txt -c <span class="hljs-built_in">copy</span> .\output.mp4<br><br><span class="hljs-built_in">echo</span> done<br><span class="hljs-built_in">pause</span><br></code></pre></td></tr></table></figure><p><code>filelist.txt</code>内容类似：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">file</span> <span class="hljs-string">&#x27;Word2Vec.mp4&#x27;</span><br><span class="hljs-keyword">file</span> <span class="hljs-string">&#x27;AttentionLayer.mp4&#x27;</span><br><span class="hljs-keyword">file</span> <span class="hljs-string">&#x27;DecoderOnly.mp4&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="缩放视频">缩放视频</h3><p>缩放到1080P</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -i .\input.mp4 -vf scale=1920:1080 -c:a copy output.mp4<br></code></pre></td></tr></table></figure><h3 id="裁取区间视频">裁取区间视频</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -i input.mp4 -ss 00:01:00 -to 00:03:30 -c copy output.mp4<br></code></pre></td></tr></table></figure><h3 id="将视频转为264编码">将视频转为264编码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -i <span class="hljs-string">&#x27;input.mkv&#x27;</span> -map 0 -c:a copy -c:s copy -c:v libx264 <span class="hljs-string">&#x27;input_264.mkv&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="音频相关">音频相关</h2><h3 id="合并多音轨">合并多音轨</h3><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off<br><span class="hljs-built_in">setlocal</span> enabledelayedexpansion<br><br><span class="hljs-built_in">set</span> &quot;output_folder=output&quot;<br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">exist</span> &quot;<span class="hljs-variable">%output_folder%</span>&quot; (<br>    <span class="hljs-built_in">rmdir</span> /s /q &quot;<span class="hljs-variable">%output_folder%</span>&quot;<br>)<br><br><span class="hljs-built_in">mkdir</span> &quot;<span class="hljs-variable">%output_folder%</span>&quot;<br><br><span class="hljs-keyword">for</span> <span class="hljs-variable">%%F</span> <span class="hljs-keyword">in</span> (*.mkv) <span class="hljs-keyword">do</span> (<br>    <span class="hljs-built_in">echo</span> &quot;-------------------------&quot;<br>    <span class="hljs-built_in">set</span> &quot;input_file=<span class="hljs-variable">%%~</span>nF&quot;<br>    <span class="hljs-built_in">set</span> &quot;output_file=<span class="hljs-variable">!input_file!</span>_merge.mkv&quot;<br><br>    ffmpeg -i &quot;<span class="hljs-variable">%%F</span>&quot; -filter_complex &quot;[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>][<span class="hljs-number">0</span>:<span class="hljs-number">2</span>][<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]amerge=inputs=<span class="hljs-number">3</span>[a]&quot; -map <span class="hljs-number">0</span>:v -map &quot;[a]&quot; -c:v <span class="hljs-built_in">copy</span> -c:a aac -b:a <span class="hljs-number">256</span>k &quot;output/<span class="hljs-variable">!output_file!</span>&quot;<br>)<br><br><span class="hljs-built_in">echo</span> All files processed successfully.<br><span class="hljs-built_in">pause</span><br></code></pre></td></tr></table></figure><p>更多音轨，比如四个：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bat">ffmpeg -i &quot;<span class="hljs-variable">%%F</span>&quot; -filter_complex &quot;[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>][<span class="hljs-number">0</span>:<span class="hljs-number">2</span>][<span class="hljs-number">0</span>:<span class="hljs-number">3</span>][<span class="hljs-number">0</span>:<span class="hljs-number">4</span>]amerge=inputs=<span class="hljs-number">4</span>[a]&quot; -map <span class="hljs-number">0</span>:v -map &quot;[a]&quot; -c:v <span class="hljs-built_in">copy</span> -c:a aac -b:a <span class="hljs-number">256</span>k &quot;output/<span class="hljs-variable">!output_file!</span>&quot;<br></code></pre></td></tr></table></figure><p>只压制1、3音轨：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bat">ffmpeg -i &quot;<span class="hljs-variable">%%F</span>&quot; -filter_complex &quot;[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>][<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]amerge=inputs=<span class="hljs-number">2</span>[a]&quot; -map <span class="hljs-number">0</span>:v -map &quot;[a]&quot; -c:v <span class="hljs-built_in">copy</span> -c:a aac -b:a <span class="hljs-number">256</span>k &quot;output/<span class="hljs-variable">!output_file!</span>&quot;<br></code></pre></td></tr></table></figure><h3 id="抽取视频音轨">抽取视频音轨</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -i <span class="hljs-string">&#x27;input.mp4&#x27;</span> -f mp3 -vn bgm.mp3<br></code></pre></td></tr></table></figure><h3 id="生成指定时长的空白音频">生成指定时长的空白音频</h3><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off<br><br><span class="hljs-built_in">set</span> /p duration=&quot;Please input blank audio <span class="hljs-built_in">time</span>:&quot;<br>ffmpeg -f lavfi -t <span class="hljs-variable">%duration%</span> -i anullsrc blank_<span class="hljs-variable">%duration%</span>s.mp3 -y<br><br><span class="hljs-built_in">echo</span> generate a <span class="hljs-variable">%duration%</span>s blank audio<br><span class="hljs-built_in">pause</span><br></code></pre></td></tr></table></figure><h3 id="拼接音频">拼接音频</h3><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off<br><br>ffmpeg -f concat -i .\audiolist.txt -acodec <span class="hljs-built_in">copy</span> .\output.mp3<br><br><span class="hljs-built_in">echo</span> done<br><span class="hljs-built_in">pause</span><br></code></pre></td></tr></table></figure><h3 id="合并视频和音频">合并视频和音频</h3><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off<br><br>ffmpeg -i .\output.mp4 -i .\output.mp3 -map <span class="hljs-number">0</span>:v -map <span class="hljs-number">1</span>:a output_bgm.mp4<br><br><span class="hljs-built_in">echo</span> done<br><span class="hljs-built_in">pause</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>计算机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用mdbook构筑你自己的电子笔记</title>
    <link href="/2023/09/12/2023-09-12-mdbook/"/>
    <url>/2023/09/12/2023-09-12-mdbook/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>写下本文的动机其实是记录一下我自己准备跳出gitbook时所做的事情。在之前，我是拿gitbook来做笔记并且保存在GitHub的，gitbook很好用，渲染也漂亮，还提供免费的在线浏览。不过有一个问题就是这玩意在商业化之后吃相难看起来了，下载要收费，导出PDF要收费，什么都要收费。于是转而开始寻找替代品，找到了这个：<a href="https://github.com/rust-lang/mdBook">mdbook</a>。</p><p>mdbook是一个基于rust的电子书系统，使用起来和原来的gitbook别无二致，同时也有大量的第三方插件可供选择，基本上如果你以前使用的是gitbook，那么你将能够非常完美的转换为使用mdbook编写书籍.</p><h1 id="一安装1">一、安装<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[https://rust-lang.github.io/mdBook/guide/installation.html](https://rust-lang.github.io/mdBook/guide/installation.html)">[1]</span></a></sup></h1><h2 id="安装rust2">1.1 安装rust<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[https://www.rust-lang.org/tools/install](https://www.rust-lang.org/tools/install)">[2]</span></a></sup></h2><p>由于mdbook是使用rust编写的，因此在使用时需要先安装rust，本教程使用的环境为Windows11，因此直接在<a href="https://www.rust-lang.org/tools/install">下载界面</a>下载官方的<code>rustup-init.exe</code>后运行即可。</p><p>运行之后会出现这样一个命令行界面，直接回车即可：</p><p><img src="/images/posts/mdbook/rust_install.png" /></p><p>之后它就会开始自行安装相关组件并添加环境变量，当运行结束之后，再次回车退出即可：</p><p><img src="/images/posts/mdbook/rust_install——2.png" /></p><p>此时再次打开命令行，输入以下指令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">cargo <span class="hljs-literal">--version</span><br></code></pre></td></tr></table></figure><p>如果能够正常输出，则说明安装成功：</p><figure><img src="/images/posts/mdbook/rust_install_3.png" alt="image-20230912154940951" /><figcaption aria-hidden="true">image-20230912154940951</figcaption></figure><h2 id="安装mdbook">1.2 安装mdbook</h2><p>打开命令行，运行以下指令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">cargo install <span class="hljs-literal">--git</span> https://github.com/rust<span class="hljs-literal">-lang</span>/mdBook.git mdbook<br></code></pre></td></tr></table></figure><p>它会安装GitHub上最新版本的mdbook，不过如果你网络不太行，在这一步失败的话，也可以直接运行：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">cargo <span class="hljs-keyword">install</span> mdbook<br></code></pre></td></tr></table></figure><p>这会安装发行版的mdbook，版本可能会存在些许的更新不及时，但一般也不会差太多。</p><p>安装完毕之后，运行：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">mdbook <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><figure><img src="/images/posts/mdbook/mdbook.png" alt="image-20230912160143716" /><figcaption aria-hidden="true">image-20230912160143716</figcaption></figure><p>正常输出，安装成功。</p><h1 id="二编写书籍">二、编写书籍</h1><h2 id="初始化目录">2.1 初始化目录</h2><p>来到你想要创建书籍的<strong><em>根目录</em></strong>下，运行以下指令：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">mdbook <span class="hljs-keyword">init</span> 你的书籍名<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>这行指令会自动建立文件夹，例如你希望你的书存在<code>D:/notebook/mybook</code>下，那么实际上你需要做的是进入notebook目录，运行</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">mdbook <span class="hljs-keyword">init</span> mybook<br></code></pre></td></tr></table></figure>          </div><p>运行过程中会询问是否创建gitignore和书籍名称是什么，选是并输入你的书籍名称即可：</p><p><img src="/images/posts/mdbook/init_book.png" /></p><p>运行完毕之后，可以看到它自行创建了PRMLNote文件夹，并在其中创建了初始文件：</p><p><img src="/images/posts/mdbook/init_book_2.png" /></p><p>此时在这个目录中运行以下指令：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">mdbook serve <span class="hljs-comment">--open</span><br></code></pre></td></tr></table></figure><p>mdbook就会自动生成html文件并在浏览器中打开：</p><p><img src="/images/posts/mdbook/init_book_3.png" /></p><p>由于我们还什么都没有写，因此这里就只有初始的默认界面。</p><h2 id="配置文件">2.2 配置文件</h2><p>在我们的根目录中，有一个<code>book.toml</code>文件，这个文件就是我们书籍的配置文件，书籍的标题、渲染主题、第三方插件等都是在这里配置的。我这里贴一个我的示例：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[book]</span><br><span class="hljs-attr">authors</span> = [<span class="hljs-string">&quot;Aye10032&quot;</span>]<br><span class="hljs-attr">language</span> = <span class="hljs-string">&quot;zh&quot;</span><br><span class="hljs-attr">multilingual</span> = <span class="hljs-literal">false</span><br><span class="hljs-attr">src</span> = <span class="hljs-string">&quot;src&quot;</span><br><span class="hljs-attr">title</span> = <span class="hljs-string">&quot;PRML note&quot;</span><br></code></pre></td></tr></table></figure><p>当然你的肯定不会跟我一样，这里有几个条目：</p><ul><li>authors：作者，可以有多个</li><li>language：书籍的语言，如果下面的multilingual没有启用，则这行意义不大</li><li>multilingual：是否有多个语言翻译</li><li>src：书籍源文件所在目录，默认为src</li><li>title：书籍的标题</li></ul><p>后面我们还会多次用到这个文件，记好了。</p><h2 id="新建章节">2.3 新建章节</h2><p>与gitbook一样，mdbook也是使用一个<code>SUMMARY.md</code>来管理文章组织结构的，我来贴一个例子加以说明：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># Summary</span><br><br><span class="hljs-bullet">-</span> [<span class="hljs-string">introduction</span>](<span class="hljs-link">README.md</span>)<br><br><span class="hljs-section"># part1&amp;2</span><br><br><span class="hljs-bullet">-</span> [<span class="hljs-string">Chapter 1</span>](<span class="hljs-link">part1/chapter_1.md</span>)<br><span class="hljs-bullet">-</span> [<span class="hljs-string">Chapter_2</span>](<span class="hljs-link">part2/chapter_1.md</span>)<br><span class="hljs-bullet">  -</span> [<span class="hljs-string">chapter_2.1</span>](<span class="hljs-link">part2/chapter_2.md</span>)<br><br><span class="hljs-section"># part3</span><br><span class="hljs-bullet">-</span> [<span class="hljs-string">Chapter_3.1</span>](<span class="hljs-link">part3/chapter_1.md</span>)<br><span class="hljs-bullet">-</span> [<span class="hljs-string">chapter_3.2</span>](<span class="hljs-link">part3/chapter_2.md</span>)<br></code></pre></td></tr></table></figure><p>同时附上目录结构：</p><p><img src="/images/posts/mdbook/summary.png" /></p><p>通过这个<code>SUMMARY.md</code>渲染出来的目录是这样的：</p><p><img src="/images/posts/mdbook/summary_2.png" /></p><p>这样一来就比较好理解了，实际上，本身markdown文件怎么存，其实和目录结构是完全无关的，我这里分成多个文件夹完全是为了自己看的时候方便组织管理。真正决定目录结构的就是<code>SUMMARY.md</code>中的缩进，每一级列表的缩进就代表一集目录，例如上图中的chapter_2.1，由于缩进了一级，因此在目录渲染后表现为一个二级目录。</p><p>同时，<code>SUMMARY.md</code>中的一级标题也在目录渲染中起到作用，它会表现为一条单纯的文本，不可点击，例如上图的part1&amp;2和part3，这也可以用于章节管理。</p><div class="note note-info">            <p><code>SUMMARY.md</code>的全文标题（默认为SUMMARY）在渲染时会被自动忽略</p>          </div><p>不过目前来看，mdbook好像还不能像gitbook那样通过命令行自动生成新的章节文件，因此你得每次手动编辑<code>SUMMARY.md</code>来添加新的章节。</p><h1 id="三使用插件">三、使用插件</h1><p>mdbook本身有着丰富的第三方插件，官方列了一个插件列表：<a href="https://github.com/rust-lang/mdBook/wiki/Third-party-plugins">https://github.com/rust-lang/mdBook/wiki/Third-party-plugins</a>。</p><p>每一个插件都有说明，你可以根据需要寻找符合要求的插件点进去链接查看如何配置，我这里说几个我常用的</p><h2 id="数学公式支持">3.1 数学公式支持</h2><p>插件仓库链接：<a href="https://github.com/lzanini/mdbook-katex">https://github.com/lzanini/mdbook-katex</a></p><h3 id="安装配置">安装&amp;配置</h3><p>运行以下命令进行安装：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">cargo <span class="hljs-keyword">install</span> mdbook-katex<br></code></pre></td></tr></table></figure><p>安装完毕后，在<code>book.toml</code>中添加以下内容：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[preprocessor.katex]</span><br><span class="hljs-attr">after</span> = [<span class="hljs-string">&quot;links&quot;</span>]<br><span class="hljs-comment"># KaTeX options.</span><br><span class="hljs-attr">output</span> = <span class="hljs-string">&quot;html&quot;</span><br><span class="hljs-attr">leqno</span> = <span class="hljs-literal">false</span><br><span class="hljs-attr">fleqn</span> = <span class="hljs-literal">false</span><br><span class="hljs-attr">throw-on-error</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">error-color</span> = <span class="hljs-string">&quot;#cc0000&quot;</span><br><span class="hljs-attr">min-rule-thickness</span> = -<span class="hljs-number">1.0</span><br><span class="hljs-attr">max-size</span> = <span class="hljs-string">&quot;Infinity&quot;</span><br><span class="hljs-attr">max-expand</span> = <span class="hljs-number">1000</span><br><span class="hljs-attr">trust</span> = <span class="hljs-literal">false</span><br><span class="hljs-comment"># Extra options.</span><br><span class="hljs-attr">no-css</span> = <span class="hljs-literal">false</span><br><span class="hljs-attr">include-src</span> = <span class="hljs-literal">false</span><br><span class="hljs-attr">block-delimiter</span> = &#123; left = <span class="hljs-string">&quot;$$&quot;</span>, right = <span class="hljs-string">&quot;$$&quot;</span> &#125;<br><span class="hljs-attr">inline-delimiter</span> = &#123; left = <span class="hljs-string">&quot;$&quot;</span>, right = <span class="hljs-string">&quot;$&quot;</span> &#125;<br></code></pre></td></tr></table></figure><p>具体参数的含义，这是官方的说明：</p><table><thead><tr class="header"><th style="text-align: center;">Argument</th><th style="text-align: center;">Type</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><a href="https://katex.org/docs/options.html#:~:text=default-,output,-string"><code>output</code></a></td><td style="text-align: center;"><code>"html"</code>, <code>"mathml"</code>, or <code>"htmlAndMathml"</code></td></tr><tr class="even"><td style="text-align: center;"><a href="https://katex.org/docs/options.html#:~:text=default-,leqno,-boolean"><code>leqno</code></a></td><td style="text-align: center;"><code>boolean</code></td></tr><tr class="odd"><td style="text-align: center;"><a href="https://katex.org/docs/options.html#:~:text=LaTeX-,fleqn,-boolean"><code>fleqn</code></a></td><td style="text-align: center;"><code>boolean</code></td></tr><tr class="even"><td style="text-align: center;"><a href="https://katex.org/docs/options.html#:~:text=package-,throwonerror,-boolean"><code>throw-on-error</code></a></td><td style="text-align: center;"><code>boolean</code></td></tr><tr class="odd"><td style="text-align: center;"><a href="https://katex.org/docs/options.html#:~:text=errorColor-,errorcolor,-string"><code>error-color</code></a></td><td style="text-align: center;"><code>string</code></td></tr><tr class="even"><td style="text-align: center;"><a href="https://katex.org/docs/options.html#:~:text=state-,minrulethickness,-number"><code>min-rule-thickness</code></a></td><td style="text-align: center;"><code>number</code></td></tr><tr class="odd"><td style="text-align: center;"><a href="https://katex.org/docs/options.html#:~:text=true-,maxsize,-number"><code>max-size</code></a></td><td style="text-align: center;"><code>number</code></td></tr><tr class="even"><td style="text-align: center;"><a href="https://katex.org/docs/options.html#:~:text=maxexpand"><code>max-expand</code></a></td><td style="text-align: center;"><code>number</code></td></tr><tr class="odd"><td style="text-align: center;"><a href="https://katex.org/docs/options.html#:~:text=LaTeX-,trust,-boolean"><code>trust</code></a></td><td style="text-align: center;"><code>boolean</code></td></tr></tbody></table><p>不过基本上不需要修改，保持默认即可。</p><h3 id="演示">演示</h3><p>源文件：</p><p><img src="/images/posts/mdbook/katext.png" /></p><p>渲染结果：</p><p><img src="/images/posts/mdbook/katext_2.png" /></p><h2 id="hint">3.2 HINT</h2><p>在gitbook中，可以使用hint来实现一些提示块，在mdbook中，同样也有类似的插件实现这一功能，mdbook-admonish：</p><p>仓库链接：<a href="https://github.com/tommilligan/mdbook-admonish">https://github.com/tommilligan/mdbook-admonish</a></p><h3 id="安装配置-1">安装&amp;配置</h3><p>首先安装该插件：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">cargo <span class="hljs-keyword">install</span> mdbook-admonish<br></code></pre></td></tr></table></figure><p>接下来，在书根目录下运行：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">mdbook-admonish <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p><img src="/images/posts/mdbook/hint.png" /></p><p>运行结束后，你会发现你的book.toml中多了以下内容：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[preprocessor.admonish]</span><br><span class="hljs-attr">command</span> = <span class="hljs-string">&quot;mdbook-admonish&quot;</span><br><span class="hljs-attr">assets_version</span> = <span class="hljs-string">&quot;2.0.2&quot;</span> <span class="hljs-comment"># do not edit: managed by `mdbook-admonish install`</span><br><br><span class="hljs-section">[output]</span><br><br><span class="hljs-section">[output.html]</span><br><span class="hljs-attr">additional-css</span> = [<span class="hljs-string">&#x27;.\mdbook-admonish.css&#x27;</span>]<br></code></pre></td></tr></table></figure><p>同时，根目录下多了一个<code>mdbook-admonish.css</code>文件，说明安装完毕。</p><h3 id="演示-1">演示</h3><p>源代码：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-code">```admonish info</span><br><span class="hljs-code">A beautifully styled message.</span><br><span class="hljs-code">```</span><br><br><br><span class="hljs-code">```admonish warning</span><br><span class="hljs-code">A beautifully styled message.</span><br><span class="hljs-code">```</span><br><br><span class="hljs-code">```admonish danger</span><br><span class="hljs-code">A beautifully styled message.</span><br><span class="hljs-code">```</span><br><br><span class="hljs-code">```admonish example</span><br><span class="hljs-code">A beautifully styled message.</span><br><span class="hljs-code">```</span><br><br><span class="hljs-code">```admonish</span><br><span class="hljs-code">A plain note.</span><br><span class="hljs-code">```</span><br></code></pre></td></tr></table></figure><p>渲染结果：</p><p><img src="/images/posts/mdbook/hint_2.png" /></p><h2 id="pdf导出">3.3 PDF导出</h2><p>所使用的插件为mdbook-pdf，仓库地址：<a href="https://github.com/HollowMan6/mdbook-pdf">https://github.com/HollowMan6/mdbook-pdf</a></p><h3 id="安装配置-2">安装&amp;配置</h3><p>安装：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">cargo <span class="hljs-keyword">install</span> mdbook-pdf<br></code></pre></td></tr></table></figure><p>这里安装的时候需要电脑上有chrome或者edge，如果没有，可以安装一个，或者运行以下指令：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">cargo install mdbook-pdf <span class="hljs-comment">--features fetch</span><br></code></pre></td></tr></table></figure><p>程序会制动下载chromium并编译运行。</p><p>安装完毕后，在<code>book.toml</code>中添加以下内容：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[output.pdf]</span><br><span class="hljs-comment">## Set for auto-retrying if failed to generate PDF.</span><br><span class="hljs-comment"># trying-times = 1</span><br><span class="hljs-comment">## This backend only support latest Chromium based browsers, not Safari and Firefox currently.</span><br><span class="hljs-comment">## If needed, please specify the full path.</span><br><span class="hljs-comment">## If you specify the wrong binary, chances are that there will be a timeout error.</span><br><span class="hljs-comment"># browser-binary-path = &quot;&quot;</span><br><span class="hljs-comment">## Assign the static hosting site url so that relative links outside the book can be fixed.</span><br><span class="hljs-attr">static_site_url</span> = <span class="hljs-string">&quot;https://aye10032.gitbook.io/computernetwork/&quot;</span><br><span class="hljs-comment">## Check Chrome Devtools Protocol Docs for the explanation of the following params:</span><br><span class="hljs-comment">## https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-printToPDF</span><br><span class="hljs-attr">landscape</span> = <span class="hljs-literal">false</span><br><span class="hljs-attr">display-header-footer</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">print-background</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">theme</span> = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">scale</span> = <span class="hljs-number">0.8</span><br><span class="hljs-attr">paper-width</span> = <span class="hljs-number">8</span><br><span class="hljs-attr">paper-height</span> = <span class="hljs-number">10</span><br><span class="hljs-attr">margin-top</span> = <span class="hljs-number">0.5</span><br><span class="hljs-attr">margin-bottom</span> = <span class="hljs-number">0.5</span><br><span class="hljs-attr">margin-left</span> = <span class="hljs-number">0.5</span><br><span class="hljs-attr">margin-right</span> = <span class="hljs-number">0.5</span><br><span class="hljs-attr">page-ranges</span> = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">ignore-invalid-page-ranges</span> = <span class="hljs-literal">false</span><br><span class="hljs-attr">header-template</span> = <span class="hljs-string">&quot;&lt;h3 style=&#x27;font-size:8px; margin-left: 48%&#x27; class=&#x27;title&#x27;&gt;&lt;/h3&gt;&quot;</span><br><span class="hljs-attr">footer-template</span> = <span class="hljs-string">&quot;&lt;p style=&#x27;font-size:10px; margin-left: 48%&#x27;&gt;&lt;span class=&#x27;pageNumber&#x27;&gt;&lt;/span&gt; / &lt;span class=&#x27;totalPages&#x27;&gt;&lt;/span&gt;&lt;/p&gt;&quot;</span><br><span class="hljs-attr">prefer-css-page-size</span> = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="支持目录">支持目录</h3><p>默认渲染出来的pdf是没有目录的，可以使用</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">pip install mdbook<span class="hljs-literal">-pdf-outline</span><br></code></pre></td></tr></table></figure><p>安装mdbook-pdf-outline，并在<code>book.toml</code>中添加：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[output.pdf-outline]</span><br><span class="hljs-attr">like-wkhtmltopdf</span> = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>之后通过<code>mdbook build</code>编译，即可得到PDF文件。</p><h1 id="参考文档">参考文档</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://rust-lang.github.io/mdBook/guide/installation.html">https://rust-lang.github.io/mdBook/guide/installation.html</a> <a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.rust-lang.org/tools/install">https://www.rust-lang.org/tools/install</a> <a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>计算机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在自己的电脑上布置chatGPT</title>
    <link href="/2023/04/11/2023-04-11-chatgpt/"/>
    <url>/2023/04/11/2023-04-11-chatgpt/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>本教程参考官方文档<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[https://github.com/binary-husky/chatgpt_academic](https://github.com/binary-husky/chatgpt_academic)">[1]</span></a></sup>编写，加以一些补充说明。</p><div class="note note-warning">            <p>本文系统为Ubuntu 22，实际操作时请以你的系统为准</p><p>在Ubuntu系统中，以root用户登陆时输入所有命令均无需sudo</p><p>为了适合一般情况，本文在所有命令前添加了sudo</p>          </div><h1 id="安装过程">安装过程</h1><h2 id="一网络环境">一、网络环境</h2><h3 id="安装clash">安装clash</h3><p>由于OpenAI的API对中国大陆是封锁的，因此我们需要一些操作来连上API</p><p>首先安装clash，从<a href="https://github.com/Dreamacro/clash/releases/latest">GitHub</a>下载压缩包，并根据你的系统选择合适的版本进行下载，本教程选择此版本：</p><figure><img src="/images/posts/chatGPT/下载.png" alt="选择合适的版本" /><figcaption aria-hidden="true">选择合适的版本</figcaption></figure><p>接下来将下载好的压缩包上传到服务端，并进行解压：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt -y install gzip<br>gzip -d clash-linux-amd64-v1.14.0.gz<br><span class="hljs-built_in">mkdir</span> clash<br><span class="hljs-built_in">mv</span> clash-linux-amd64-v1.14.0 clash/clash-linux-amd64-v1.14.0<br><span class="hljs-built_in">cd</span> clash<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> 777 clash-linux-amd64-v1.14.0<br></code></pre></td></tr></table></figure><p>这里压缩文件的具体名称依据你自己实际下载的版本进行调整</p><p>下载配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> config<br><span class="hljs-built_in">cd</span> config<br>wget -O config.yaml [订阅链接]<br>wget -O Country.mmdb https://www.sub-speeder.com/client-download/Country.mmdb<br></code></pre></td></tr></table></figure><p>将上述指令中的订阅链接换成你自己的</p><div class="note note-info">            <p>如果在下载Country.mmdb时无法下载，可以从<a href="https://github.com/Dreamacro/maxmind-geoip/releases">GitHub</a>手动下载，再上传到服务器</p>          </div><p>现在，你的目录中应该有如下文件：</p><p><img src="/images/posts/chatGPT/目录结构1.png" /></p><p>你可以尝试运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./clash-linux-amd64-v1.14.0 -d config/<br></code></pre></td></tr></table></figure><p>如果成功出现类似以下日志，说明运行成功：</p><p><img src="/images/posts/chatGPT/运行成功.png" /></p><h3 id="安装clash-dashboard">安装clash dashboard</h3><p>这是一个可视化WEB界面，可以进行一些节点切换等操作</p><p>首先下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/Dreamacro/clash-dashboard.git<br><span class="hljs-built_in">cd</span> clash-dashboard<br>git checkout -b gh-pages origin/gh-pages<br></code></pre></td></tr></table></figure><p>接下来进行配置：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">cd ../config/<br>nano config.yaml<br></code></pre></td></tr></table></figure><p>默认情况下，你的配置文件应该类似于这样：</p><p><img src="/images/posts/chatGPT/配置文件1.png" /></p><p>与UI相关的有三处需要修改，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">port:</span> <span class="hljs-number">7890</span><br><span class="hljs-attr">socks-port:</span> <span class="hljs-number">7891</span><br><span class="hljs-attr">redir-port:</span> <span class="hljs-number">7892</span><br><span class="hljs-attr">allow-lan:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">mode:</span> <span class="hljs-string">rule</span><br><span class="hljs-attr">log-level:</span> <span class="hljs-string">info</span><br><span class="hljs-attr">external-controller:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">:9090</span> <span class="hljs-comment"># 访问的端口号</span><br><span class="hljs-attr">external-ui:</span> <span class="hljs-string">../clash-dashboard</span> <span class="hljs-comment"># 新增一行，内容为clash dashboard所在路径</span><br><span class="hljs-attr">secret:</span> <span class="hljs-string">&#x27;114514&#x27;</span> <span class="hljs-comment"># 登录密码</span><br></code></pre></td></tr></table></figure><p>保存之后即可再次启动clash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./clash-linux-amd64-v1.14.0 -d config/<br></code></pre></td></tr></table></figure><p>此时访问服务器IP:9090/ui，即可看到如下界面：</p><p><img src="/images/posts/chatGPT/初始WEB.png" /></p><p>将host改为你现在所访问的来源IP，密钥填入刚刚配置信息内你设定的密钥，点击添加-确定，即可</p><div class="note note-info">            <p>例如，你的公网IP是180.101.50.242（这个实际上是百度），那么你就在Host里面填上180.101.50.242</p><p>而假设你是通过局域网IP 192.168.2.4访问的，那么就在Host里面填上192.168.2.4</p><p>不同的IP访问，每次都要重新填一遍</p>          </div><p>理论上，你就可以看到类似如下的界面你可以进行测速以及节点选择等等：</p><p><img src="/images/posts/chatGPT/WEB.png" /></p><div class="note note-warning">            <p>由于OpenAI会对一些来源的IP进行封号，这里建议不要选择香港的IP，美国日本的都行</p>          </div><h3 id="设置开机启动">设置开机启动</h3><p>新建配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nano /etc/systemd/system/clash.service<br></code></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=Clash daemon, A rule-based proxy in Go.<br><span class="hljs-attr">After</span>=network.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Type</span>=simple<br><span class="hljs-attr">User</span>=root<br><span class="hljs-attr">ExecStart</span>=/root/clash/clash-linux-amd64-v1.<span class="hljs-number">14.0</span> -d /root/clash/config<br><span class="hljs-attr">Restart</span>=<span class="hljs-literal">on</span>-failure<br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>其中ExecStart这一行，将两个路径换成你的，必须要是绝对路径</p>          </div><p>接下来启动并设置为开机运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl start clash.service<br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> clash.service<br></code></pre></td></tr></table></figure><h2 id="二安装chatgpt_academic">二、安装chatgpt_academic</h2><h3 id="下载和配置">下载和配置</h3><p>首先退回到根目录（或者你喜欢的什么目录），下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/binary-husky/chatgpt_academic.git<br><span class="hljs-built_in">cd</span> chatgpt_academic<br></code></pre></td></tr></table></figure><p>编辑config_private.py：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> config.py config_private.py<br>nano config.py<br></code></pre></td></tr></table></figure><p>文件里面注释很详细，你只需要修改API_KEY和proxies等几处信息即可，改完长这样：</p><p><img src="/images/posts/chatGPT/chat配置文档.png" /></p><p>图中红框内是改动的部分</p><ul><li>API_KEY：你所申请的密钥，注意保密</li><li>USE_PROXY：改成True</li><li>proxies：改成使用http协议，端口号为clash的http代理端口</li><li>WEB_PORT：访问网页端的端口号，改个你自己喜欢的</li></ul><p>clash的代理端口可以从配置文件或WEB UI查看和修改：</p><figure><img src="/images/posts/chatGPT/端口1.png" alt="/clash/config/config.yaml" /><figcaption aria-hidden="true">/clash/config/config.yaml</figcaption></figure><p><img src="/images/posts/chatGPT/端口2.png" /></p><h3 id="安装依赖">安装依赖</h3><p>如果你的服务器上没有，首先安装python3：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install python3-dev<br></code></pre></td></tr></table></figure><p>接下来安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 -m pip install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/<br></code></pre></td></tr></table></figure><p>安装完毕之后，尝试运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 main.py<br></code></pre></td></tr></table></figure><p>访问即可看到界面</p><p><img src="/images/posts/chatGPT/成功界面.png" /></p><h3 id="设置登陆密码">设置登陆密码</h3><div class="note note-warning">            <p>如果是部署在公网，建议加上这一步，本地服务器则没必要</p>          </div><p>首先还是编辑<code>chatgpt_academic/config.py</code>，修改最后一行，添加用户名和密码：</p><p><img src="/images/posts/chatGPT/用户名和密码.png" /></p><p>同时，修改<code>chatgpt_academic/main.py</code>，将最后一句话修改为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">demo.queue(concurrency_count=CONCURRENT_COUNT).launch(server_name=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, share=<span class="hljs-literal">False</span>, server_port=PORT, auth=AUTHENTICATION) <br></code></pre></td></tr></table></figure><p>此时再次运行并访问，即可看到登陆界面：</p><p><img src="/images/posts/chatGPT/登录.png" /></p><h2 id="三配置nginx反向代理">三、配置nginx反向代理</h2><p>首先安装nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install nginx<br></code></pre></td></tr></table></figure><p>之后编辑nginx配置文件，位于<code>/etc/nginx/sites-enabled/</code>下，建议以你的域名为文件名，例如chat.domain.com，内容如下：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">upstream my_chataca &#123;<br>    <span class="hljs-comment"># 这里配置负载均衡策略</span><br>    ip_hash; <span class="hljs-comment"># 如果使用负载均衡，建议使用ip_hash</span><br>    <span class="hljs-comment"># 假设本项目运行的端口为1919</span><br>    server 127.0.0.1<span class="hljs-function">:1919</span> max_fails=3 fail_timeout=10;<br>&#125;<br><br>server &#123;<br>        listen 80;<br>        server_name chat.domain.com;   <span class="hljs-comment"># 请填入你设定的域名</span><br>        access_log off;<br>        error_log off;<br>        location / &#123;<br>                proxy_pass http:<span class="hljs-string">//127.0.0.1</span><span class="hljs-function">:1919</span>;   <span class="hljs-comment"># 注意端口号</span><br>                proxy_redirect off;<br>                proxy_<span class="hljs-keyword">set</span>_header Host $host;<br>                proxy_<span class="hljs-keyword">set</span>_header X-Real-IP $remote_addr;<br>                proxy_<span class="hljs-keyword">set</span>_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>                proxy_<span class="hljs-keyword">set</span>_header Upgrade $http_upgrade;         <span class="hljs-comment"># Websocket配置</span><br>                proxy_<span class="hljs-keyword">set</span>_header Connection $connection_upgrade;                <span class="hljs-comment">#Websocket配置</span><br>                proxy_max_temp_file_size 0;<br>                client_max_body_size 10m;<br>                client_body_buffer_size 128k;<br>                proxy_<span class="hljs-keyword">connect</span>_timeout 90;<br>                proxy_send_timeout 90;<br>                proxy_read_timeout 90;<br>                proxy_buffer_size 4k;<br>                proxy_buffers 4 32k;<br>                proxy_busy_buffers_size 64k;<br>                proxy_temp_file_write_size 64k;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>同时，编辑<code>/etc/nginx/sites-enabled/nginx.config</code>，在http块中添加以下内容：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs perl">http &#123;<br>    <span class="hljs-keyword">map</span> <span class="hljs-variable">$http_upgrade</span> <span class="hljs-variable">$connection_upgrade</span> &#123;<br>        default upgrade;<br>        <span class="hljs-string">&#x27;&#x27;</span>      <span class="hljs-keyword">close</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上是不使用SSL的方案，使用SSL同理。</p><p>之后重载nginx，即可通过域名访问界面了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nginx -s reload<br></code></pre></td></tr></table></figure><h2 id="四配置latex环境">四、配置latex环境</h2><p>由于部分高级函数需要latex支持，因此若想使用这部分功能，需要额外进行latex环境的配置。</p><h3 id="安装texlive2">安装Texlive<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[https://tug.org/texlive/quickinstall.html](https://tug.org/texlive/quickinstall.html)">[2]</span></a></sup></h3><p>首先回到根目录，并下载安装脚本并解压：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span><br>wget https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet/install-tl-unx.tar.gz<br>tar -xzf install-tl-unx.tar.gz<br></code></pre></td></tr></table></figure><p>解压后的文件夹名为<code>install-tl-</code>加上一串日期，进入此文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> install-tl-20231028/<br></code></pre></td></tr></table></figure><p>接下来开始安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> ./install-tl -repository https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet/<br></code></pre></td></tr></table></figure><p>此时会弹出菜单界面：</p><p><img src="/images/posts/chatGPT/latex安装.png" /></p><p>我们输入C并回车，取消掉一些不需要的语言，节省安装空间：</p><p><img src="/images/posts/chatGPT/latex选项.png" /></p><p>输入对应的字母即可选择/取消选中对应的项，之后<strong>输入R回到主菜单</strong></p><p>然后输入I开始安装：</p><p><img src="/images/posts/chatGPT/开始安装.png" /></p><p><img src="/images/posts/chatGPT/安装完毕.png" /></p><h3 id="设置环境变量">设置环境变量</h3><p>可以看到上面的日志中要求我们添加环境变量：</p><blockquote><p>Add /usr/local/texlive/2023/texmf-dist/doc/man to MANPATH. Add /usr/local/texlive/2023/texmf-dist/doc/info to INFOPATH.</p><p>Most importantly, add /usr/local/texlive/2023/bin/x86_64-linux to your PATH for current and future sessions.</p></blockquote><p>因此我们进行编辑：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano ~/.bashrc<br></code></pre></td></tr></table></figure><p>在文本末尾添加以下三行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PATH=/usr/local/texlive/2023/bin/x86_64-linux:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> MANPATH=/usr/local/texlive/2023/texmf-dist/doc/man:<span class="hljs-variable">$MANPATH</span><br><span class="hljs-built_in">export</span> INFOPATH=/usr/local/texlive/2023/texmf-dist/doc/info:<span class="hljs-variable">$INFOPATH</span><br></code></pre></td></tr></table></figure><p>不过此时，使用sudo权限时并不能调用相关指令，因此还需要额外设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> visudo<br></code></pre></td></tr></table></figure><p>将路径加入到图中的位置即可，并用冒号与原来的内容分开：</p><p><img src="/images/posts/chatGPT/环境配置.png" /></p><p>保存退出之后即可。</p><p><img src="/images/posts/chatGPT/环境变量2.png" /></p><h3 id="添加字体">添加字体</h3><p>文档中要求将以下字体添加到Latex的字体目录<code>/usr/local/texlive/2023/texmf-dist/fonts/truetype</code>中：</p><ul><li>MSYHBD.TTC</li><li>SIMLI.TTF</li><li>msyh.ttc</li><li>simfang.ttf</li><li>simkai.ttf</li><li>SIMYOU.TTF</li><li>simhei.ttf</li><li>simsun.ttc</li></ul><p>我这里整理了一份字体文件在GitHub上，可以下载使用：<a href="https://github.com/Aye10032/MyFonts.git">https://github.com/Aye10032/MyFonts.git</a></p><p>上传到相应目录之后，使用以下指令刷新使字体生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">texhash<br></code></pre></td></tr></table></figure><h1 id="参考文档">参考文档</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/binary-husky/chatgpt_academic">https://github.com/binary-husky/chatgpt_academic</a> <a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://tug.org/texlive/quickinstall.html">https://tug.org/texlive/quickinstall.html</a> <a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>计算机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新版群星舰船搭配</title>
    <link href="/2023/02/24/2023-02-24-stellaris-ship2/"/>
    <url>/2023/02/24/2023-02-24-stellaris-ship2/</url>
    
    <content type="html"><![CDATA[<h1 id="一改动相关">一、改动相关</h1><h2 id="作战电脑">1、作战电脑</h2><h3 id="改变">改变</h3><ul><li>其它基本维持原状</li><li>炮击、航母增加了在敌舰进入<strong>最长武器射程一半</strong>的距离时后撤的逻辑</li><li>除了主宰，后撤时都不能开炮</li></ul><h3 id="建议">建议</h3><ul><li>传统T43思路可以考虑使用线列电脑</li><li>炮击脑优于航母脑</li><li>龙都是炮击脑，打龙最好不要用驱逐</li><li>关于新增的鱼雷脑<ul><li>打架不如炮击</li><li>堵门可以用</li></ul></li></ul><h2 id="移速和射程">2、移速和射程</h2><h3 id="移速">移速</h3><ul><li>既要防止太慢导致开不出炮，也要防止太快导致刹不住车</li><li>可以用最顶级，但是不要用暗物质</li></ul><h3 id="射程">射程</h3><ul><li>只能说很重要，要尽可能远</li><li>短射程可能会被长射程风筝到死</li></ul><h1 id="二护盾配置相关">二、护盾配置相关</h1><h2 id="护盾">1、护盾</h2><h3 id="基础数值">基础数值</h3><ul><li>船体值大砍</li><li>护卫：300→200</li><li>驱逐：800→600</li><li>泰坦：10000→15000</li><li>防御平台：2000→3000</li></ul><h3 id="防御槽位">防御槽位</h3><ul><li>红蓝甲砍废了，只有在确定对面有双穿和迫不得已需要暴兵的时候使用</li><li>装甲增强，且针对AI的火风暴表现亮眼</li><li>护盾由于导弹、鱼雷的存在性价比不高</li></ul><h3 id="配装思路">配装思路</h3><p>总结：提升装甲、船体的占比，降低护盾的占比</p><ul><li><strong>早期护卫</strong>：两盾一甲</li><li><strong>中期驱逐</strong>：四甲两盾</li><li><strong>后期战列</strong><ul><li>资源不足时：全红甲</li><li>满配：护甲为主，船体、护盾为辅</li></ul></li></ul><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/images/posts/stellaris_ship2/护卫.png" alt="早期护卫" /></div><div class="group-image-wrap"><img src="/images/posts/stellaris_ship2/驱逐.png" alt="中期驱逐舰" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/images/posts/stellaris_ship2/便宜战列.png" alt="便宜战列" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/images/posts/stellaris_ship2/满配战列护甲.png" alt="满配战列" /></div></div></div><p>具体护盾、船体的配比看打什么</p><h2 id="a槽">2、A槽</h2><ul><li>雷巡、护卫速度拉满，带加力燃烧室</li><li>护盾硬化意义不大</li><li>战列舰不建议带加力燃烧室，容易速度过快</li></ul><h1 id="三武器配置相关">三、武器配置相关</h1><h2 id="各个武器特点">1、各个武器特点</h2><h3 id="鱼雷">鱼雷</h3><ul><li>按照船体大小百分比增伤，打战列很痛</li><li>射程较近、适合堵门</li><li>适合敌人：早战、打龙、灰蛊</li><li><strong>不适合纯拿来打AI，AI小船多</strong></li><li>配置上，雷击艇和鱼雷巡洋舰都可以</li></ul><h3 id="导弹">导弹</h3><ul><li>M槽导弹碾压S槽</li><li>命中低、会被点防拦截</li><li>作为工具为鱼雷创造输出空间，<strong>和鱼雷搭配使用</strong></li></ul><h3 id="p槽武器">P槽武器</h3><ul><li>高射炮拦截飞机，同时输出也很高</li><li>点防拦截导弹和鱼雷</li><li><strong>总结</strong><ul><li>前期带高射炮，当输出</li><li>后期战列带点防，小船依然带高射炮</li></ul></li></ul><h3 id="能量武器">能量武器</h3><ul><li><strong>激光</strong>：前期配合高射炮用用</li><li><strong>等离子加农炮</strong>：在有破盾武器的配合情况下全面优于激光</li><li><strong>裂解炮</strong>：近身缠斗时打小船很猛，不知道带啥带它就完事了</li></ul><blockquote><p>裂解炮+鱼雷基本上不存在短板，可以打一切</p></blockquote><ul><li>电弧还是永远的神</li></ul><h3 id="动能武器">动能武器</h3><ul><li><strong>动能火炮</strong>：目前L槽唯一选择</li><li><strong>机关炮</strong>：没啥用</li><li><strong>舰载机</strong>：大部分情况没啥用，但是打恶魔很有用，虫群也可以带</li></ul><h3 id="野怪武器">野怪武器</h3><ul><li><strong>采矿激光</strong>：挺强，前期可以带</li><li><strong>天云闪电、能量虹吸器等等</strong>：虫群的特定流派很强，其它没啥用</li><li><strong>太虚光束</strong>：废物</li></ul><h1 id="四配置参考">四、配置参考</h1><h2 id="前期">1、前期</h2><ul><li><strong>武器</strong><ul><li>高射炮</li><li>激光</li></ul></li><li><strong>护甲</strong>：两盾一甲</li></ul><figure><img src="/images/posts/stellaris_ship2/前期驱逐舰.png" alt="前期驱逐舰" /><figcaption aria-hidden="true">前期驱逐舰</figcaption></figure><h2 id="中期">2、中期</h2><ul><li><strong>武器</strong><ul><li>高射炮</li><li>裂解炮</li></ul></li><li><strong>护甲</strong>：两甲一盾</li></ul><figure><img src="/images/posts/stellaris_ship2/中期护卫舰.png" alt="中期护卫舰" /><figcaption aria-hidden="true">中期护卫舰</figcaption></figure><figure><img src="/images/posts/stellaris_ship2/中期驱逐舰.png" alt="中期驱逐舰" /><figcaption aria-hidden="true">中期驱逐舰</figcaption></figure><h2 id="后期">3、后期</h2><h3 id="普通战列海">普通战列海</h3><ul><li><strong>武器</strong><ul><li>电弧</li><li>裂解炮</li><li>点防</li><li>飞机</li><li>M导弹</li></ul></li><li><strong>护盾</strong>：四盾两甲，再生舰体</li></ul><figure><img src="/images/posts/stellaris_ship2/后期战列.png" alt="后期战列" /><figcaption aria-hidden="true">后期战列</figcaption></figure><h3 id="天灾堕落战列舰t34">天灾、堕落战列舰（T34）</h3><ul><li><strong>武器</strong><ul><li>电弧</li><li>适当带点飞机</li><li>L动能大炮</li></ul></li><li><strong>护甲</strong>：全水晶甲</li></ul><figure><img src="/images/posts/stellaris_ship2/T34.png" alt="T34" /><figcaption aria-hidden="true">T34</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>游戏</category>
      
      <category>群星</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>游戏</tag>
      
      <tag>群星</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搓个MOSS家人们</title>
    <link href="/2023/01/27/2023-02-17-moss/"/>
    <url>/2023/01/27/2023-02-17-moss/</url>
    
    <content type="html"><![CDATA[<h1 id="一线序">一、线序</h1><h2 id="inch-oled屏幕">1、0.91 inch OLED屏幕</h2><ul><li>黄：VCC</li><li>蓝：GND</li><li>紫：SDA</li><li>绿：SCL</li></ul><h2 id="inch-lcd屏幕">2、1.54 inch LCD屏幕</h2><ul><li>紫：VCC</li><li>白：GND</li><li>绿：DIN</li><li>橙：CLK</li><li>黄：CS</li><li>蓝：DC</li><li>棕：RST</li><li>灰：BL</li></ul><h1 id="二录制素材">二、录制素材</h1><p>随便找个录音软件，录制三段关键词的音频，之后使用ffmpeg转成指定格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -i input_audio.mp3 -acodec pcm_s16le -ar 16000 -ac 1 record1.wav<br>ffmpeg -i input_audio.mp3 -acodec pcm_s16le -ar 16000 -ac 1 record2.wav<br>ffmpeg -i input_audio.mp3 -acodec pcm_s16le -ar 16000 -ac 1 record3.wav<br></code></pre></td></tr></table></figure><h1 id="三问问ai">三、问问AI</h1><h2 id="arduino相关">1、arduino相关</h2><p>编写arduino程序，从串口读入一个十六进制数，将其转化为二进制并以数组的形式存储每一位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// 定义变量</span><br>byte hex;<br>byte binary[<span class="hljs-number">8</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span><br>&#123;<br>  Serial.begin(<span class="hljs-number">9600</span>); <span class="hljs-comment">// 初始化串口</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-keyword">if</span>(Serial.available() &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// 如果串口有可读数据</span><br>  &#123;<br>    hex = Serial.read(); <span class="hljs-comment">// 读取一个字节的数据</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">8</span>; i++) <span class="hljs-comment">// 将十六进制数转换为二进制数，并存入数组</span><br>    &#123;<br>      binary[i] = (hex&gt;&gt;i)&amp;<span class="hljs-number">0x01</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">7</span>; i&gt;=<span class="hljs-number">0</span>; i--) <span class="hljs-comment">// 输出二进制数</span><br>    &#123;<br>      Serial.print(binary[i]);<br>    &#125;<br>    Serial.println(); <span class="hljs-comment">// 换行</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>屏幕滚动显示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//定义屏幕参数</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TFT_DC 9</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TFT_CS 10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TFT_RST 8</span><br><br><span class="hljs-comment">//定义字体</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FONT_SIZE_SMALL 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FONT_SIZE_MEDIUM 2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FONT_SIZE_LARGE 3</span><br><br><span class="hljs-comment">//定义滚动方向</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SCROLL_UP 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SCROLL_DOWN 1</span><br><br><span class="hljs-comment">//定义滚动速度</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SCROLL_SLOW 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SCROLL_MEDIUM 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SCROLL_FAST 2</span><br><br><span class="hljs-comment">//定义滚动字符串</span><br>String scroll_str = <span class="hljs-string">&quot;Arduino ST7789滚动显示屏&quot;</span>;<br><br><span class="hljs-comment">//定义滚动字符串长度</span><br><span class="hljs-type">int</span> str_len = scroll_str.length();<br><br><span class="hljs-comment">//定义滚动位置</span><br><span class="hljs-type">int</span> scroll_pos = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//定义滚动方向</span><br><span class="hljs-type">int</span> scroll_dir = SCROLL_UP;<br><br><span class="hljs-comment">//定义滚动速度</span><br><span class="hljs-type">int</span> scroll_speed = SCROLL_SLOW;<br><br><span class="hljs-comment">//定义字体大小</span><br><span class="hljs-type">int</span> font_size = FONT_SIZE_MEDIUM;<br><br><span class="hljs-comment">//定义滚动延时</span><br><span class="hljs-type">int</span> scroll_delay = <span class="hljs-number">200</span>;<br><br><span class="hljs-comment">//定义屏幕实例</span><br>Adafruit_ST7789 tft = Adafruit_ST7789(TFT_CS, TFT_DC, TFT_RST);<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-comment">//初始化屏幕</span><br>  tft.initR(INITR_BLACKTAB);<br>  tft.fillScreen(ST77XX_BLACK);<br>  tft.setRotation(<span class="hljs-number">3</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-comment">//设置字体大小</span><br>  tft.setTextSize(font_size);<br><br>  <span class="hljs-comment">//滚动显示字符串</span><br>  scrollText(scroll_str, scroll_pos, scroll_dir, scroll_speed);<br><br>  <span class="hljs-comment">//更新滚动位置</span><br>  scroll_pos++;<br>  <span class="hljs-keyword">if</span> (scroll_pos &gt; str_len * font_size * <span class="hljs-number">6</span>)<br>  &#123;<br>    scroll_pos = <span class="hljs-number">0</span>;<br>  &#125;<br><br>  <span class="hljs-comment">//延时</span><br>  delay(scroll_delay);<br>&#125;<br><br><span class="hljs-comment">//滚动显示字符串</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">scrollText</span><span class="hljs-params">(String str, <span class="hljs-type">int</span> pos, <span class="hljs-type">int</span> dir, <span class="hljs-type">int</span> speed)</span><br>&#123;<br>  <span class="hljs-comment">//计算滚动位置</span><br>  <span class="hljs-type">int</span> x_pos = pos;<br>  <span class="hljs-keyword">if</span> (dir == SCROLL_DOWN)<br>  &#123;<br>    x_pos = -pos;<br>  &#125;<br><br>  <span class="hljs-comment">//根据滚动速度设置延时</span><br>  <span class="hljs-type">int</span> delay_time = <span class="hljs-number">200</span>;<br>  <span class="hljs-keyword">if</span> (speed == SCROLL_MEDIUM)<br>  &#123;<br>    delay_time = <span class="hljs-number">150</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (speed == SCROLL_FAST)<br>  &#123;<br>    delay_time = <span class="hljs-number">100</span>;<br>  &#125;<br><br>  <span class="hljs-comment">//计算滚动字符串长度</span><br>  <span class="hljs-type">int</span> str_len = str.length();<br><br>  <span class="hljs-comment">//滚动显示字符串</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; str_len; i++)<br>  &#123;<br>    <span class="hljs-comment">//设置滚动位置</span><br>    tft.setCursor(x_pos, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">//获取滚动字符</span><br>    <span class="hljs-type">char</span> c = str.charAt(i);<br><br>    <span class="hljs-comment">//显示滚动字符</span><br>    tft.print(c);<br><br>    <span class="hljs-comment">//更新滚动位置</span><br>    x_pos += font_size * <span class="hljs-number">6</span>;<br>    <span class="hljs-keyword">if</span> (x_pos &gt; tft.width())<br>    &#123;<br>      x_pos = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//延时</span><br>    delay(delay_time);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>unity 粒子效果笔记</title>
    <link href="/2023/01/21/2023-01-21-Unity-Particle/"/>
    <url>/2023/01/21/2023-01-21-Unity-Particle/</url>
    
    <content type="html"><![CDATA[<h1 id="一各个模块">一、各个模块</h1><h2 id="主模块">1、主模块</h2><div class="note note-info">            <p>与粒子初始状态有关</p>          </div><table><thead><tr class="header"><th style="text-align: center;">名称</th><th style="text-align: center;">作用</th><th style="text-align: center;">其它</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Duration</td><td style="text-align: center;">整个粒子效果的运行时间</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Looping</td><td style="text-align: center;">是否循环播放</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Prewarm</td><td style="text-align: center;">预加载（粒子不用先从<br>无到有发射出来）</td><td style="text-align: center;">只有Looping为true时有效</td></tr><tr class="even"><td style="text-align: center;">Start Delay</td><td style="text-align: center;">发射延迟，将<strong>整个粒子运行时间</strong>向后推迟</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Start Lifetime</td><td style="text-align: center;">单个粒子的初始生命周期</td><td style="text-align: center;">会被其它设置覆盖</td></tr><tr class="even"><td style="text-align: center;">Start Speed</td><td style="text-align: center;">粒子的初始发射速度</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">3D Start Size</td><td style="text-align: center;"><strong>单个粒子</strong>的初始缩放，高级的<br/>Start Size，可以调整三个轴向上的缩放</td><td style="text-align: center;">与Start Size互斥</td></tr><tr class="even"><td style="text-align: center;">Start Size</td><td style="text-align: center;"><strong>单个粒子</strong>的初始缩放</td><td style="text-align: center;">会被其它设置覆盖</td></tr><tr class="odd"><td style="text-align: center;">3D Start Rotation</td><td style="text-align: center;"><strong>单个粒子</strong>的初始旋转角度，高级的<br/>Start Rotation，可以调整三个轴向上的旋转</td><td style="text-align: center;">与Start Rotation互斥</td></tr><tr class="even"><td style="text-align: center;">Start Rotation</td><td style="text-align: center;"><strong>单个粒子</strong>的初始旋转角度</td><td style="text-align: center;">会被其他设置覆盖</td></tr><tr class="odd"><td style="text-align: center;">Flip Rotation</td><td style="text-align: center;">粒子的翻转，取值在0~1之间，<br>代表有百分之几的粒子翻转</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Start Color</td><td style="text-align: center;">粒子的初始颜色</td><td style="text-align: center;">只有render中材质为<br>粒子材质时才会生效</td></tr><tr class="odd"><td style="text-align: center;">Gravity Modifier</td><td style="text-align: center;">粒子的重力</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Simulation Space</td><td style="text-align: center;">粒子的参考坐标</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Simulation Speed</td><td style="text-align: center;">整个粒子系统的更新速度</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Delta Time</td><td style="text-align: center;">粒子系统是否受到Time类中时间<br>流速控制的影响</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Scaling Mode</td><td style="text-align: center;">粒子的缩放模式</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Play on Awake</td><td style="text-align: center;">粒子效果在创建时就进行播放<br>（不选中则需要相关操作来激活效果）</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Emitter Velocity</td><td style="text-align: center;">使用什么组件来计算粒子速度</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Max Particles</td><td style="text-align: center;">当前系统内粒子数量的最大值</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Auto Random Seed</td><td style="text-align: center;">是否设置random的种子</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Stop Action</td><td style="text-align: center;">粒子结束后的操作</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Culling Mode</td><td style="text-align: center;">当粒子不在摄像机内时的操作</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Ring Buffer Mode</td><td style="text-align: center;">与粒子消除逻辑相关</td><td style="text-align: center;"></td></tr></tbody></table><h3 id="start-size">Start Size</h3><ul><li><strong>Constant</strong>：固定大小</li><li><strong>Curve</strong>：大小为与生命周期有关的曲线</li><li><strong>Random Between Two Constant</strong>：在固定值之间随机</li><li><strong>Random Between Two Curve</strong>：在不同函数关系之间随机</li></ul><h3 id="start-color">Start Color</h3><ul><li><p><strong>Color</strong>：单一颜色</p></li><li><p><strong>Gradient</strong>：可以选择渐变色，则初始颜色会在渐变色之间<strong>顺序生成</strong></p></li><li><p><strong>Random Between Two Colors</strong>：在两个颜色中随机</p></li><li><p><strong>Random Between Two Gradient</strong>：在两个渐变色中随机</p></li><li><p><strong>Random Color</strong>：可以选择渐变色，则初始颜色会在渐变色之间<strong>随机生成</strong></p></li></ul><h3 id="simulation-space">Simulation Space</h3><ul><li><strong>Local</strong>：影响所有粒子（整坨粒子一起动）</li><li><strong>World</strong>：只影响当前发出的粒子（尾迹效果）</li><li><strong>Custom</strong>：绑定在某个物体上</li></ul><h3 id="scaling-mode">Scaling Mode</h3><ul><li><strong>Hierarchy</strong>：与父类一同缩放</li><li><strong>Local</strong>：忽略父类，对<strong>单个粒子</strong>和shape同时进行缩放</li><li><strong>Shape</strong>：仅对shape进行缩放</li></ul><h3 id="stop-action">Stop Action</h3><ul><li><strong>Disable</strong>：禁用</li><li><strong>Destroy</strong>：销毁</li><li><strong>Callback</strong>：触发回调事件</li></ul><h3 id="culling-mode">Culling Mode</h3><ul><li><strong>Automatic</strong>：如果是单次播放则不管，若果是循环播放则暂停</li><li><strong>Pause And Catch-up</strong>：暂停渲染但是继续计算位置，当再次出现时继续渲染</li><li><strong>Pause</strong>：暂停</li><li><strong>Always Simulate</strong>：不暂停</li></ul><h3 id="ring-buffer-mode">Ring Buffer Mode</h3><ul><li><strong>Disabled</strong>：按照生命周期删除粒子</li><li><strong>Pause Until Replaced、Loop Until Replaced</strong>：不删除粒子，而是按照粒子最大数量进行新老替换等操作</li></ul><h2 id="emission-模块">2、Emission 模块</h2><div class="note note-info">            <p>与粒子发射有关</p>          </div><table><thead><tr class="header"><th style="text-align: center;">名称</th><th style="text-align: center;">作用</th><th style="text-align: center;">备注</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Rate Over Time</td><td style="text-align: center;">每秒发射多少个粒子</td><td style="text-align: center;">与Rate Over Distance可以混用</td></tr><tr class="even"><td style="text-align: center;">Rate Over Distance</td><td style="text-align: center;">每移动一米发射多少个粒子</td><td style="text-align: center;">与Rate Over Time可以混用</td></tr></tbody></table><h3 id="bursts">Bursts</h3><p>设置爆发例子</p><table><thead><tr class="header"><th style="text-align: center;">名称</th><th style="text-align: center;">作用</th><th style="text-align: center;">备注</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Time</td><td style="text-align: center;">爆发的时间</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Count</td><td style="text-align: center;">粒子的数量</td><td style="text-align: center;">存活时间由Start Lifetime决定</td></tr><tr class="odd"><td style="text-align: center;">Cycles</td><td style="text-align: center;">在Duration内进行多少轮发射</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Interval</td><td style="text-align: center;">周期之间的延迟</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Probability</td><td style="text-align: center;">每轮进行发射的概率</td><td style="text-align: center;"></td></tr></tbody></table><h2 id="shape-模块">3、Shape 模块</h2><div class="note note-info">            <p>与粒子发射体积和发射方向相关</p>          </div><table><thead><tr class="header"><th style="text-align: center;">名称</th><th style="text-align: center;">作用</th><th style="text-align: center;">备注</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Shape</td><td style="text-align: center;">发射体积的形状</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Texture</td><td style="text-align: center;">纹理，固定处于发射形状的基底</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Position</td><td style="text-align: center;">粒子系统的位置</td><td style="text-align: center;">与transform等效</td></tr><tr class="even"><td style="text-align: center;">Rotation</td><td style="text-align: center;">粒子系统的旋转</td><td style="text-align: center;">会影响Align to Direction<br>的生效，transform不会</td></tr><tr class="odd"><td style="text-align: center;">Scale</td><td style="text-align: center;">粒子系统的缩放</td><td style="text-align: center;">与transform等效</td></tr><tr class="even"><td style="text-align: center;">Align to Direction</td><td style="text-align: center;">粒子的方向根据初始方向前进</td><td style="text-align: center;">可以被干扰项覆盖</td></tr><tr class="odd"><td style="text-align: center;">Randomize Direction</td><td style="text-align: center;">将粒子的方向随机</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Spherize Direction</td><td style="text-align: center;">粒子是否被约束在发射体形状内</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Randomize Position</td><td style="text-align: center;">相对于发射点的随机偏移</td><td style="text-align: center;"></td></tr></tbody></table><h3 id="shape">Shape</h3><h4 id="spherehemisphere">Sphere、Hemisphere</h4><p>球体、半球体</p><ul><li><strong>Radius</strong>：半径</li><li><strong>Radius Thickness</strong>：壁厚，0~1之<ul><li>0从外轮廓发射</li><li>1从中心发射</li></ul></li><li><strong>Arc</strong>：弧角度<ul><li><strong>Mode</strong>：发射模式</li><li><strong>Spread</strong></li></ul></li></ul><figure><img src="/images/posts/unityParticle/arc.png" alt="Arc=30" /><figcaption aria-hidden="true">Arc=30</figcaption></figure><h4 id="cone">Cone</h4><p>圆台</p><p><img src="/images/posts/unityParticle/cone.png" /></p><ul><li><strong>Angle</strong>：圆锥的角度</li><li><strong>Radius</strong>：半径</li><li><strong>Radius Thickness</strong>：壁厚，0~1之<ul><li>0从外轮廓发射</li><li>1从中心发射</li></ul></li><li><strong>Arc</strong>：弧角度<ul><li><strong>Mode</strong>：发射模式</li><li><strong>Spread</strong></li></ul></li><li><strong>Emit Form</strong>：粒子从锥底发射还是从整个锥体中发射</li></ul><h4 id="mesh">Mesh</h4><p>从网格发送</p><p><img src="/images/posts/unityParticle/mesh.png" /></p><ul><li><strong>type</strong>：发射模式，与mode类似</li><li><strong>Mesh</strong>：网格材质</li><li><strong>Signal Material</strong>：是否从一个mesh的特定材质发射</li><li><strong>Use Material Color</strong>：是否将材质顶点颜色赋值给粒子</li><li><strong>Normal Offset</strong>：粒子发射平面与网格的法线方向偏移量</li></ul><h3 id="texture">Texture</h3><ul><li><strong>Clip Channel</strong>：过滤使用的通道</li><li><strong>Clip Threshold</strong>：过滤阈值</li><li><strong>Color affects Particles</strong></li><li><strong>Alpha affect Particles</strong></li><li><strong>Bilinear Filtering</strong>：对小尺寸纹理进行优化</li></ul><h2 id="renderer-模块">4、Renderer 模块</h2><div class="note note-info">            <p>渲染相关</p>          </div><table><thead><tr class="header"><th style="text-align: center;">名称</th><th style="text-align: center;">作用</th><th style="text-align: center;">备注</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Render Mode</td><td style="text-align: center;">渲染模式</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Normal Direction</td><td style="text-align: center;">与照明模式相关</td><td style="text-align: center;">Billboard的默认朝向受<br>Render Alignment影响</td></tr><tr class="odd"><td style="text-align: center;">Material</td><td style="text-align: center;">材质</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Trial Material</td><td style="text-align: center;">拖尾材质</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Sort Mode</td><td style="text-align: center;">粒子之间的排序模式</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Sort Fudge</td><td style="text-align: center;">两个粒子系统之间的排序</td><td style="text-align: center;">小的在前面</td></tr><tr class="odd"><td style="text-align: center;">Min Particle Size</td><td style="text-align: center;">粒子渲染的最小大小<br/>（占屏幕的百分比大小）</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Max Particle Size</td><td style="text-align: center;">粒子渲染的最大大小<br>（占屏幕的百分比大小）</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Render Alignment</td><td style="text-align: center;">渲染对齐方向</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Flip</td><td style="text-align: center;">翻转</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Allow Roll</td><td style="text-align: center;">在VR中有用</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Pivot</td><td style="text-align: center;">粒子渲染相对于中心点的偏移</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Visualize Pivot</td><td style="text-align: center;">显示粒子的中心点</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Masking</td><td style="text-align: center;">遮罩</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Apply Active Color Space</td><td style="text-align: center;">与光照有关</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Custom Vertex Streams</td><td style="text-align: center;">自定义顶点流</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Cast Shadows</td><td style="text-align: center;">是否投射阴影</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Shadow Bias</td><td style="text-align: center;">粒子上是否会有别的粒子的阴影</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Motion Vectors</td><td style="text-align: center;">是否用运动矢量跟踪粒子系统</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Sorting Layer ID</td><td style="text-align: center;">与排序相关</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Order In Layer</td><td style="text-align: center;">与排序相关</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Light Probes</td><td style="text-align: center;">光照探针</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Reflection Probes</td><td style="text-align: center;">反射探针</td><td style="text-align: center;"></td></tr></tbody></table><h3 id="render-mode">Render Mode</h3><ul><li><strong>Billboard</strong>：二维粒子材质，平面永远朝向摄像机</li><li><strong>Stretched Billboard</strong>：拉伸的材质</li><li><strong>Horizontal Billboard</strong>：二位粒子材质，永远平行于地面</li><li><strong>Vertical Billboard</strong>：二位粒子材质，永远面向摄像机且垂直于地面</li><li><strong>Mesh</strong>：三维材质</li></ul><h3 id="sort-mode">Sort Mode</h3><ul><li><strong>None</strong></li><li><strong>By Distance</strong>：按照距离排序，近的会覆盖远的</li><li><strong>Oldest in Front</strong>：旧的会覆盖新的</li><li><strong>Youngest in Front</strong>：新的会覆盖旧的</li></ul><h3 id="render-alignment">Render Alignment</h3><ul><li><strong>View</strong>：朝向相机</li><li><strong>World</strong>：永远朝向世界坐标</li><li><strong>Local</strong>：朝向局部坐标方向，受transform中的rotation影响</li><li><strong>Facing</strong>：面向游戏对象的位置</li><li><strong>Velocity</strong>：面向当前速度的方向</li></ul><h3 id="masking">Masking</h3><ul><li><strong>No Masking</strong>：无遮罩</li><li><strong>Visible Inside Mask</strong>：在遮罩范围内显示</li><li><strong>Visible Outside Mask</strong>：在遮罩范围外显示</li></ul><h2 id="noise-模块">5、Noise 模块</h2><div class="note note-info">            <p>噪声信号相关</p>          </div><table><thead><tr class="header"><th style="text-align: center;">名称</th><th style="text-align: center;">作用</th><th style="text-align: center;">备注</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Separate Axes</td><td style="text-align: center;">在各个轴上设置噪声的影响程度</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Strength</td><td style="text-align: center;">粒子的波动强度</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Frequency</td><td style="text-align: center;">粒子发生波动的频率</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Scroll Speed</td><td style="text-align: center;">粒子波动的变化速度</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Damping</td><td style="text-align: center;">Strength与Frequency是否<br>成正比</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Octaves</td><td style="text-align: center;">叠加几层噪声图</td><td style="text-align: center;">开销较大</td></tr><tr class="odd"><td style="text-align: center;">Octave Multiplier</td><td style="text-align: center;">强度的衰减</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Octave Scale</td><td style="text-align: center;">频率的衰减</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Quality</td><td style="text-align: center;">波动噪声图的质量</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Remap</td><td style="text-align: center;">将最终的噪声值重新映射</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Remap Curve</td><td style="text-align: center;">生命周期与噪声值的关系曲线</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Position Amount</td><td style="text-align: center;">噪波值是否影响位置</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Rotation Amount</td><td style="text-align: center;">噪波值是否影响角度</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Size Amount</td><td style="text-align: center;">噪波值是否影响缩放</td><td style="text-align: center;"></td></tr></tbody></table><h2 id="lifetime-相关模块">6、lifetime 相关模块</h2><h3 id="velocity-over-lifetime">Velocity Over Lifetime</h3><div class="note note-info">            <p>调节粒子的速度矢量</p>          </div><table><thead><tr class="header"><th style="text-align: center;">名称</th><th style="text-align: center;">作用</th><th style="text-align: center;">备注</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Linear</td><td style="text-align: center;">各轴向上的速度</td><td style="text-align: center;">可以设定时间-速度曲线</td></tr><tr class="even"><td style="text-align: center;">Space</td><td style="text-align: center;">速度的参考系</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Orbital</td><td style="text-align: center;">设定粒子绕坐标轴旋转</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Offset</td><td style="text-align: center;">设定例子对坐标轴的便宜</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Radial</td><td style="text-align: center;">粒子远离的速度</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Speed Monitor</td><td style="text-align: center;">对上述参数的乘积倍率</td><td style="text-align: center;"></td></tr></tbody></table><h4 id="space">Space</h4><ul><li><strong>Local</strong>：局部坐标系，受transfor中设置影响</li><li><strong>World</strong>：世界坐标，固定不变</li></ul><h3 id="limit-velocity-over-lifetime">Limit Velocity Over Lifetime</h3><div class="note note-info">            <p>控制粒子的最大速度</p>          </div><table><thead><tr class="header"><th style="text-align: center;">名称</th><th style="text-align: center;">作用</th><th style="text-align: center;">备注</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Separate Axes</td><td style="text-align: center;">各轴向上的速度</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Speed</td><td style="text-align: center;">粒子在生命周期内的最大速度</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Dampen</td><td style="text-align: center;">当前速度衰减到最大数的的参数</td><td style="text-align: center;">当超过Speed时生效</td></tr><tr class="even"><td style="text-align: center;">Drag</td><td style="text-align: center;">空气阻力</td><td style="text-align: center;">与其他变量独立作用</td></tr><tr class="odd"><td style="text-align: center;">Multiply By Size</td><td style="text-align: center;">尺寸更大的粒子受到阻力影响更大</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Multiply By Velocity</td><td style="text-align: center;">速度更大的粒子受到阻力影响更大</td><td style="text-align: center;"></td></tr></tbody></table><h3 id="force-over-lifetime">Force Over Lifetime</h3><div class="note note-info">            <p>生命周期中力对粒子作用的影响</p>          </div><table><thead><tr class="header"><th style="text-align: center;">名称</th><th style="text-align: center;">作用</th><th style="text-align: center;">备注</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">X、Y、Z</td><td style="text-align: center;">各个轴向上施加的力</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Space</td><td style="text-align: center;">参考系</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Randomize</td><td style="text-align: center;">在每一帧上进行随机</td><td style="text-align: center;">仅当X、Y、Z存在多个选择<br>时有用</td></tr></tbody></table><h3 id="color-over-lifetime">Color Over Lifetime</h3><div class="note note-info">            <p>粒子颜色随生命周期变化相关</p>          </div><p>渐变色的色条，上面的滑块调整透明的，下面的滑块调整颜色</p><h3 id="color-by-speed">Color By Speed</h3><div class="note note-info">            <p>粒子颜色随速度变化相关</p>          </div><table><thead><tr class="header"><th style="text-align: center;">名称</th><th style="text-align: center;">作用</th><th style="text-align: center;">备注</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Color</td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Speed</td><td style="text-align: center;">速度与颜色的映射范围</td><td style="text-align: center;"></td></tr></tbody></table><h3 id="size-over-lifetime">Size Over Lifetime</h3><div class="note note-info">            <p>粒子尺寸随生命周期变化相关</p>          </div><table><thead><tr class="header"><th style="text-align: center;">名称</th><th style="text-align: center;">作用</th><th style="text-align: center;">备注</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Separate Axes</td><td style="text-align: center;">指定缩放坐标轴</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Size</td><td style="text-align: center;">速度——时间曲线</td><td style="text-align: center;"></td></tr></tbody></table><h3 id="size-by-speed">Size By Speed</h3><div class="note note-info">            <p>粒子尺寸随速度变化相关</p>          </div><table><thead><tr class="header"><th style="text-align: center;">名称</th><th style="text-align: center;">作用</th><th style="text-align: center;">备注</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Separate Axes</td><td style="text-align: center;">指定缩放坐标轴</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Size</td><td style="text-align: center;">速度——时间曲线</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Speed</td><td style="text-align: center;">速度与颜色的映射范围</td><td style="text-align: center;"></td></tr></tbody></table><h3 id="rotation-over-lifetime">Rotation Over Lifetime</h3><div class="note note-info">            <p>粒子角度随生命周期变化相关</p>          </div><table><thead><tr class="header"><th style="text-align: center;">名称</th><th style="text-align: center;">作用</th><th style="text-align: center;">备注</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Separate Axes</td><td style="text-align: center;">指定旋转坐标轴</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Angular Velocity</td><td style="text-align: center;">角速度——时间曲线</td><td style="text-align: center;"></td></tr></tbody></table><h3 id="rotation-by-speed">Rotation By Speed</h3><div class="note note-info">            <p>粒子角度随速度变化相关</p>          </div><table><thead><tr class="header"><th style="text-align: center;">名称</th><th style="text-align: center;">作用</th><th style="text-align: center;">备注</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Separate Axes</td><td style="text-align: center;">指定旋转坐标轴</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Angular Velocity</td><td style="text-align: center;">角速度——时间曲线</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Speed Range</td><td style="text-align: center;">速度与角速度的映射范围</td><td style="text-align: center;"></td></tr></tbody></table><h2 id="collision-模块">7、Collision 模块</h2><div class="note note-info">            <p>粒子物理碰撞相关</p>          </div><table><thead><tr class="header"><th style="text-align: center;">名称</th><th style="text-align: center;">作用</th><th style="text-align: center;">备注</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Type</td><td style="text-align: center;">碰撞的类型</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Mode</td><td style="text-align: center;">碰撞的游戏模式</td><td style="text-align: center;">仅type为world时有效</td></tr><tr class="odd"><td style="text-align: center;">Visualization</td><td style="text-align: center;">可视化显示类型</td><td style="text-align: center;">仅type为planes时有效</td></tr><tr class="even"><td style="text-align: center;">Scale Plane</td><td style="text-align: center;">可视化的缩放</td><td style="text-align: center;">仅type为planes时有效</td></tr><tr class="odd"><td style="text-align: center;">Dampen</td><td style="text-align: center;">粒子碰撞后损失的速度比例</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Bounce</td><td style="text-align: center;">粒子碰撞后反弹的速度衰减</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Lifetime Loss</td><td style="text-align: center;">碰撞后生命周期的衰减</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Min Kill Speed</td><td style="text-align: center;">消失的最低速度阈值</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Max Kill Speed</td><td style="text-align: center;">消失的最大速度阈值</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Radius Scale</td><td style="text-align: center;">碰撞箱大小</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Collision Quality</td><td style="text-align: center;">碰撞质量</td><td style="text-align: center;">仅type为world时有效</td></tr><tr class="even"><td style="text-align: center;">Collides With</td><td style="text-align: center;">与哪些图层发生碰撞</td><td style="text-align: center;">仅type为world时有效</td></tr><tr class="odd"><td style="text-align: center;">Max Collision Shapes</td><td style="text-align: center;">粒子最多可以与多少个面发生碰撞</td><td style="text-align: center;">仅type为world时有效</td></tr><tr class="even"><td style="text-align: center;">Enable Dynamic Colliders</td><td style="text-align: center;">粒子是否与刚体发生碰撞</td><td style="text-align: center;">仅type为world时有效</td></tr><tr class="odd"><td style="text-align: center;">Collider Force</td><td style="text-align: center;">粒子与刚体碰撞时的作用力</td><td style="text-align: center;">仅type为world，且<br>Enable Dynamic Colliders时有效</td></tr><tr class="even"><td style="text-align: center;">Multiply by Collision Angle</td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Multiply by Particle Speed</td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Multiply by Particle Size</td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Send Collision Message</td><td style="text-align: center;">发送碰撞事件</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Visualize Bounds</td><td style="text-align: center;">可视化例子碰撞箱</td><td style="text-align: center;"></td></tr></tbody></table><h3 id="type">Type</h3><ul><li><strong>Planes</strong>：可以指定碰撞对象</li><li><strong>World</strong>：会与所有带有碰撞箱的物体发生碰撞</li></ul><h3 id="visualization">Visualization</h3><ul><li><strong>Solid</strong>：平面</li><li><strong>Grid</strong>：网格</li></ul><h2 id="trigger-模块">8、Trigger 模块</h2><div class="note note-info">            <p>与触发相关</p>          </div><table><thead><tr class="header"><th style="text-align: center;">名称</th><th style="text-align: center;">作用</th><th style="text-align: center;">备注</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Colliders</td><td style="text-align: center;">碰撞体对象</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Inside</td><td style="text-align: center;">在内部时</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Outside</td><td style="text-align: center;">在外部时</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Enter</td><td style="text-align: center;">进入时</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Exit</td><td style="text-align: center;">离开时</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Radius Scale</td><td style="text-align: center;">碰撞箱大小</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Visualize Bounds</td><td style="text-align: center;">可视化例子碰撞箱</td><td style="text-align: center;"></td></tr></tbody></table><h3 id="事件类型">事件类型</h3><ul><li><strong>Kill</strong>：杀死</li><li><strong>Ignore</strong>：忽略</li><li><strong>Callback</strong>：回调函数</li></ul><h2 id="light-模块">9、Light 模块</h2><div class="note note-info">            <p>与粒子光效有关的模块</p>          </div><table><thead><tr class="header"><th style="text-align: center;">名称</th><th style="text-align: center;">作用</th><th style="text-align: center;">备注</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Light</td><td style="text-align: center;">光照效果</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Ratio</td><td style="text-align: center;">粒子有光效的概率</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Random Distribution</td><td style="text-align: center;">Ratio是否随机生效</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Use Particle Color</td><td style="text-align: center;">是否使用粒子的颜色</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Size Affects Range</td><td style="text-align: center;">光照范围是否受粒子尺寸影响</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Alpha Affects Intensity</td><td style="text-align: center;">光照强度是否受透明度影响</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Range Multiplier</td><td style="text-align: center;">光照范围变化曲线</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Intensity Multiplier</td><td style="text-align: center;">光照强度变化曲线</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Maximum Lights</td><td style="text-align: center;">最大光强</td><td style="text-align: center;"></td></tr></tbody></table><h2 id="trails-模块">10、Trails 模块</h2><div class="note note-info">            <p>与粒子尾迹有关的模块</p>          </div><table><thead><tr class="header"><th style="text-align: center;">名称</th><th style="text-align: center;">作用</th><th style="text-align: center;">备注</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Mode</td><td style="text-align: center;">尾迹模式</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Ratio</td><td style="text-align: center;">粒子有尾迹的比例</td><td style="text-align: center;">仅当Particle Mode时生效</td></tr><tr class="odd"><td style="text-align: center;">Lifetime</td><td style="text-align: center;">尾迹的生命周期（粒子生命周期的几倍）</td><td style="text-align: center;">仅当Particle Mode时生效</td></tr><tr class="even"><td style="text-align: center;">Minimum Vertex Distance</td><td style="text-align: center;">轨迹曲线顶点的采样距离</td><td style="text-align: center;">仅当Particle Mode时生效</td></tr><tr class="odd"><td style="text-align: center;">World Space</td><td style="text-align: center;">轨迹是否跟随粒子源移动而移动</td><td style="text-align: center;">仅当Particle Mode时生效</td></tr><tr class="even"><td style="text-align: center;">Die With Particle</td><td style="text-align: center;">尾迹是否随粒子消亡而消亡</td><td style="text-align: center;">仅当Particle Mode时生效</td></tr><tr class="odd"><td style="text-align: center;">Ribbon Count</td><td style="text-align: center;">丝带数量</td><td style="text-align: center;">仅当Ribbon Mode时生效</td></tr><tr class="even"><td style="text-align: center;">Split Sub Emitter Ribbons</td><td style="text-align: center;">与子发射器相关设置</td><td style="text-align: center;">仅当Ribbon Mode时生效</td></tr><tr class="odd"><td style="text-align: center;">Attach Ribbons to Transform</td><td style="text-align: center;">丝带是否连接到发射原点</td><td style="text-align: center;">仅当Ribbon Mode时生效</td></tr><tr class="even"><td style="text-align: center;">Texture Mode</td><td style="text-align: center;">纹理映射模式</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Size Affects Width</td><td style="text-align: center;">轨迹宽度是否受粒子宽度影响</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Size Affects Lifetime</td><td style="text-align: center;">轨迹生命周期是否受粒子尺寸影响</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">Inherit Particle Color</td><td style="text-align: center;">轨迹是否继承粒子颜色</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Color Over Lifetime</td><td style="text-align: center;">颜色——时间曲线</td><td style="text-align: center;">仅轨迹不继承粒子颜色时生效</td></tr><tr class="odd"><td style="text-align: center;">Width Over Trail</td><td style="text-align: center;">宽度——长度曲线</td><td style="text-align: center;">仅轨迹宽度不受粒子宽度影响时生效</td></tr><tr class="even"><td style="text-align: center;">Color Over Lifetime</td><td style="text-align: center;">颜色——长度曲线</td><td style="text-align: center;">仅轨迹不继承粒子颜色时生效</td></tr><tr class="odd"><td style="text-align: center;">Generate Lighting Data</td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">Shadow Bias</td><td style="text-align: center;">阴影偏差</td><td style="text-align: center;"></td></tr></tbody></table><h3 id="mode">Mode</h3><ul><li><strong>Particle</strong>：每个粒子一条尾迹</li><li><strong>Ribbon</strong>：粒子之间连成一条</li></ul><h3 id="texture-mode">Texture Mode</h3><ul><li><strong>Stretch</strong>：拉伸</li><li><strong>Tile</strong>：平铺</li><li><strong>Repeat per Segment</strong>：按照宽度平铺</li><li><strong>Distribute per Segment</strong>：按照宽度拉伸</li></ul><h1 id="二相关技巧">二、相关技巧</h1><h2 id="不选中也持续播放粒子特效">不选中也持续播放粒子特效</h2><p>将Simulate Layers改为Everything</p><p><img src="/images/posts/unityParticle/粒子特效显示.png" /></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>unity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>teamspeak服务器搭建指南</title>
    <link href="/2022/11/20/2022-11-20-teamspeak/"/>
    <url>/2022/11/20/2022-11-20-teamspeak/</url>
    
    <content type="html"><![CDATA[<h1 id="一前言">一、前言</h1><p>首先搬上teamspeak的官网：<a href="https://www.teamspeak.com/en/">https://www.teamspeak.com/en/</a></p><p>先来介绍一下teamspeak吧，简单的来说，他是一款老牌的开源VoIP工具软件，可以进行语音通话，在线聊天，文件共享等等功能，不过呢，最大的特点还是它的可定制性强，以及非常低的带宽占用和计算机资源占用，下面的话我就以Ubuntu 20系统为例，简单的讲一下怎样去搭建一个属于你自己的语音服务器。</p><iframe src="//player.bilibili.com/player.html?aid=41828207&amp;bvid=BV1Vt411t7f5&amp;cid=73444569&amp;page=1" scrolling="yes" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="500px"></iframe><h1 id="二前期准备">二、前期准备</h1><p>首先，我们先做好前期的准备工作。你要准备的有：</p><ul><li>一台服务器，拥有公网IP</li><li>下载好对应服务器系统的teamspeak服务端文件</li><li>下载好teamspeak客户端文件</li><li>能够远程链接你的服务器以及向服务器上传文件的工具，例如putty，Xshell，winscp或MobaXterm等</li></ul><p>讲一下服务端的下载，进入teamspeak的官网之后，点击Downloads并选择server选项卡</p><p><img src="/images/posts/teamspeak/服务器下载1.png" /></p><p>并选择与你服务器系统相适应的服务端进行下载。我这里因为服务器安装的是64位Ubuntu系统，因此选择LINUX系统的SERVER 64-BIT服务端文件进行下载：</p><p><img src="/images/posts/teamspeak/服务器下载2.png" /></p><p>之后的操作也全都是在Linux系统下进行的操作，winserver版本更简单，下载下来直接双击运行唯一的一个exe文件就行了，这里不再赘述。</p><p>下载好服务端后，客户端的下载仍然差不多，选择client选项卡，下载你客户端系统相应的文件即可。</p><p><img src="/images/posts/teamspeak/客户端.png" /></p><p>当然你也可以下新版客户端，好看一点，用起来大差不差</p><figure><img src="/images/posts/teamspeak/客户端2.png" alt="在beta选项卡下载新版客户端" /><figcaption aria-hidden="true">在beta选项卡下载新版客户端</figcaption></figure><p>新版客户端长这样：</p><figure><img src="/images/posts/teamspeak/客户端3.png" alt="新版客户端" /><figcaption aria-hidden="true">新版客户端</figcaption></figure><h1 id="三安装配置服务端">三、安装配置服务端</h1><h2 id="设置配置文件">1、设置配置文件</h2><p>在准备好文件之后，就开始安装服务端了，</p><p>首先升级系统更新依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br></code></pre></td></tr></table></figure><p>一般来说，我们都是以roo权限登陆的服务器，但是由于teamspeak是不能用这一用户运行的，因此我们需要新建一个用户来运行teamspeak服务端文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">useradd teamspeak -m<br>passwd teamspeak<br></code></pre></td></tr></table></figure><p>第二个指令之后会要求你输入新建的这个用户的密码并再次确认，跟着走就行了。</p><p>接下来，将之前准备好的服务端文件上传至服务器并解压，同时重命名文件夹（我这里是直接上传至根目录）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -xvf teamspeak3-server_linux_amd64-3.13.7.tar.bz2<br><span class="hljs-built_in">mv</span> teamspeak3-server_linux_amd64 teamspeak3<br></code></pre></td></tr></table></figure><p>注意，这里服务端的版本号可能随着更新而变化，使用的时候不要直接复制</p><p>由于我们是将用teamspeak这一用户来运行服务端文件，因此我们还要把它拷贝给该用户并设置权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> -R teamspeak3 /home/teamspeak/<br><span class="hljs-built_in">chown</span> -R teamspeak:teamspeak /home/teamspeak/teamspeak3/<br></code></pre></td></tr></table></figure><p>接下来就是运行服务端文件了，首先切换到我们刚才新建的用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">su - teamspeak<br></code></pre></td></tr></table></figure><p>接下来进入服务端文件所在的目录（也就是我们之前重命名并拷贝过来的那一个）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> teamspeak3<br></code></pre></td></tr></table></figure><p>接下来先不急着运行，我们先来创建一个新文件。如果这里我们不这么做，那么在运行时服务端会报错，因为它没有读到这个授权文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> .ts3server_license_accepted<br></code></pre></td></tr></table></figure><p>在授权文件建立好了之后，我们就可以运行服务端了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./ts3server_startscript.sh start<br></code></pre></td></tr></table></figure><p>运行之后，你可以看到这样一串信息，那么恭喜你，服务端运行成功了</p><p><img src="/images/posts/teamspeak/成功信息.png" /></p><p>把这一段信息复制下来备用，之后Ctrl +c终止服务即可</p><h2 id="打开防火墙">2、打开防火墙</h2><p>现在的服务器一般来说防火墙直接在面板的策略组里面放行就行了，总共放行三个端口：</p><ul><li>9987/udp</li><li>10011/tcp</li><li>30033/tcp</li></ul><p>如果你服务器上还有防火墙程序例如，可以再手动添加端口放行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start firewalld<br>firewall-cmd --zone=public --add-port=9987/udp --permanent<br>firewall-cmd --zone=public --add-port=10011/tcp --permanent<br>firewall-cmd --zone=public --add-port=30033/tcp --permanent<br>firewall-cmd --reload<br></code></pre></td></tr></table></figure><h1 id="四设置服务开机启动">四、设置服务开机启动</h1><p>首先还是先切换回root用户(会要求输入root用户密码)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">su -<br></code></pre></td></tr></table></figure><p>然后我们来新建一个自定义服务文件ts3.service（这里编辑器你用vim也行）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano /lib/systemd/system/ts3.service<br></code></pre></td></tr></table></figure><p>该配置文件内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">[Unit]<br>Description=Teamspeak server<br>After=network.target<br>[Service]<br>WorkingDirectory=/home/teamspeak/teamspeak3<br>User=teamspeak<br>Group=teamspeak<br>Type=forking<br>ExecStart=/home/teamspeak/teamspeak3/ts3server_startscript.sh start inifile=ts3server.ini<br>ExecStop=/home/teamspeak/teamspeak3/ts3server_startscript.sh stop<br>PIDFile=/home/teamspeak/teamspeak3/ts3server.pid<br>RestartSec=15<br>Restart=always<br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>注意：这里的WorkingDirectory，ExecStart，ExecStop， PIDFile这四个参数是你服务端文件的绝对路径，如果你之前文件夹的路径跟我不一样，这里记得修改。</p><p>之后保存退出并重启服务器即可。</p><p>在服务文件编辑完毕之后，我们就可以使用systemctl指令来启动teamspeak服务端并令其开机自启：</p><p>启动服务端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start ts3<br></code></pre></td></tr></table></figure><p>关闭服务端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl stop ts3<br></code></pre></td></tr></table></figure><p>开机自启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> ts3<br></code></pre></td></tr></table></figure><p>查看服务端运行信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl status ts3<br></code></pre></td></tr></table></figure><p>至此，服务端配置完毕，开始运行。</p><h1 id="五报错处理">五、报错处理</h1><p>但是别急，有可能你运行<code>systemctl status ts3</code>看到的是这样的信息：</p><p><img src="/images/posts/teamspeak/失败信息.png" /></p><p>这时候我们还是先停止服务器运行，并重启服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">disable</span> ts3<br>systemctl stop ts3<br>reboot<br></code></pre></td></tr></table></figure><p>接下来切到teamspeak用户，进入TS服务器目录，然后运行这条指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">su - teamspeak<br><span class="hljs-built_in">cd</span> teamspeak3<br>./ts3server_minimal_runscript.sh createinifile=1<br></code></pre></td></tr></table></figure><p>看到差不多这样的信息，就说明成功了</p><p><img src="/images/posts/teamspeak/成功信息2.png" /></p><p>此时CTRL+C退出，并重新回到root，再次赋予开机启动并开启服务器，查看状态应该可以看到如下信息</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nsis">su -<br><span class="hljs-params">system</span>ctl enable ts3<br><span class="hljs-params">system</span>ctl start ts3<br><span class="hljs-params">system</span>ctl status ts3<br></code></pre></td></tr></table></figure><p><img src="/images/posts/teamspeak/成功信息3.png" /></p><p>好了，服务器开启成功。</p><h1 id="六客户端连接配置">六、客户端连接、配置</h1><p>安装客户端完毕之后，打开并选择connections--connect，输入服务端IP，即可连接上服务器，第一个连接服务端的用户会被要求输入密钥</p><p><img src="/images/posts/teamspeak/服务器初始化.png" /></p><figure><img src="/images/posts/teamspeak/服务器初始化1.png" alt="输入密钥" /><figcaption aria-hidden="true">输入密钥</figcaption></figure><p>接下来你就可以对服务器进行自己的配置啦，如果不想把服务器公开，记得在设置里面取消勾选这个：</p><p><img src="/images/posts/teamspeak/取消公开.png" /></p><p>上面几张图是TS5客户端的截图，如果你用的是老版客户端，界面可能会不太一样，但是大同小异。</p><p>那么本文到此结束，谢谢。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FF14房屋监控插件食用指南</title>
    <link href="/2022/08/17/2022-08-17-FF14-house-trigger/"/>
    <url>/2022/08/17/2022-08-17-FF14-house-trigger/</url>
    
    <content type="html"><![CDATA[<h1 id="一act设置">一、ACT设置</h1><h2 id="导入插件">1、导入插件</h2><p>首先安装Triggernometrty，并且导入群文件中的<code>房屋监控.xml</code>文件。</p><p>导入后是一个触发组，长这样：</p><p><img src="/images/posts/ff14house/image-20220817100105998.png" /></p><p>接下来，一步一步进行参数设置。</p><h2 id="设置房屋id">2、设置房屋ID</h2><h3 id="获取id">2.1 获取ID</h3><p>由于每个房子的这个东西的ID是唯一的，因此本触发器使用这玩意来判断你进的是不是自己的房子：</p><p><img src="/images/posts/ff14house/image-20220817100434577.png" /></p><p>首先，勾选上<strong>显示房屋ID</strong>这个触发器：</p><p><img src="/images/posts/ff14house/image-20220817100547824.png" /></p><p>接下来选中“进入房屋”，之后在任意频道说一句“<em>测试</em>”：</p><p><img src="/images/posts/ff14house/image-20220817100713891.png" /></p><p>此时ACT会跳出来一个弹窗，显示你这个玩意的ID：</p><p><img src="/images/posts/ff14house/image-20220817100836190.png" /></p><p>那么后面这一串就是我们要使用的ID了，把它记下来</p><h3 id="修改参数">2.2 修改参数</h3><p>接下来修改以下地方，把它换成你自己房子的这串ID：</p><p><img src="/images/posts/ff14house/image-20220817101108381.png" /></p><p>至此，这部分的设置完毕，可以取消勾选显示房屋ID这个触发器了。</p><h2 id="设置区域限制">3、设置区域限制</h2><h3 id="获取id-1">3.1 获取ID</h3><p>接下来是对触发器的工作区域进行限定，仅让它在你的房区工作。首先，还是勾选上<strong>显示区域ID和名称</strong>这个触发器：</p><p><img src="/images/posts/ff14house/image-20220817101435840.png" /></p><p>使用方法跟刚才一样，只需要在任意频道说一句“<em>测试</em>”就行了，我们总共需要两个区域的名称和ID，分别是你的大区和房子里面：</p><figure><img src="/images/posts/ff14house/image-20220817101835964.png" alt="房区ID" /><figcaption aria-hidden="true">房区ID</figcaption></figure><figure><img src="/images/posts/ff14house/image-20220817101927231.png" alt="房间内部" /><figcaption aria-hidden="true">房间内部</figcaption></figure><p>记住这两个相关参数，接下来进行修改</p><h3 id="修改参数-1">3.2 修改参数</h3><p>首先修改<code>房屋-触发器条件</code>，将下面这条的这个文字改成你自己的私人小屋对应文字：</p><p><img src="/images/posts/ff14house/image-20220817102300258.png" /></p><p>接下来右键编辑“房屋监视”分组，在最终幻想XIV选项卡中勾选上这个复选框，然后把下面对话框里面的两个数字换成你刚才获取到的两个区域ID：</p><p><img src="/images/posts/ff14house/image-20220817102505574.png" /></p><p>至此，ACT部分的修改全部完成。</p><div class="note note-warning">            <p>以上所有修改完了记得点一下保存更改！</p>          </div><h1 id="二bot绑定">二、BOT绑定</h1><p>首先，在配置好插件之后，至少进入一次你的房屋，API会自动向数据库内添加信息。</p><p>之后在群内，发送 “.ff14 绑定 [你的ID]”（中间使用空格分开）：</p><p><img src="/images/posts/ff14house/image-20220817102945897.png" /></p><p>接下来BOT会默认每天进行查询，并对10天内会被拆除的房屋进行警告。</p><p>或者你也可以手动查询，使用指令“.ff14 房屋”：</p><p><img src="/images/posts/ff14house/image-20220817103119887.png" /></p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>游戏</category>
      
      <category>FF14</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>游戏</tag>
      
      <tag>FF14</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Barotrauma潜渊症服务器搭建笔记</title>
    <link href="/2022/06/23/2022-06-23-Barotrauma-server-setup/"/>
    <url>/2022/06/23/2022-06-23-Barotrauma-server-setup/</url>
    
    <content type="html"><![CDATA[<iframe src="//player.bilibili.com/player.html?aid=385242548&amp;bvid=BV1wZ4y1i7Za&amp;cid=754041897&amp;page=1" scrolling="yes" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="500px"></iframe><h1 id="一安装steamcmd">一、安装SteamCMD</h1><h2 id="前置检查">1、前置检查</h2><p>首先检查你的源，确保后面加上了non-free：</p><p><img src="/images/posts/barotrauma/non-free.png" /></p><p>如果没有，加上就行了。</p><h2 id="新建用户">2、新建用户</h2><p>由于steamCDM不推荐直接在root权限下运行，因此我们需要新建一个用户，我这里建立名为<code>steam</code>的用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> useradd -m steam<br></code></pre></td></tr></table></figure><p>为这个账户设定密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> passwd steam <br></code></pre></td></tr></table></figure><p>下面，我们为这个用户赋予使用root指令的权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nano /etc/sudoers<br></code></pre></td></tr></table></figure><p>在原有的root下面加上你新建的用户名，后面直接照抄root的格式：</p><p><img src="/images/posts/barotrauma/rooter.png" /></p><p>按<code>CTRL+O</code>保存，<code>CTRL+X</code>退出。</p><p>接下来，切换到我们最新建立的这个账户，并进入它的根目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -u steam -s<br><span class="hljs-built_in">cd</span> /home/steam<br></code></pre></td></tr></table></figure><p>后续的操作全部在这个账户以及这个目录下，牢记。</p><h2 id="安装">3、安装</h2><p>如果你的服务器是64位系统，那么执行以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> add-apt-repository multiverse<br><span class="hljs-built_in">sudo</span> dpkg --add-architecture i386<br><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install lib32gcc-s1 steamcmd <br></code></pre></td></tr></table></figure><p>如果是32位系统，那么直接安装就可以了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install steamcmd<br></code></pre></td></tr></table></figure><h1 id="二安装barotrauma">二、安装Barotrauma</h1><h2 id="安装文件">1、安装文件</h2><p>首先我们键入<code>steamcmd</code>进入steamCMD。</p><p><img src="/images/posts/barotrauma/steam-cmd.png" /></p><p>第一次运行之后会下载一些必要的文件，我们在它下载完成之后输入quit退出，之后开始下载潜渊症：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">steamcmd +force_install_dir /home/steam/barotrauma-server +login anonymous +app_update 1026340 validate +<span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><p>这里稍作解释：</p><ul><li>force_install_dir：指定下载路径，可以根据你的需要修改</li><li>login anonymous：潜渊症需要匿名登陆之后才能下载</li><li>app_update 1026340 validate：即下载潜渊症本体</li></ul><h2 id="创建steamclient.so的symbolic-link">2、创建steamclient.so的Symbolic link</h2><p>这里的路径是相对于当前根目录而言的，即在/home/steam目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ~/.steam/sdk64/<br><span class="hljs-built_in">ln</span> -s ~/barotrauma-server/linux64/steamclient.so ~/.steam/sdk64/steamclient.so<br></code></pre></td></tr></table></figure><h2 id="修改配置文件">3、修改配置文件</h2><p>实际上一共有三个文件需要修改，首先是服务器配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano barotrauma-server/serversettings.xml<br></code></pre></td></tr></table></figure><p>这个文件中首先要修改的是以下五个参数：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">serversettings</span></span><br><span class="hljs-tag">    <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> //<span class="hljs-attr">服务器名字</span></span><br><span class="hljs-tag">    <span class="hljs-attr">public</span>=<span class="hljs-string">&quot;false&quot;</span>  //<span class="hljs-attr">服务器是否可见</span></span><br><span class="hljs-tag">    <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;&quot;</span> //<span class="hljs-attr">服务器密码</span></span><br><span class="hljs-tag">    <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;27015&quot;</span> //<span class="hljs-attr">服务器登录端口</span></span><br><span class="hljs-tag">    <span class="hljs-attr">queryport</span>=<span class="hljs-string">&quot;27016&quot;</span> //<span class="hljs-attr">服务器查询端口</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-attr">serversettings</span>&gt;</span>        <br></code></pre></td></tr></table></figure><p>配置文件全部的具体内容网上有很多，这里也列出一份<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[如何在Linux上部署潜渊症服务器](https://www.bilibili.com/read/cv13816065)">[1]</span></a></sup>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">serversettings</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> //<span class="hljs-attr">服务器名字</span></span><br><span class="hljs-tag">  <span class="hljs-attr">public</span>=<span class="hljs-string">&quot;true&quot;</span>  //<span class="hljs-attr">服务器是否可见</span></span><br><span class="hljs-tag">  <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;&quot;</span> //<span class="hljs-attr">服务器密码</span></span><br><span class="hljs-tag">  <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;27015&quot;</span> //<span class="hljs-attr">服务器登录端口</span></span><br><span class="hljs-tag">  <span class="hljs-attr">queryport</span>=<span class="hljs-string">&quot;27016&quot;</span> //<span class="hljs-attr">服务器查询端口</span></span><br><span class="hljs-tag">  <span class="hljs-attr">playstyle</span>=<span class="hljs-string">&quot;Serious&quot;</span> //<span class="hljs-attr">服务器游戏风格</span> <span class="hljs-attr">Serious</span>=<span class="hljs-string">严肃</span> <span class="hljs-attr">Casual</span>=<span class="hljs-string">休闲</span> <span class="hljs-attr">Roleplay</span>=<span class="hljs-string">角色扮演</span> <span class="hljs-attr">Rampage</span>=<span class="hljs-string">暴乱</span> <span class="hljs-attr">SomethingDifferent</span>=<span class="hljs-string">mod服</span></span><br><span class="hljs-tag">  <span class="hljs-attr">maxplayers</span>=<span class="hljs-string">&quot;16&quot;</span> //<span class="hljs-attr">服务器最大玩家人数</span></span><br><span class="hljs-tag">  <span class="hljs-attr">enableupnp</span>=<span class="hljs-string">&quot;false&quot;</span> //<span class="hljs-attr">开启upnp转发</span></span><br><span class="hljs-tag">  <span class="hljs-attr">autorestart</span>=<span class="hljs-string">&quot;true&quot;</span> //<span class="hljs-attr">自动重新开始</span></span><br><span class="hljs-tag">  <span class="hljs-attr">LevelDifficulty</span>=<span class="hljs-string">&quot;100&quot;</span> //<span class="hljs-attr">游戏难度百分比</span></span><br><span class="hljs-tag">  <span class="hljs-attr">AllowedRandomMissionTypes</span>=<span class="hljs-string">&quot;Random,Salvage,Monster,Cargo,Combat&quot;</span>   //<span class="hljs-attr">允许的随机任务类型</span></span><br><span class="hljs-tag">  <span class="hljs-attr">AllowedClientNameChars</span>=<span class="hljs-string">&quot;32-33,38-46,48-57,65-90,91-91,93-93,95-122,192-255,384-591,1024-1279,19968-40959,13312-19903,131072-15043983,15043985-173791,173824-178207,178208-183983,63744-64255,194560-195103&quot;</span> //<span class="hljs-attr">设置玩家姓名中允许的字符编码</span></span><br><span class="hljs-tag">  <span class="hljs-attr">ServerMessage</span>=<span class="hljs-string">&quot;&quot;</span> //<span class="hljs-attr">进入服务器消息提示</span></span><br><span class="hljs-tag">  <span class="hljs-attr">tickrate</span>=<span class="hljs-string">&quot;20&quot;</span> //<span class="hljs-attr">设置服务器的时钟频率</span></span><br><span class="hljs-tag">  <span class="hljs-attr">randomizeseed</span>=<span class="hljs-string">&quot;True&quot;</span> //<span class="hljs-attr">随机化</span></span><br><span class="hljs-tag">  <span class="hljs-attr">userespawnshuttle</span>=<span class="hljs-string">&quot;True&quot;</span> //<span class="hljs-attr">用户生成穿梭机</span></span><br><span class="hljs-tag">  <span class="hljs-attr">respawninterval</span>=<span class="hljs-string">&quot;300&quot;</span> //<span class="hljs-attr">复活时间</span></span><br><span class="hljs-tag">  <span class="hljs-attr">maxtransporttime</span>=<span class="hljs-string">&quot;180&quot;</span> //<span class="hljs-attr">设置重生的停靠潜水艇时长</span></span><br><span class="hljs-tag">  <span class="hljs-attr">minrespawnratio</span>=<span class="hljs-string">&quot;0.2&quot;</span> //<span class="hljs-attr">最小复活时间</span></span><br><span class="hljs-tag">  <span class="hljs-attr">autorestartinterval</span>=<span class="hljs-string">&quot;60&quot;</span> //<span class="hljs-attr">自动重新启动间隔</span></span><br><span class="hljs-tag">  <span class="hljs-attr">startwhenclientsready</span>=<span class="hljs-string">&quot;False&quot;</span> //<span class="hljs-attr">玩家准备好就开始</span></span><br><span class="hljs-tag">  <span class="hljs-attr">startwhenclientsreadyratio</span>=<span class="hljs-string">&quot;0.8&quot;</span> //<span class="hljs-attr">玩家准备就绪比例开始</span></span><br><span class="hljs-tag">  <span class="hljs-attr">allowspectating</span>=<span class="hljs-string">&quot;True&quot;</span> //<span class="hljs-attr">允许观察</span></span><br><span class="hljs-tag">  <span class="hljs-attr">saveserverlogs</span>=<span class="hljs-string">&quot;True&quot;</span> //<span class="hljs-attr">保存服务器日志</span></span><br><span class="hljs-tag">  <span class="hljs-attr">allowragdollbutton</span>=<span class="hljs-string">&quot;True&quot;</span> //<span class="hljs-attr">允许碎布玩偶按钮</span></span><br><span class="hljs-tag">  <span class="hljs-attr">allowfiletransfers</span>=<span class="hljs-string">&quot;True&quot;</span> //<span class="hljs-attr">允许文件传输</span></span><br><span class="hljs-tag">  <span class="hljs-attr">voicechatenabled</span>=<span class="hljs-string">&quot;True&quot;</span> //<span class="hljs-attr">语音聊天已启用</span></span><br><span class="hljs-tag">  <span class="hljs-attr">allowvotekick</span>=<span class="hljs-string">&quot;True&quot;</span> //<span class="hljs-attr">允许投票</span></span><br><span class="hljs-tag">  <span class="hljs-attr">allowendvoting</span>=<span class="hljs-string">&quot;True&quot;</span> //<span class="hljs-attr">允许结束投票</span></span><br><span class="hljs-tag">  <span class="hljs-attr">allowrespawn</span>=<span class="hljs-string">&quot;True&quot;</span> //<span class="hljs-attr">允许重生</span></span><br><span class="hljs-tag">  <span class="hljs-attr">botcount</span>=<span class="hljs-string">&quot;0&quot;</span> //<span class="hljs-attr">机器人数量</span></span><br><span class="hljs-tag">  <span class="hljs-attr">maxbotcount</span>=<span class="hljs-string">&quot;16&quot;</span> //<span class="hljs-attr">最大机器人</span></span><br><span class="hljs-tag">  <span class="hljs-attr">botspawnmode</span>=<span class="hljs-string">&quot;Normal&quot;</span> //<span class="hljs-attr">机器人生成模式</span> <span class="hljs-attr">Normal</span> = <span class="hljs-string">正常</span> <span class="hljs-attr">Fill</span>=<span class="hljs-string">补充玩家空缺</span></span><br><span class="hljs-tag">  <span class="hljs-attr">allowdisguises</span>=<span class="hljs-string">&quot;True&quot;</span> //<span class="hljs-attr">允许玩家通过其他身份来伪装自己</span></span><br><span class="hljs-tag">  <span class="hljs-attr">allowrewiring</span>=<span class="hljs-string">&quot;True&quot;</span> //<span class="hljs-attr">允许玩家重新布线</span></span><br><span class="hljs-tag">  <span class="hljs-attr">allowfriendlyfire</span>=<span class="hljs-string">&quot;True&quot;</span> //<span class="hljs-attr">允许友军开火</span></span><br><span class="hljs-tag">  <span class="hljs-attr">traitorsenabled</span>=<span class="hljs-string">&quot;No&quot;</span> //<span class="hljs-attr">是否开启叛徒</span> <span class="hljs-attr">yes</span> = <span class="hljs-string">有</span> <span class="hljs-attr">no</span>=<span class="hljs-string">没有</span> <span class="hljs-attr">maybe</span>=<span class="hljs-string">可能有</span></span><br><span class="hljs-tag">  <span class="hljs-attr">subselectionmode</span>=<span class="hljs-string">&quot;Random&quot;</span> //<span class="hljs-attr">潜艇选择</span> <span class="hljs-attr">Manual</span>=<span class="hljs-string">手动</span> <span class="hljs-attr">Random</span>=<span class="hljs-string">随机</span> <span class="hljs-attr">Vote</span>=<span class="hljs-string">投票</span></span><br><span class="hljs-tag">  <span class="hljs-attr">modeselectionmode</span>=<span class="hljs-string">&quot;Random&quot;</span> //<span class="hljs-attr">游戏模式</span> <span class="hljs-attr">Manual</span>=<span class="hljs-string">手动</span> <span class="hljs-attr">Random</span>=<span class="hljs-string">随机</span> <span class="hljs-attr">Vote</span>=<span class="hljs-string">投票</span></span><br><span class="hljs-tag">  <span class="hljs-attr">endvoterequiredratio</span>=<span class="hljs-string">&quot;0.6&quot;</span> //<span class="hljs-attr">最终投票人比例</span></span><br><span class="hljs-tag">  <span class="hljs-attr">kickvoterequiredratio</span>=<span class="hljs-string">&quot;0.6&quot;</span> //<span class="hljs-attr">踢人投票率</span></span><br><span class="hljs-tag">  <span class="hljs-attr">killdisconnectedtime</span>=<span class="hljs-string">&quot;120&quot;</span> //<span class="hljs-attr">终止断开连接的时间</span></span><br><span class="hljs-tag">  <span class="hljs-attr">kickafktime</span>=<span class="hljs-string">&quot;600&quot;</span> //<span class="hljs-attr">踢出挂机人时间</span></span><br><span class="hljs-tag">  <span class="hljs-attr">traitoruseratio</span>=<span class="hljs-string">&quot;True&quot;</span> //<span class="hljs-attr">叛徒玩家</span></span><br><span class="hljs-tag">  <span class="hljs-attr">traitorratio</span>=<span class="hljs-string">&quot;0.2&quot;</span> //<span class="hljs-attr">叛徒比率</span></span><br><span class="hljs-tag">  <span class="hljs-attr">karmaenabled</span>=<span class="hljs-string">&quot;True&quot;</span> //<span class="hljs-attr">因果报应开启</span> <span class="hljs-attr">-</span> <span class="hljs-attr">在有叛徒模式下才能体现此系统的作用</span></span><br><span class="hljs-tag">  <span class="hljs-attr">karmapreset</span>=<span class="hljs-string">&quot;default&quot;</span> //<span class="hljs-attr">恶报预设</span> <span class="hljs-attr">default</span>= <span class="hljs-string">默认</span> <span class="hljs-attr">strict</span>=<span class="hljs-string">严格</span> <span class="hljs-attr">custom</span>=<span class="hljs-string">自定义</span></span><br><span class="hljs-tag">  <span class="hljs-attr">gamemodeidentifier</span>=<span class="hljs-string">&quot;sandbox&quot;</span> //<span class="hljs-attr">游戏模式标识符</span> <span class="hljs-attr">Sandbox</span>=<span class="hljs-string">沙盒</span> <span class="hljs-attr">Mission</span>=<span class="hljs-string">任务</span> <span class="hljs-attr">Campaign</span>=<span class="hljs-string">战役</span></span><br><span class="hljs-tag">  <span class="hljs-attr">missiontype</span>=<span class="hljs-string">&quot;all&quot;</span> //<span class="hljs-attr">任务类型</span> <span class="hljs-attr">Salvage</span>=<span class="hljs-string">打捞</span> <span class="hljs-attr">Monster</span>=<span class="hljs-string">怪物</span> <span class="hljs-attr">Cargo</span>=<span class="hljs-string">货物</span> <span class="hljs-attr">Combat</span>=<span class="hljs-string">战斗</span> <span class="hljs-attr">Random</span>=<span class="hljs-string">随机</span> <span class="hljs-attr">all</span>=<span class="hljs-string">全部</span></span><br><span class="hljs-tag">  <span class="hljs-attr">autobantime</span>=<span class="hljs-string">&quot;3600&quot;</span> //<span class="hljs-attr">投票禁止玩家自动禁止时间</span></span><br><span class="hljs-tag">  <span class="hljs-attr">maxautobantime</span>=<span class="hljs-string">&quot;86400&quot;</span> //<span class="hljs-attr">最大自动禁止时间</span> </span><br><span class="hljs-tag">&lt;/<span class="hljs-attr">serversettings</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>接下来编辑config_player.xml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano barotrauma-server/config_player.xml<br></code></pre></td></tr></table></figure><p>将游戏语言修改为简体中文：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">config</span></span><br><span class="hljs-tag"><span class="hljs-attr">language</span>=<span class="hljs-string">&quot;Simplified Chinese&quot;</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-attr">config</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最后一个文件是clientpermissions.xml，可以通过steam的浏览本地文件功能找到游戏的根目录，这个文件位于根目录的Data文件夹中</p><p><img src="/images/posts/barotrauma/本地文件.png" /></p><p>将你本地这个文件的内容复制下来，并覆盖掉服务端的该文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano barotrauma-server/Data/clientpermissions.xml<br></code></pre></td></tr></table></figure><p>这个文件夹实际上是管理用户权限的，这样一来你就拥有了服务器的全部权限，可以使用控制台的所有指令了。</p><h1 id="三运行服务器">三、运行服务器</h1><h2 id="错误修复">1、错误修复</h2><p>首先，直接运行服务端文件：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">barotrauma-<span class="hljs-keyword">server</span>/DedicatedServer<br></code></pre></td></tr></table></figure><p>然后会出现一个报错，提示有一个目录不存在，这个目录的路径应该是<code>.local/share/Daedalic Entertainment GmbH/Barotrauma</code></p><p>看了下是由于游戏会强制尝试在这里创建存档文件<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[https://github.com/Regalis11/Barotrauma/issues/1521](https://github.com/Regalis11/Barotrauma/issues/1521)">[2]</span></a></sup>，好像官方也没啥修的意思，但是解决的方法也很简单，手动创建下这个文件夹就好了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p .<span class="hljs-built_in">local</span>/share/Daedalic\ Entertainment\ GmbH/Barotrauma<br></code></pre></td></tr></table></figure><p>接下来再运行服务端，即可看到游戏成功运行了：</p><p><img src="/images/posts/barotrauma/运行成功.png" /></p><h2 id="服务器后台常驻">2、服务器后台常驻</h2><p>可以使用screen来让服务器进程在后台保持常驻，首先安装screen：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install screen -y<br></code></pre></td></tr></table></figure><p>接下来创立一个新的后台：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">screen -S barotrauma<br></code></pre></td></tr></table></figure><p>终端会切换到新的界面，在这里运行服务端文件，之后按<code>CTRL+A+D</code>退出</p><p>想要再次进入，只需要输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">screen -r barotrauma<br></code></pre></td></tr></table></figure><h1 id="参考">参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.bilibili.com/read/cv13816065">如何在Linux上部署潜渊症服务器</a> <a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://github.com/Regalis11/Barotrauma/issues/1521">https://github.com/Regalis11/Barotrauma/issues/1521</a> <a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>游戏</category>
      
      <category>潜渊症</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏</tag>
      
      <tag>潜渊症</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FF14一些自用生产宏</title>
    <link href="/2022/05/07/2022-05-07-FF14-tools/"/>
    <url>/2022/05/07/2022-05-07-FF14-tools/</url>
    
    <content type="html"><![CDATA[<h1 id="一禁断及职业属性">一、禁断及职业属性</h1><figure><img src="/images/posts/ff14tools/禁断.png" alt="禁断" /><figcaption aria-hidden="true">禁断</figcaption></figure><ul><li><strong>无专家水晶</strong>：3364/3430/573</li><li><strong>专家水晶</strong>：3684/3450/588</li></ul><h1 id="二半成品">二、半成品</h1><h2 id="级">1、89级</h2><p>无专家水晶</p><p><img src="/images/posts/ff14tools/87半成品（无水晶）.png" /></p><p>有专家水晶</p><p><img src="/images/posts/ff14tools/87半成品.png" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">/macrolock<br>/ac 闲静 &lt;wait.3&gt;<br>/ac 掌握 &lt;wait.2&gt;<br>/ac 长期俭约 &lt;wait.2&gt;<br>/ac 改革 &lt;wait.2&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 比尔格的祝福 &lt;wait.3&gt;<br>/ac 崇敬 &lt;wait.2&gt;<br>/ac 坯料制作 &lt;wait.3&gt;<br>/ac 坯料制作 &lt;wait.3&gt;<br>/echo 宏 <span class="hljs-comment">#1 已完成！&lt;se.1&gt;</span><br></code></pre></td></tr></table></figure><h3 id="适用范围">适用范围</h3><ul><li>87、88级半成品</li><li>品质7000，耐久40</li></ul><h1 id="二成品相关">二、成品相关</h1><h2 id="级成品">1、89级成品</h2><p>无专家水晶</p><p><img src="/images/posts/ff14tools/89白票（无水晶）.png" /></p><p>专家水晶</p><p><img src="/images/posts/ff14tools/89白票.png" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">/macrolock<br>/ac 坚信 &lt;wait.3&gt;<br>/ac 掌握 &lt;wait.2&gt;<br>/ac 长期俭约 &lt;wait.2&gt;<br>/ac 坯料制作 &lt;wait.3&gt;<br>/ac 改革 &lt;wait.2&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 阔步 &lt;wait.2&gt;<br>/ac 比尔格的祝福 &lt;wait.3&gt;<br>/ac 坯料制作 &lt;wait.3&gt;<br>/echo 宏 <span class="hljs-comment">#1 已完成！&lt;se.1&gt;</span><br></code></pre></td></tr></table></figure><h3 id="适用范围-1">适用范围</h3><ul><li>89级成品</li><li>难度3400，耐久7100</li></ul><h2 id="级成品-1">2、90级成品</h2><p>无专家水晶</p><p><img src="/images/posts/ff14tools/90级成品（无水晶）.png" /></p><p>专家水晶</p><p><img src="/images/posts/ff14tools/90级成品.png" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">/macrolock<br>/ac 坚信 &lt;wait.3&gt;<br>/ac 掌握 &lt;wait.2&gt;<br>/ac 长期俭约 &lt;wait.2&gt;<br>/ac 坯料制作 &lt;wait.3&gt;<br>/ac 改革 &lt;wait.2&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 阔步 &lt;wait.2&gt;<br>/ac 比尔格的祝福 &lt;wait.3&gt;<br>/ac 坯料制作 &lt;wait.3&gt;<br>/echo 宏 <span class="hljs-comment">#1 已完成！&lt;se.1&gt;</span><br></code></pre></td></tr></table></figure><h3 id="适用范围-2">适用范围</h3><ul><li>90级成品</li><li>难度3500，耐久80</li></ul><h1 id="三高难相关">三、高难相关</h1><h2 id="级半成品7800">1、90级★★半成品（7800）</h2><p>无专家水晶</p><p>食物：高山茶HQ</p><p><img src="/images/posts/ff14tools/90高难二星半成品（无水晶）.png" /></p><p>专家水晶</p><p>食物：高山茶HQ</p><p><img src="/images/posts/ff14tools/90高难二星半成品.png" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">/macrolock<br>/ac 坚信 &lt;wait.3&gt;<br>/ac 掌握 &lt;wait.2&gt;<br>/ac 长期俭约 &lt;wait.2&gt;<br>/ac 坯料制作 &lt;wait.3&gt;<br>/ac 改革 &lt;wait.2&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 改革 &lt;wait.2&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 精修 &lt;wait.3&gt;<br>/ac 阔步 &lt;wait.2&gt;<br>/echo 宏 <span class="hljs-comment">#1 已完成！&lt;se.1&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">/macrolock<br>/ac 比尔格的祝福 &lt;wait.3&gt;<br>/ac 坯料制作 &lt;wait.3&gt;<br>/echo 宏 <span class="hljs-comment">#2 已完成！&lt;se.1&gt;</span><br></code></pre></td></tr></table></figure><h3 id="适用范围-3">适用范围</h3><ul><li>6.05版本半成品</li><li>品质7800、耐久35</li></ul><h2 id="级半成品8400">2、90级★★半成品（8400）</h2><p>专家水晶</p><p>食物：高山茶HQ</p><p><img src="/images/posts/ff14tools/萨维奈纤维.png" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">/macrolock<br>/ac 坚信 &lt;wait.3&gt;<br>/ac 掌握 &lt;wait.2&gt;<br>/ac 长期俭约 &lt;wait.2&gt;<br>/ac 坯料制作 &lt;wait.3&gt;<br>/ac 改革 &lt;wait.2&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 改革 &lt;wait.2&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 精修 &lt;wait.3&gt;<br>/ac 阔步 &lt;wait.2&gt;<br>/echo 宏 <span class="hljs-comment">#1 已完成！&lt;se.1&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">/macrolock<br>/ac 比尔格的祝福 &lt;wait.3&gt;<br>/ac 坯料制作 &lt;wait.3&gt;<br>/echo 宏 <span class="hljs-comment">#2 已完成！&lt;se.1&gt;</span><br></code></pre></td></tr></table></figure><h3 id="适用范围-4">适用范围</h3><ul><li>6.1版本高难半成品</li><li>品质8400、耐久35</li></ul><h2 id="级成品580">2、90级★★成品（580）</h2><p>无专家水晶</p><p>食物：高山茶HQ</p><p>初期品质：垫满（5460）</p><p><img src="/images/posts/ff14tools/580HQ（无水晶）.png" /></p><p>专家水晶</p><p>食物：高山茶HQ</p><p>初期品质：垫满（5460）</p><figure><img src="/images/posts/ff14tools/580HQ.png" alt="i" /><figcaption aria-hidden="true">i</figcaption></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">/macrolock<br>/ac 坚信 &lt;wait.3&gt;<br>/ac 掌握 &lt;wait.2&gt;<br>/ac 长期俭约 &lt;wait.2&gt;<br>/ac 坯料制作 &lt;wait.3&gt;<br>/ac 改革 &lt;wait.2&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 阔步 &lt;wait.2&gt;<br>/ac 比尔格的祝福 &lt;wait.3&gt;<br>/ac 坯料制作 &lt;wait.3&gt;<br>/ac 坯料制作 &lt;wait.3&gt;<br>/echo 宏 <span class="hljs-comment">#1 已完成！&lt;se.1&gt;</span><br></code></pre></td></tr></table></figure><h3 id="适用范围-5">适用范围</h3><ul><li>6.05版本580HQ</li><li>品质10920、耐久80</li></ul><h2 id="级成品590">3、90级★★成品（590）</h2><p>无专家水晶</p><p>食物：高山茶HQ</p><p>初期品质：垫满（6400）</p><p><img src="/images/posts/ff14tools/590HQ（无水晶）.png" /></p><p>专家水晶</p><p>食物：高山茶HQ</p><p>初期品质：垫满（6400）</p><p><img src="/images/posts/ff14tools/590HQ.png" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">/macrolock<br>/ac 坚信 &lt;wait.3&gt;<br>/ac 掌握 &lt;wait.2&gt;<br>/ac 长期俭约 &lt;wait.2&gt;<br>/ac 崇敬 &lt;wait.2&gt;<br>/ac 坯料制作 &lt;wait.3&gt;<br>/ac 改革 &lt;wait.2&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 坯料加工 &lt;wait.3&gt;<br>/ac 加工 &lt;wait.3&gt;<br>/ac 阔步 &lt;wait.2&gt;<br>/ac 比尔格的祝福 &lt;wait.3&gt;<br>/echo 宏 <span class="hljs-comment">#1 已完成！&lt;se.1&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">/macrolock<br>/ac 崇敬 &lt;wait.2&gt;<br>/ac 坯料制作 &lt;wait.3&gt;<br>/ac 坯料制作 &lt;wait.3&gt;<br>/echo 宏 <span class="hljs-comment">#2 已完成！&lt;se.1&gt;</span><br></code></pre></td></tr></table></figure><h3 id="适用范围-6">适用范围</h3><ul><li>6.1版本590HQ</li><li>品质12800、耐久80</li></ul>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>游戏</category>
      
      <category>FF14</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>游戏</tag>
      
      <tag>FF14</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决安装phpMyadmin时MySQL报错的问题</title>
    <link href="/2022/04/20/2022-04-20-mysql/"/>
    <url>/2022/04/20/2022-04-20-mysql/</url>
    
    <content type="html"><![CDATA[<h1 id="正文">正文</h1><p>通过指令直接安装phpMyadmin，MySQL报错ERROR 1819 (HY000)，提示密码不符合安全要求。</p><p>解决方案是先手动建立一个<code>phpmyadmin@localhost</code> 的账户。具体操作如下：</p><p>首先登入MySQL：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mysql<br></code></pre></td></tr></table></figure><p>接下来查看当前的安全等级：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;validate_password%&#x27;</span>;<br></code></pre></td></tr></table></figure><p>显示当前的验证等级要求：</p><p><img src="/images/posts/mysql/level.png" /></p><p>基于版本区别，你这里可能名称和我有些许区别。具体来说就是最后一个变量前面可能不是<code>.</code>而是<code>-</code>，那么你就在指令中改一下就行。这里可以临时修改一下验证需求，也可以保持原样。修改方式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> validate_password.length<span class="hljs-operator">=</span><span class="hljs-number">3</span>;<br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> validate_password.mixed_case_count<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> validate_password.number_count<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> validate_password.policy<span class="hljs-operator">=</span>LOW;<br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> validate_password.special_char_count<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>这几个词条从上至下的意思分别是：密码最小长度、至少包含几个大小写字母、至少包含几个数字、安全验证等级、至少包含几个特殊符号。根据你的需求改就行。</p><p>接下来创建一个新用户，由于phpMyadmin默认的用户名为<code>phpmyadmin@localhost</code>，因此这里就创建这个，将<strong>你的密码</strong>改为你自己的密码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;phpmyadmin&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">WITH</span> <span class="hljs-string">&#x27;caching_sha2_password&#x27;</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;你的密码&#x27;</span>;<br></code></pre></td></tr></table></figure><p>然后赋予这个账户权限：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILEGES <span class="hljs-keyword">ON</span> phpmyadmin.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;phpmyadmin&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> OPTION;<br></code></pre></td></tr></table></figure><p>之后记得把刚刚改了的安全等级相关信息改回去（不改也行，看你）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> validate_password.length<span class="hljs-operator">=</span><span class="hljs-number">8</span>;<br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> validate_password.mixed_case_count<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> validate_password.number_count<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> validate_password.policy<span class="hljs-operator">=</span>MEDIUM;<br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> validate_password.special_char_count<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>输入<code>exit</code>退出MySQL，接下来执行安装指令安装phpMyadmin：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install phpmyadmin<br></code></pre></td></tr></table></figure><p>默认安装还是会报错，这次选retry，会让你手动设置。这时将密码类型设为<strong>caching_sha2_password</strong>，然后填入你刚才的密码，其它选项全部默认，即可成功安装。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>计算机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACT高级触发器食用指南</title>
    <link href="/2022/04/11/2022-04-11-FF14-trigger/"/>
    <url>/2022/04/11/2022-04-11-FF14-trigger/</url>
    
    <content type="html"><![CDATA[<h1 id="事前准备">1. 事前准备</h1><p>首先需要准备ACT，并安装Triggernometry插件</p><p><img src="/images/posts/ff14trigger/高级触发器.png" /></p><p>打开之后，在插件选项卡中进入Triggernometry窗口，即可编写你的自定义触发器</p><p><img src="/images/posts/ff14trigger/插件设置.png" /></p><h1 id="简单的触发器设置">2. 简单的触发器设置</h1><h2 id="设置分组">2.1 设置分组</h2><p>首先，我们以技能CD监控为例，编写一个简单的触发器。</p><p>首先，右键本地触发器，新建一个分组。</p><figure><img src="/images/posts/ff14trigger/新建分组.png" alt="新建分组" /><figcaption aria-hidden="true">新建分组</figcaption></figure><p>分组除了可以方便我们整理触发器之外，还可以对触发器进行一些简单的分类。例如，现在我们编写的是战职的CD监控，那么我们可以建立三级分组，分别设置只有在战职触发、只在远敏职业触发、只在舞者触发。只需要右键分组，并选择编辑按钮，即可对分组进行设置。如下图所示：</p><figure><img src="/images/posts/ff14trigger/远敏职业分组.png" alt="远敏职业分组" /><figcaption aria-hidden="true">远敏职业分组</figcaption></figure><p>接下来，我们就可以开始编写一个简单的触发器了。首先，触发器的本质其实就是匹配游戏的输出日志，并作出对应的响应，有点类似于QQ机器人的逻辑。</p><h2 id="显示技能">2.2 显示技能</h2><p>由于是编写技能CD监控，我们需要先在游戏中显示自己的技能。如下图所示，设置显示自己的技能：</p><p><img src="/images/posts/ff14trigger/消息设置.png" /></p><figure><img src="/images/posts/ff14trigger/显示使用技能.png" alt="显示使用技能" /><figcaption aria-hidden="true">显示使用技能</figcaption></figure><p>例如这里我就是在“战斗”窗口中显示自己发动了什么技能。当我们切换到战斗窗口，就可以看到自己发动的所有技能：</p><figure><img src="/images/posts/ff14trigger/显示技能.png" alt="显示技能" /><figcaption aria-hidden="true">显示技能</figcaption></figure><p>现在，我们只需要将这个句子复制下来，就可以在触发器中进行监控了。</p><h2 id="编写触发器">2.3 编写触发器</h2><p>我们右键分组，选择添加触发：</p><figure><img src="/images/posts/ff14trigger/新建触发器.png" alt="新建触发器" /><figcaption aria-hidden="true">新建触发器</figcaption></figure><p>触发器的名字随便起，只要方便你辨认就行，在正则表达式一栏，将刚刚聊天栏内的技能复制过来：</p><figure><img src="/images/posts/ff14trigger/触发器设置.png" alt="触发器设置" /><figcaption aria-hidden="true">触发器设置</figcaption></figure><p>接下来我们就要设置触发器具体执行什么动作，点击下面的添加动作（add action），动作类型有很多，例如系统音效就是“嘟”的响一声。我们这里先选择TTS：</p><figure><img src="/images/posts/ff14trigger/添加动作.png" alt="添加动作" /><figcaption aria-hidden="true">添加动作</figcaption></figure><p>在播读内容中写上你希望ACT报的文字，下面可以调播读音量和语速。点击test action按钮可以试听一下TTS效果，编辑好之后点击添加添加动作。</p><figure><img src="/images/posts/ff14trigger/TTS设置.png" alt="TTS设置" /><figcaption aria-hidden="true">TTS设置</figcaption></figure><p>保存好的触发器现在长这个样子，点击保存更改就可以保存你的触发器了。现在回到游戏，再跳一个小舞，可以听到在你按下了标准舞步的时候，ACT报了你刚刚设置的文字。</p><figure><img src="/images/posts/ff14trigger/触发器界面.png" alt="触发器界面" /><figcaption aria-hidden="true">触发器界面</figcaption></figure><h2 id="延时设置">2.4 延时设置</h2><p>我们希望做技能CD监控，显然还需要做一个延时的处理，例如标准舞步的CD是30秒，那么我希望在28秒的时候提醒我CD快好了，怎么做呢？</p><p><img src="/images/posts/ff14trigger/小舞CD.png" /></p><p>回到我们刚刚编写好的触发器，右键动作（注意是动作），打开编辑窗口：</p><figure><img src="/images/posts/ff14trigger/编辑动作.png" alt="编辑动作" /><figcaption aria-hidden="true">编辑动作</figcaption></figure><p>切换到计划任务选项卡，在这里，我们就可以设置延时，即下图中③所示，代表27000毫秒后（CD转好还剩3秒）执行这个动作。此外，建议将②处改为中断之前的队列，这样当你再按了一次这个技能的时候，触发器就会刷新时间。主要是针对那些有多层充能的技能：</p><figure><img src="/images/posts/ff14trigger/设置触发器动作延时.png" alt="设置触发器动作延时" /><figcaption aria-hidden="true">设置触发器动作延时</figcaption></figure><p>完毕之后点击保存更改，别忘了动作和触发器都要保存。回到游戏，再次按下标准舞步，就可以听到在CD还有3秒钟转好的时候TTS播报的语音提示了。</p><div class="note note-warning">            <p>需要注意的是触发器实际上是存在一定的延时的，比如在我的电脑上，我设置的是27秒延时，但是体感上是在28秒的时候才播报的，因此建议在设置好之后实际使用一下，再根据实际情况进行微调。</p>          </div><h1 id="进阶设置">3. 进阶设置</h1><h2 id="缺省匹配">3.1 缺省匹配</h2><p>可以看到刚刚的触发器我们是直接把聊天栏的内容复制了过来，这是带着玩家ID的，那万一我们改名了，或者想把我们编写好的触发器分享给别人，很显然它就不能正确的匹配到信息了，怎么办呢？</p><p>由于我们已经知道了这里使用的是正则表达式进行匹配，那么最简单粗暴的方法就是：</p><figure><img src="/images/posts/ff14trigger/缺省匹配.png" alt="缺省匹配" /><figcaption aria-hidden="true">缺省匹配</figcaption></figure><p>把前面ID部分删了就好了。</p><h2 id="频道号与变量">3.2 频道号与变量</h2><p>但是现在还有一个问题，虽然<strong>在我们当前编写的技能CD监控中基本上不会碰到这种情况</strong>，但是当你写别的一些触发器的时候也许就会碰上，是什么呢？</p><p>大家可以试试，现在手动在说话频道或者其它什么频道把这段匹配字句打一下，你会发现它也激活了触发器。</p><p><img src="/images/posts/ff14trigger/手动输入关键字句.png" /></p><p>这显然是不行的，我们只要匹配对应的消息，不是只要文字对就匹配的。怎么办呢？在处理这个问题之前，我们先来了解一下触发器中的局部变量。</p><h3 id="变量">3.2.1 变量</h3><p>首先，我们将触发器的正则表达式进行一下修改，在前面加上<code>(?&lt;player&gt;.*)</code>，这里的player也可以是其它的变量名称：</p><figure><img src="/images/posts/ff14trigger/获取变量.png" alt="获取变量" /><figcaption aria-hidden="true">获取变量</figcaption></figure><p>然后我们再添加一个新动作，动作类型选择显示消息框，在“消息的文本”处，填上<code>$&#123;player&#125;</code>，同理，这里的变量名只要跟你上面设置的一致即可：</p><figure><img src="/images/posts/ff14trigger/显示变量.png" alt="显示变量" /><figcaption aria-hidden="true">显示变量</figcaption></figure><p>接下来点击move up将这个动作移到最上面，或者直接取消勾选我们之前设置的那个动作，否则这个新的动作就要等到27秒后，TTS播报完才会执行：</p><figure><img src="/images/posts/ff14trigger/调整动作顺序.png" alt="调整动作顺序" /><figcaption aria-hidden="true">调整动作顺序</figcaption></figure><p>现在我们回到游戏，再按一下标准舞步，可以看到弹出来了一个窗口：</p><figure><img src="/images/posts/ff14trigger/消息弹窗.png" alt="消息弹窗" /><figcaption aria-hidden="true">消息弹窗</figcaption></figure><p>这里实际上就是将我们上面触发器中缺省的文本赋值给了player变量，然后在弹窗中显示了这个变量。我们注意这里的<strong>082B</strong>，这就是我们要找的<strong>频道号</strong>。</p><div class="note note-warning">            <p>这里有可能你没看到弹窗，实际上可能是由于游戏全屏或其他原因，导致弹窗并没有置顶显示。如果遇到这种情况，可以按alt+tab切换窗口来显示这个弹窗。</p>          </div><h3 id="频道号">3.2.2 频道号</h3><p>实际上我们聊天栏中显示的所有不同的消息，都是分别归属于不同的频道，当然这个是隐性的，我们日常是看不到的，但是现在我们就可以通过频道号来实现仅仅匹配某一类频道中的文本，例如我们上面已经知道了技能信息的频道号是082B，那么现在，我们就可以修改正则表达式成这样：</p><figure><img src="/images/posts/ff14trigger/带频道号的正则表达式.png" alt="带频道号的正则表达式" /><figcaption aria-hidden="true">带频道号的正则表达式</figcaption></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">082B::(<span class="hljs-string">?&lt;</span>player&gt;.*)发动了“标准舞步”。<br></code></pre></td></tr></table></figure><p>同理，对于其它想要查询频道号的信息，也可以用这个办法去显示。查询完毕之后记得将这个显示弹窗的动作删除掉即可。</p><h3 id="使用案例">3.2.3 使用案例</h3><p>这里再展示一个栗子，监听收藏品采集，并通过TTS播报刷新的资源是什么：</p><figure><img src="/images/posts/ff14trigger/限时收藏品采集的表达式.png" alt="限时收藏品采集" /><figcaption aria-hidden="true">限时收藏品采集</figcaption></figure><h2 id="带条件的触发器">3.3 带条件的触发器</h2><p>还是以技能CD监控为例，这次我们尝试监控诗人的毒DOT，我们知道诗人存在两种上毒的方法，其一是手动续两个毒dot，其二是当56级学会伶牙俐齿之后通过该技能一次性刷新两个毒的CD。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/images/posts/ff14trigger/毒1-1.png" /></div><div class="group-image-wrap"><img src="/images/posts/ff14trigger/毒2-1.png" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/images/posts/ff14trigger/毒1.png" /></div><div class="group-image-wrap"><img src="/images/posts/ff14trigger/毒2.png" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/images/posts/ff14trigger/毒3.png" /></div></div></div><p>那么，我们怎么通过一个触发器就完成对毒DOT的监控呢？这就需要用到<strong>触发器条件</strong>这一功能了。我们还是先写好基础的触发器语句，但是这回我们把技能部分也留空，接下来切换到触发器条件选项卡，默认会有一个未启用的空白分组，我们右键它，选择添加一个条件：</p><figure><img src="/images/posts/ff14trigger/添加条件.png" alt="添加条件" /><figcaption aria-hidden="true">添加条件</figcaption></figure><p>可以看到，默认的空白条件是这样的：</p><figure><img src="/images/posts/ff14trigger/空白条件.png" alt="空白条件" /><figcaption aria-hidden="true">空白条件</figcaption></figure><p>触发器支持一些对字符串和数字的简单对比，我们点开<strong>运算符</strong>的下拉菜单可以看到可用的所有逻辑运算符：</p><figure><img src="/images/posts/ff14trigger/逻辑运算符.png" alt="逻辑运算符" /><figcaption aria-hidden="true">逻辑运算符</figcaption></figure><p>这里我们需要实现的是匹配字符，因此我们选择<strong>左侧必须与右侧的正则表达式匹配</strong>，而左侧填入变量skill，右侧是要匹配的技能名称，如下图所示：</p><p><img src="/images/posts/ff14trigger/编辑条件.png" /></p><p>接下来我们将上述的5个技能全部添加为条件，而条件组类型就选择至少有一个为真（也就是或运算）即可，同时别忘了把计划任务改成中断之前的队列。完成的界面如下图所示：</p><figure><img src="/images/posts/ff14trigger/触发器的触发条件.png" alt="触发条件" /><figcaption aria-hidden="true">触发条件</figcaption></figure><figure><img src="/images/posts/ff14trigger/触发器计划任务.png" alt="计划任务" /><figcaption aria-hidden="true">计划任务</figcaption></figure><figure><img src="/images/posts/ff14trigger/续毒动作.png" alt="动作" /><figcaption aria-hidden="true">动作</figcaption></figure><p>这样，我们就完成了一个简单的续毒提示触发器，只要我们使用了上述5个毒dot类技能中的任意一个，就会在40秒后提醒我们续毒。</p><p>当然，不仅仅是触发器可以设置条件，<strong>动作也是可以设置条件的</strong>，这里我就不再赘述，大家自行根据实际需求运用即可。</p><h2 id="显示字幕">3.4 显示字幕</h2><p>除了TTS之外，我们还可以通过字幕的形式来显示变量信息。以3.2.3中的采集触发器为例，有可能TTS播报的时候我们去干别的了，那我们希望触发器除了TTS之外还能够把消息打在公屏上（不是），如下图所示：</p><figure><img src="/images/posts/ff14trigger/字幕显示.png" alt="字幕显示" /><figcaption aria-hidden="true">字幕显示</figcaption></figure><p>我们打开触发器，新建一个动作，动作类型为文本显示（Aura）:</p><figure><img src="/images/posts/ff14trigger/文本显示.png" alt="文本显示" /><figcaption aria-hidden="true">文本显示</figcaption></figure><p>我们现在要做的是显示文本，因此操作就是激活或修改指定的文本 Aura。</p><p>接下来是<strong>唯一标识符</strong>，这个Aura可以理解为一个全局变量，也就是说我们可以从别的触发器中访问到这个资源，因此这里的唯一标识符就相当于是这个全局变量的变量名，切记不可重复。我们这里就起名为资源，言简意赅。</p><p>然后是显示的文本，这个好理解，就是你要显示什么。这里我们让他显示source变量中获取到的文本。如下图所示：</p><figure><img src="/images/posts/ff14trigger/设置文本信息.png" alt="设置文本信息" /><figcaption aria-hidden="true">设置文本信息</figcaption></figure><p>下面就是调整文本的字体、字号、颜色、位置等等。点击字体旁边的小齿轮按钮，可以设置文本的颜色、背景颜色和轮廓颜色：</p><figure><img src="/images/posts/ff14trigger/设置文本颜色.png" alt="设置文本颜色" /><figcaption aria-hidden="true">设置文本颜色</figcaption></figure><p>这里光设置了轮廓颜色还不够，记得要把下面的文本轮廓的复选框也勾选上才会显示轮廓。</p><p>点击边上的浏览按钮可以设置字体和字号。</p><p>最后就是设置你要让文本在哪里显示。直接点击“使用即时设置”按钮，你会看到有一个小方块显示出来，初始大概长这样：</p><p><img src="/images/posts/ff14trigger/文本框1.png" /></p><p>使用鼠标左键拖动它，将光标放置在角落上可以调整大小，这样就可以直接把文本框放到你想要的位置上。调整好位置和大小之后，右键这个文本框，选择保存，就可以保存它的坐标位置了：</p><figure><img src="/images/posts/ff14trigger/保存调整好的文本框.png" alt="保存调整好的文本框" /><figcaption aria-hidden="true">保存调整好的文本框</figcaption></figure><p>这样我们就设置好了显示文本的动作，记得保存：</p><p><img src="/images/posts/ff14trigger/文本设置界面.png" /></p><p>这样我们就可以看到，当刷新资源点的时候，TTS播报了语音提示，同时字幕会一直显示刷新的具体资源，就像最开始演示的那样。</p><h2 id="aura变量">3.5 Aura变量</h2><p>依旧以上面的收藏品采集为例子，我们也不希望这个字幕一直挂在这里，比如当这个采集点消失了或者我们已经去挖完了，想让这个文本消失，可以做到吗？</p><p>可以看到，无论是时间到了还是采集完毕，都有这么一句通知：</p><figure><img src="/images/posts/ff14trigger/无法感知.png" alt="无法继续感知未知的草场……" /><figcaption aria-hidden="true">无法继续感知未知的草场……</figcaption></figure><p>那么我们就来监听这一句消息，通过查询可知该消息的频道号为083B，那么就新建触发器，匹配文本为：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">083B::无法继续感知(<span class="hljs-string">?&lt;</span>source_1&gt;.*)<br></code></pre></td></tr></table></figure><p>这里的变量名理论上还是可以叫source的，但是为了防止混淆所以起了不一样的变量名。</p><p>下面新建动作，类型还是文本显示（Aura），但是这回我们的操作变为了停用指定的文本Aura：</p><figure><img src="/images/posts/ff14trigger/停用Aura资源.png" alt="停用Aura资源" /><figcaption aria-hidden="true">停用Aura资源</figcaption></figure><p>我们前面说过，Aura就类似程序中的全局变量。因此这里的操作就好理解了，我们在这里通过<strong>同样的唯一标识符</strong>来找到这个文本Aura资源，然后停用它，这样这个文本框就不会显示了，去找一个矿挖一下，可以看到在挖完之后，文本就消失了：</p><p><img src="/images/posts/ff14trigger/image-20220411154727672.png" /></p><h1 id="结语">4. 结语</h1><p>除此之外，在动作类型中还有很多其它的操作，但是基本上逻辑都殊途同归，只不过是执行的操作不一样了而已。例如<strong>通用JSON操作</strong>动作可以像目标URL发送带参POST请求，依此可以完成例如与QQ机器人联动等等类似的操作。</p>]]></content>
    
    
    <categories>
      
      <category>游戏</category>
      
      <category>FF14</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏</tag>
      
      <tag>FF14</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>烟波钓徒之路</title>
    <link href="/2022/01/01/2022-01-01-FF14-fishing/"/>
    <url>/2022/01/01/2022-01-01-FF14-fishing/</url>
    
    <content type="html"><![CDATA[<h1 id="鱼王">2.0鱼王</h1><h2 id="黑衣森林">黑衣森林</h2><h3 id="格里达尼亚新街">格里达尼亚新街</h3><h4 id="翡翠湖滨">翡翠湖滨</h4><p>招雨王</p><p>钓上时间：2022.01.01 下午6:07</p><h4 id="红茶川水系下游">红茶川水系下游</h4><p>酿血鱼</p><p>钓上时间：2022.01.01 下午6:19</p><h3 id="格里达尼亚旧街">格里达尼亚旧街</h3><h4 id="低语河谷">低语河谷</h4><p>圣母鲤</p><p>钓上时间：2022.01.01 晚上10:48</p><h3 id="中森">中森</h3><h4 id="叶脉水系">叶脉水系</h4><p>外科医生</p><p>钓上时间：2022.01.01 下午7:26</p><h4 id="镜池">镜池</h4><p>人面鲤</p><p>钓上时间：2022.01.01 下午7:35</p><h4 id="常影区">常影区</h4><p>雷神光</p><p>钓上时间：2022.01.01 晚上10:51</p><h4 id="萌芽池">萌芽池</h4><p>绿小丑</p><p>钓上时间：2022.01.02 晚上7:51</p><h3 id="东森">东森</h3><h4 id="花蜜栈桥">花蜜栈桥</h4><p>暗兵鳢</p><p>钓上时间：2022.01.02 下午4:33</p><h4 id="涟漪小川">涟漪小川</h4><p>莫尔巴</p><p>钓上时间：2022.01.02 晚上7:59</p><h4 id="十二神大圣堂">十二神大圣堂</h4><p>终结者</p><p>钓上时间：2022.01.05 下午4:45</p><h4 id="落翠底">落翠底</h4><p>妖祸鱼</p><p>钓上时间：2022.01.01 下午7:41</p><h3 id="南森">南森</h3><h4 id="哈希瓦河中游">哈希瓦河中游</h4><p>沉川鲑</p><p>钓上时间：2022.01.05 下午4:55</p><h3 id="北森">北森</h3><h4 id="嘈杂川">嘈杂川</h4><p>蓝寡妇</p><p>钓上时间：2022.03.10 下午3:28</p>]]></content>
    
    
    <categories>
      
      <category>游戏</category>
      
      <category>FF14</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏</tag>
      
      <tag>FF14</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原神家具套组手记</title>
    <link href="/2021/08/15/2021-08-15-yuanshen-hu/"/>
    <url>/2021/08/15/2021-08-15-yuanshen-hu/</url>
    
    <content type="html"><![CDATA[<h1 id="室内套装">室内套装</h1><h2 id="烟霞入梦阁">烟霞入梦阁</h2><figure><img src="/images/posts/yuanshen/image-20210815192037463.png" alt="image-20210815192037463" /><figcaption aria-hidden="true">image-20210815192037463</figcaption></figure><ul class="task-list"><li><input type="checkbox" disabled="" checked="" />1 X 迎宾地毯 -「惠然之顾」</li><li><input type="checkbox" disabled="" checked="" />1 X 朱漆垂香木百宝阁</li><li><input type="checkbox" disabled="" checked="" />1 X 却砂木金纹衣柜</li><li><input type="checkbox" disabled="" checked="" />1 X 松木方形茶桌</li><li><input type="checkbox" disabled="" checked="" />1 X 白瓷茶具 -「怀质抱真」</li><li><input type="checkbox" disabled="" checked="" />2 X 松木靠背茶椅</li><li><input type="checkbox" disabled="" checked="" />1 X 却砂木金纹床头柜</li><li><input type="checkbox" disabled="" checked="" />1 X 贝壳灯罩硬质台灯</li><li><input type="checkbox" disabled="" checked="" />1 X 烟霞云梦榻</li><li><input type="checkbox" disabled="" checked="" />1 X 绿植盆栽 -「澄澈的清风」</li><li><input type="checkbox" disabled="" checked="" />1 X 琉璃亭却砂木立灯</li><li><input type="checkbox" disabled="" checked="" />1 X 松木折屏 -「云来帆影」</li></ul><h2 id="绯云文斋">绯云文斋</h2><figure><img src="/images/posts/yuanshen/image-20210815193308274.png" alt="image-20210815193308274" /><figcaption aria-hidden="true">image-20210815193308274</figcaption></figure><ul class="task-list"><li><input type="checkbox" disabled="" />2 X 松木靠背茶椅</li><li><input type="checkbox" disabled="" />1 X 木纹雅致的书法桌案</li><li><input type="checkbox" disabled="" />1 X 纸墨笔砚 -「临池学书J</li><li><input type="checkbox" disabled="" />1 X 朱漆垂香木卷轴书架</li><li><input type="checkbox" disabled="" />1 X 垂香木商铺立柜</li><li><input type="checkbox" disabled="" />1 X 朱漆垂香木百宝阁</li><li><input type="checkbox" disabled="" />1 X 松木折屏 -「云来帆影」</li><li><input type="checkbox" disabled="" />1 X 琉璃亭却砂木立灯</li><li><input type="checkbox" disabled="" />2 X 绿植盆栽 -「澄澈的清风」</li><li><input type="checkbox" disabled="" />1 X 绿植盆栽 -「松青尺树上」</li><li><input type="checkbox" disabled="" />1 X 松木朱漆圆凳</li><li><input type="checkbox" disabled="" checked="" />1 X 迎宾地毯 -「惠然之顾J</li></ul><h2 id="秘术研究所">秘术研究所</h2><figure><img src="/images/posts/yuanshen/image-20210815234531475.png" alt="image-20210815234531475" /><figcaption aria-hidden="true">image-20210815234531475</figcaption></figure><ul class="task-list"><li><input type="checkbox" disabled="" checked="" />1 X 高大的桦木衣柜</li><li><input type="checkbox" disabled="" checked="" />1 X 「司书的宝库」</li><li><input type="checkbox" disabled="" checked="" />1 X 炼金装置 - 「水火之间」</li><li><input type="checkbox" disabled="" checked="" />1 X 骑士团的办公桌</li><li><input type="checkbox" disabled="" checked="" />1 X 炼金器件 -「尘埃的重量」</li><li><input type="checkbox" disabled="" checked="" />1 X 精巧的沙漏摆件</li><li><input type="checkbox" disabled="" checked="" />1 X 厚重的图书馆长桌</li><li><input type="checkbox" disabled="" checked="" />1 X 「学者的倦怠」</li><li><input type="checkbox" disabled="" checked="" />1 X 「坚定意志」</li><li><input type="checkbox" disabled="" checked="" />1 X 绿植盆栽 -「澄澈的清风」</li><li><input type="checkbox" disabled="" checked="" />2 X 「晴空蓝的午后」</li><li><input type="checkbox" disabled="" checked="" />1 X 整齐叠放的书本</li><li><input type="checkbox" disabled="" checked="" />1 X 蒙德地毯 -「明红的热忱」</li></ul><h1 id="室外套装">室外套装</h1><h2 id="千家餮飧坊">千家餮飧坊</h2><figure><img src="/images/posts/yuanshen/image-20210818110549843.png" alt="image-20210818110549843" /><figcaption aria-hidden="true">image-20210818110549843</figcaption></figure><ul class="task-list"><li><input type="checkbox" disabled="" checked="" />1 X 竹制露天茶桌</li><li><input type="checkbox" disabled="" checked="" />1 X 酒肆货柜 -「会须百杯饮」</li><li><input type="checkbox" disabled="" checked="" />3 X 木制露天茶桌</li><li><input type="checkbox" disabled="" />1 X 垂香木厨房货架</li><li><input type="checkbox" disabled="" />1 X 「百味四宫釜」</li><li><input type="checkbox" disabled="" />1 X 果蔬商贩的谨慎</li><li><input type="checkbox" disabled="" checked="" />1 X 双重商摊 -「运势层层高」</li><li><input type="checkbox" disabled="" checked="" />1 X 果蔬摊 -「案上田园」</li><li><input type="checkbox" disabled="" checked="" />2 X 储物袋 -「隐雷退散」</li><li><input type="checkbox" disabled="" checked="" />2 X 竹框酒坛 -「琼浆待月往」</li><li><input type="checkbox" disabled="" checked="" />1 X 退邪灯 -「明照左右」</li><li><input type="checkbox" disabled="" checked="" />1 X 「行商石门北」</li><li><input type="checkbox" disabled="" checked="" />1 X 旧式水井</li><li><input type="checkbox" disabled="" />1 X 茁壮的萃华树</li><li><input type="checkbox" disabled="" />1 X 「猎人的暗哨」</li></ul>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>游戏</category>
      
      <category>原神</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>游戏</tag>
      
      <tag>原神</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FF14生产职业各等级装配配置</title>
    <link href="/2021/07/14/2021-07-14-FF14-shengchan/"/>
    <url>/2021/07/14/2021-07-14-FF14-shengchan/</url>
    
    <content type="html"><![CDATA[<h1 id="级装备">26级装备</h1><table><thead><tr class="header"><th style="text-align: center;">LV.26</th><th style="text-align: center;">名称</th><th style="text-align: center;">来源</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">主手</td><td style="text-align: center;">黑铁雕纹XX</td><td style="text-align: center;">主城工具商</td></tr><tr class="even"><td style="text-align: center;">副手</td><td style="text-align: center;">新来者XX</td><td style="text-align: center;">主城工具商</td></tr><tr class="odd"><td style="text-align: center;">头</td><td style="text-align: center;">白银作业眼镜</td><td style="text-align: center;">主城工具商</td></tr><tr class="even"><td style="text-align: center;">衣</td><td style="text-align: center;">棉绒巧匠短上衣</td><td style="text-align: center;">主城工具商</td></tr><tr class="odd"><td style="text-align: center;">手</td><td style="text-align: center;">棉绒半指手套</td><td style="text-align: center;">主城工具商</td></tr><tr class="even"><td style="text-align: center;">腰</td><td style="text-align: center;">山羊革工具腰带</td><td style="text-align: center;">主城工具商</td></tr><tr class="odd"><td style="text-align: center;">腿</td><td style="text-align: center;">棉绒裤袜</td><td style="text-align: center;">主城工具商</td></tr><tr class="even"><td style="text-align: center;">鞋</td><td style="text-align: center;">榆木木鞋</td><td style="text-align: center;">主城工具商</td></tr><tr class="odd"><td style="text-align: center;">耳环</td><td style="text-align: center;">兽角耳坠</td><td style="text-align: center;">主城饰品商</td></tr><tr class="even"><td style="text-align: center;">项链</td><td style="text-align: center;">黄铜工艺项环</td><td style="text-align: center;">主城饰品商</td></tr><tr class="odd"><td style="text-align: center;">手环</td><td style="text-align: center;">白银巧匠手环</td><td style="text-align: center;">主城饰品商</td></tr><tr class="even"><td style="text-align: center;">戒指1</td><td style="text-align: center;">黄铜巧匠戒指</td><td style="text-align: center;">主城饰品商</td></tr><tr class="odd"><td style="text-align: center;">戒指2</td><td style="text-align: center;">黄铜巧匠戒指</td><td style="text-align: center;">主城饰品商</td></tr><tr class="even"><td style="text-align: center;">食物</td><td style="text-align: center;">石子汤</td><td style="text-align: center;">金蝶酒保</td></tr></tbody></table><p>这一阶段到40级大约需要21个左右的物品，根据当前等级调整即可</p><h1 id="级装备-1">41级装备</h1><table><thead><tr class="header"><th style="text-align: center;">LV.41</th><th style="text-align: center;">名称</th><th style="text-align: center;">来源</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">主手</td><td style="text-align: center;">秘银XX</td><td style="text-align: center;">主城工具商</td></tr><tr class="even"><td style="text-align: center;">副手</td><td style="text-align: center;">革柄白钢XX</td><td style="text-align: center;">主城工具商</td></tr><tr class="odd"><td style="text-align: center;">头</td><td style="text-align: center;">亚麻猎鹿帽</td><td style="text-align: center;">主城工具商</td></tr><tr class="even"><td style="text-align: center;">衣</td><td style="text-align: center;">亚麻围裙装</td><td style="text-align: center;">主城工具商</td></tr><tr class="odd"><td style="text-align: center;">手</td><td style="text-align: center;">野猪革耐热手套</td><td style="text-align: center;">主城工具商</td></tr><tr class="even"><td style="text-align: center;">腰</td><td style="text-align: center;">亚麻围裙</td><td style="text-align: center;">主城工具商</td></tr><tr class="odd"><td style="text-align: center;">腿</td><td style="text-align: center;">亚麻工作裤</td><td style="text-align: center;">主城工具商</td></tr><tr class="even"><td style="text-align: center;">鞋</td><td style="text-align: center;">野猪革长靴</td><td style="text-align: center;">主城工具商</td></tr><tr class="odd"><td style="text-align: center;">耳环</td><td style="text-align: center;">狼牙耳坠</td><td style="text-align: center;">主城饰品商</td></tr><tr class="even"><td style="text-align: center;">项链</td><td style="text-align: center;">白银工艺项环</td><td style="text-align: center;">主城饰品商</td></tr><tr class="odd"><td style="text-align: center;">手环</td><td style="text-align: center;">白银巧匠手环</td><td style="text-align: center;">主城饰品商</td></tr><tr class="even"><td style="text-align: center;">戒指1</td><td style="text-align: center;">白银巧匠戒指</td><td style="text-align: center;">主城饰品商</td></tr><tr class="odd"><td style="text-align: center;">戒指2</td><td style="text-align: center;">白银巧匠戒指</td><td style="text-align: center;">主城饰品商</td></tr><tr class="even"><td style="text-align: center;">食物</td><td style="text-align: center;">石子汤</td><td style="text-align: center;">金蝶酒保</td></tr></tbody></table><p><strong>给衣服打一个魔匠壹一个魔匠贰</strong></p><p>此阶段基本上一个收藏品升一级，看看差几级搓几个就好了</p><h1 id="级装备-2">50级装备</h1><table><thead><tr class="header"><th style="text-align: center;">LV.50</th><th style="text-align: center;">名称</th><th style="text-align: center;">来源</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">主手</td><td style="text-align: center;">工匠陆行鸟XX</td><td style="text-align: center;">军票</td></tr><tr class="even"><td style="text-align: center;">副手</td><td style="text-align: center;">秘银XX</td><td style="text-align: center;">主城工具商</td></tr><tr class="odd"><td style="text-align: center;">头</td><td style="text-align: center;">工匠下框眼镜</td><td style="text-align: center;">军票</td></tr><tr class="even"><td style="text-align: center;">衣</td><td style="text-align: center;">工匠外衣</td><td style="text-align: center;">军票</td></tr><tr class="odd"><td style="text-align: center;">手</td><td style="text-align: center;">工匠指套</td><td style="text-align: center;">军票</td></tr><tr class="even"><td style="text-align: center;">腰</td><td style="text-align: center;">盗龙烹饪腰带</td><td style="text-align: center;">主城工具商</td></tr><tr class="odd"><td style="text-align: center;">腿</td><td style="text-align: center;">工匠裤袜</td><td style="text-align: center;">军票</td></tr><tr class="even"><td style="text-align: center;">鞋</td><td style="text-align: center;">工匠木鞋</td><td style="text-align: center;">军票</td></tr><tr class="odd"><td style="text-align: center;">耳环</td><td style="text-align: center;">红珊瑚耳坠</td><td style="text-align: center;">伊修加德饰品商</td></tr><tr class="even"><td style="text-align: center;">项链</td><td style="text-align: center;">绿金工艺项环</td><td style="text-align: center;">伊修加德饰品商</td></tr><tr class="odd"><td style="text-align: center;">手环</td><td style="text-align: center;">绿金巧匠手环</td><td style="text-align: center;">伊修加德饰品商</td></tr><tr class="even"><td style="text-align: center;">戒指1</td><td style="text-align: center;">绿金巧匠戒指</td><td style="text-align: center;">伊修加德饰品商</td></tr><tr class="odd"><td style="text-align: center;">戒指2</td><td style="text-align: center;">绿金巧匠戒指</td><td style="text-align: center;">伊修加德饰品商</td></tr><tr class="even"><td style="text-align: center;">食物</td><td style="text-align: center;">血色五海杂烩汤</td><td style="text-align: center;">水晶都</td></tr></tbody></table><p>需要搓大概35个左右直接升到63级；升到60级需要24个左右。</p><h1 id="级装备-3">63级装备</h1><table><thead><tr class="header"><th style="text-align: center;">LV.63</th><th style="text-align: center;">名称</th><th style="text-align: center;">来源</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">主手</td><td style="text-align: center;">硬钢XX</td><td style="text-align: center;">黄金港</td></tr><tr class="even"><td style="text-align: center;">副手</td><td style="text-align: center;">硬钢XX</td><td style="text-align: center;">黄金港</td></tr><tr class="odd"><td style="text-align: center;">头</td><td style="text-align: center;">红玉棉布无檐帽</td><td style="text-align: center;">黄金港</td></tr><tr class="even"><td style="text-align: center;">衣</td><td style="text-align: center;">红玉棉布短上衣</td><td style="text-align: center;">黄金港</td></tr><tr class="odd"><td style="text-align: center;">手</td><td style="text-align: center;">牛鬼革巧匠手套</td><td style="text-align: center;">黄金港</td></tr><tr class="even"><td style="text-align: center;">腰</td><td style="text-align: center;">红玉棉布围裙</td><td style="text-align: center;">黄金港</td></tr><tr class="odd"><td style="text-align: center;">腿</td><td style="text-align: center;">红玉棉布打底裤</td><td style="text-align: center;">黄金港</td></tr><tr class="even"><td style="text-align: center;">鞋</td><td style="text-align: center;">牛鬼革皮靴</td><td style="text-align: center;">黄金港</td></tr><tr class="odd"><td style="text-align: center;">耳环</td><td style="text-align: center;">巧手之主耳坠</td><td style="text-align: center;">田园郡黄票换取</td></tr><tr class="even"><td style="text-align: center;">项链</td><td style="text-align: center;">巧手之主项环</td><td style="text-align: center;">田园郡黄票换取</td></tr><tr class="odd"><td style="text-align: center;">手环</td><td style="text-align: center;">巧手之主手环</td><td style="text-align: center;">田园郡黄票换取</td></tr><tr class="even"><td style="text-align: center;">戒指1</td><td style="text-align: center;">巧手之主戒指</td><td style="text-align: center;">田园郡黄票换取</td></tr><tr class="odd"><td style="text-align: center;">戒指2</td><td style="text-align: center;">巧手之主戒指</td><td style="text-align: center;">田园郡黄票换取</td></tr><tr class="even"><td style="text-align: center;">食物</td><td style="text-align: center;">血色五海杂烩汤HQ</td><td style="text-align: center;">板子</td></tr></tbody></table><h1 id="级">70级</h1><p>巧手之巅XX</p><p>生产票据换取</p><p>无需食物</p><p>到70级可以去做生产的职业任务，全部做完基本上可以升到76级，不够就去补点蛮族和老主顾。</p><p>760搓大概20个左右即可升到80级。</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>游戏</category>
      
      <category>FF14</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>游戏</tag>
      
      <tag>FF14</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装自己的网盘--nextcloud服务端搭建手册</title>
    <link href="/2021/02/28/2021-02-28-nextcloud/"/>
    <url>/2021/02/28/2021-02-28-nextcloud/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>本教程参考官方文档<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[https://docs.nextcloud.com/server/21/admin_manual/installation/source_installation.html#](https://docs.nextcloud.com/server/21/admin_manual/installation/source_installation.html#)">[1]</span></a></sup>编写，加以一些补充说明。</p><div class="note note-warning">            <p>本文系统为Debain10，实际操作时请以你的系统为准</p><p>在debain10系统中，以root用户登陆时输入所有命令均无需sudo</p><p>为了适合一般情况，本文在所有命令前添加了sudo</p>          </div><p>对于一些操作过程中可能遇到的问题，写在了<a href="#%20额外说明">额外说明</a>一章中，可供参考。</p><h1 id="安装过程">安装过程</h1><h2 id="一安装依赖">一、安装依赖</h2><h3 id="安装php4.7">安装PHP4.7</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt -y install lsb-release apt-transport-https ca-certificates <br><span class="hljs-built_in">sudo</span> wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb https://packages.sury.org/php/ <span class="hljs-subst">$(lsb_release -sc)</span> main&quot;</span> | <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/php.list<br><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt -y install php7.4<br></code></pre></td></tr></table></figure><h3 id="安装apachemariadb及依赖的php模块">安装apache、mariadb及依赖的PHP模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt -y install apache2 mariadb-server libapache2-mod-php7.4<br><span class="hljs-built_in">sudo</span> apt -y install php7.4-gd php7.4-mysql php7.4-curl php7.4-mbstring php7.4-intl<br><span class="hljs-built_in">sudo</span> apt -y install php7.4-gmp php7.4-bcmath php-imagick php7.4-xml php7.4-zip<br></code></pre></td></tr></table></figure><h3 id="配置数据库">配置数据库</h3><p>首先创建root用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> /etc/init.d/mysql start<br><span class="hljs-built_in">sudo</span> mysql -u root -p<br></code></pre></td></tr></table></figure><p>回车之后会要求为root账户设定密码，输入之后回车，即可看见类似如下的字样：</p><p><img src="/images/posts/nextcloud/image-20210228113414161.png" /></p><p>接下来为nextcloud创建用户名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;username&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;password&#x27;</span>;<br><span class="hljs-keyword">CREATE</span> DATABASE IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> nextcloud <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci;<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILEGES <span class="hljs-keyword">ON</span> nextcloud.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;username&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;<br>FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>将上述命令中的<code>username</code>替换为你自己的用户名，<code>password</code>替换为你自己的密码</p>          </div><p><img src="/images/posts/nextcloud/image-20210228114126688.png" /></p><p>之后，可以输入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">quit;<br></code></pre></td></tr></table></figure><p>退出数据库命令行。</p><h2 id="二安装nextcloud">二、安装nextcloud</h2><p>首先，进入apache的web目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /var/www/html<br></code></pre></td></tr></table></figure><p>接下来前往<a href="https://nextcloud.com/install/">https://nextcloud.com/install/</a>下载服务端安装包，选择Download for server：</p><figure><img src="/images/posts/nextcloud/image-20210228131212430.png" alt="下载界面" /><figcaption aria-hidden="true">下载界面</figcaption></figure><p>之后，可以点击download按钮将压缩包下载到本地，再用FTP传到服务端，也可以右键复制下载链接之后用命令行下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://download.nextcloud.com/server/releases/nextcloud-21.0.0.zip<br></code></pre></td></tr></table></figure><figure><img src="/images/posts/nextcloud/image-20210228131258395.png" alt="下载服务端" /><figcaption aria-hidden="true">下载服务端</figcaption></figure><p>解压：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> unzip nextcloud-21.0.0.zip<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>如果你不是21.0.0，记得换成相应的版本，反正tab一打就补全了</p>          </div><p>重启apache：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl restart apache2<br></code></pre></td></tr></table></figure><h2 id="三配置apache">三、配置apache</h2><p>编辑apache的配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano /etc/apache2/sites-available/nextcloud.conf<br></code></pre></td></tr></table></figure><p>将其内容写为：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Alias</span> /nextcloud <span class="hljs-string">&quot;/var/www/nextcloud/&quot;</span><br><br><span class="hljs-section">&lt;Directory /var/www/nextcloud/&gt;</span><br>  <span class="hljs-attribute">Require</span> <span class="hljs-literal">all</span> granted<br>  <span class="hljs-attribute">AllowOverride</span> <span class="hljs-literal">All</span><br>  <span class="hljs-attribute">Options</span> FollowSymLinks MultiViews<br><br>  <span class="hljs-section">&lt;IfModule mod_dav.c&gt;</span><br>    <span class="hljs-attribute">Dav</span> <span class="hljs-literal">off</span><br>  <span class="hljs-section">&lt;/IfModule&gt;</span><br><span class="hljs-section">&lt;/Directory&gt;</span><br></code></pre></td></tr></table></figure><p>按CTRL+O保存，CTRL+X退出。</p><p>之后使配置文件生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">a2ensite nextcloud.conf<br>systemctl reload apache2<br></code></pre></td></tr></table></figure><p>接下来，设置启用一些模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">a2enmod rewrite<br>a2enmod headers<br>a2enmod <span class="hljs-built_in">env</span><br>a2enmod <span class="hljs-built_in">dir</span><br>a2enmod mime<br>a2enmod ssl<br>a2ensite default-ssl<br>systemctl reload apache2<br></code></pre></td></tr></table></figure><h2 id="四从网页端完成安装">四、从网页端完成安装</h2><p>当上面所有信息配置完毕之后，访问 serverIP/nextcloud 即可看到网盘的初始化界面：</p><figure><img src="/images/posts/nextcloud/image-20210228160855466.png" alt="填写相关信息" /><figcaption aria-hidden="true">填写相关信息</figcaption></figure><p>等待安装完成之后，即可看到相应的界面：</p><figure><img src="/images/posts/nextcloud/image-20210228161853337.png" alt="登录界面" /><figcaption aria-hidden="true">登录界面</figcaption></figure><h1 id="额外说明">额外说明</h1><h2 id="一关于数据库">一、关于数据库</h2><p>可以不安装mariadb而换用SQLite，但是当网盘文件存放较多，使用者也较多时，还是建议安装mariadb。</p><h2 id="二使用phpmyadmin图形化管理数据库">二、使用phpMyAdmin图形化管理数据库</h2><p>首先进入apache的web根目录，一般为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /var/www/html<br></code></pre></td></tr></table></figure><p>之后在根目录下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> wget https://files.phpmyadmin.net/phpMyAdmin/5.1.0/phpMyAdmin-5.1.0-all-languages.zip<br><span class="hljs-built_in">sudo</span> unzip phpMyAdmin-5.1.0-all-languages.zip<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> -R phpMyAdmin-5.1.0-all-languages phpMyAdmin<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf phpMyAdmin-5.1.0-all-languages<br></code></pre></td></tr></table></figure><p>有点蠢（<del>其实就是我忘了剪切的指令又懒得去搜罢了</del>）</p><p>然后重启apache：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl restart apache2<br></code></pre></td></tr></table></figure><p>之后前往 serverIP/phpMyAdmin 即可访问管理界面：</p><p><img src="/images/posts/nextcloud/image-20210228125301455.png" /></p><p>若发现无法通过root用户登录数据库，可以先从命令行登录数据库后，执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;password&#x27;</span>;<br>FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>将上述命令中的<code>password</code>替换为你自己的密码</p>          </div><p>之后就可以通过密码登录了。</p><h1 id="参考文档">参考文档</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://docs.nextcloud.com/server/21/admin_manual/installation/source_installation.html#">https://docs.nextcloud.com/server/21/admin_manual/installation/source_installation.html#</a> <a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>计算机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>群星舰船搭配</title>
    <link href="/2021/02/19/2021-02-19-stellaris-ship/"/>
    <url>/2021/02/19/2021-02-19-stellaris-ship/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>本文总结自机械天团群文件</p><p>编写版本为2.7.2</p>          </div><h1 id="理论篇">理论篇</h1><h2 id="射程即是正义">射程即是正义：</h2><p>玩家对ai的最大优势不是运营，也不是科研，是射程，ai的射程不会动，战列也永远是50射程，但是玩家调整一下政策和作战电脑就可以白嫖很多的射程，但是需要注意的是，航母作战电脑虽然作战距离150，有150的接战距离，但是这个不是射程，只是150码以内有敌人在自动开始接战，不加射程，特别蠢。敌人越强，射程越重要。</p><h2 id="大舰巨炮">大舰巨炮：</h2><p>众所周知，群星这个游戏只有四条船：护卫，战列，主宰，巨像。</p><p>对于萌新的运营来说，我常说的一句话：有足够的人口才能有足够的资源，在同等人口的开局下，科研和合金不可兼得，必须要有足够多的人口才能起合金厂，起配套的一产等等。所以，我们早战开局造完护卫以后就不研究更往上的驱逐，巡洋了，原因一是因为舰船科技污染科技卡池，原因二则是因为合金人口都转去科研了，越早飞升玩家越强嘛。所以，如果想有最好的游戏体验，前期爆船掠夺人口，中期转科研，后期战列（高配护卫）出山是最好的选择。</p><p>为什么没有泰坦？泰坦的buff不行，唯一有用的是减护盾，但是电弧不需要打护盾，而且泰坦的舰容太大，还没有X槽，编入编队里还不如编入战列。</p><h2 id="最好的防御就是进攻">最好的防御就是进攻：</h2><p>舰船的很大一笔开销是支出给护甲，如果能把护甲节约掉，无疑能节约很多资源来上更多的巨炮，根据我们按照射程优先的战术指导思路，且群星有不消耗合金只消耗部分稀有资源的廉价替代品，所以护甲就是完全不必要的东西了，<strong>所有舰队在一整把游戏，应该只有四种状态：</strong></p><ul><li>一级盾</li><li>小型水晶复合锻甲（蓝甲）</li><li>水晶锻造镀层（红甲）</li><li>无甲（这种状态很极端，一般只有25X天灾才用的上）</li></ul><p>为什么不带暗物质？暗物质只有护卫，巨像，主宰用的上，而且只能装在一个配件，就是暗物质推进器，纠其原因，还是因为贵，100暗物质后期可能要上5000电。</p><p><strong>配船时必须注意右边的配件栏，最好要确保一模一样！</strong></p><p>配装以前，我们先了解一下一些重要配件的获取来源。</p><h1 id="护甲篇">护甲篇</h1><p>群星有一个野怪叫做晶态实体，群居，每日快乐的游荡在某个你没探索的星系，四处乱逛</p><figure><img src="/images/posts/stellaris/image-20210219105403993.png" alt="晶体" /><figcaption aria-hidden="true">晶体</figcaption></figure><p>发现之后在日志里进行研究，可以获得俩个选项，一是获得5%的能量币产出，二是获得50%研究进度的舰船水晶复合镀层，选择第二项以后在工程学里进行研究就可以拿到最基础的蓝甲了。</p><figure><img src="/images/posts/stellaris/image-20210219105550633.png" alt="蓝甲" /><figcaption aria-hidden="true">蓝甲</figcaption></figure><p>如果你的档没有晶态实体怎么办？我们还有下位替代品</p><figure><img src="/images/posts/stellaris/image-20210219105626752.png" alt="偏射盾" /><figcaption aria-hidden="true">偏射盾</figcaption></figure><p>没错，就是最初始的一级盾，安慰一下自己就行了，至少我们不是裸奔，我们有给舰队上衣服的，剩下来的合金可以报出更多的大炮，射程足够白嫖一切了。</p><figure><img src="/images/posts/stellaris/image-20210219105724298.png" alt="晶态实体" /><figcaption aria-hidden="true">晶态实体</figcaption></figure><p>晶态实体的老家，拥有和平思潮遇到可以进行研究，直接获得红甲，其他思潮可以直接打死研究。</p><p>红甲作为蓝甲的上位替代品，普通国家需要拿到还要经历一番战斗才行</p><figure><img src="/images/posts/stellaris/image-20210219105910023.png" alt="image-20210219105910023" /><figcaption aria-hidden="true">image-20210219105910023</figcaption></figure><p>击败以后在工程学里进行研究。</p><h1 id="武器篇">武器篇</h1><p>出于工程池的庞杂的科技树以及能量武器的强势，我们所有的武器装备来源，主要都是物理学科技，我们先列举出我们能用的武器吧。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/images/posts/stellaris/image-20210219110000579.png" alt="image-20210219110000579" /></div><div class="group-image-wrap"><img src="/images/posts/stellaris/image-20210219110036222.png" alt="image-20210219110036222" /></div><div class="group-image-wrap"><img src="/images/posts/stellaris/image-20210219110012602.png" alt="image-20210219110012602" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/images/posts/stellaris/image-20210219110022833.png" alt="image-20210219110022833" /></div><div class="group-image-wrap"><img src="/images/posts/stellaris/image-20210219110047288.png" alt="image-20210219110047288" /></div></div></div><p>以及工程线的</p><figure><img src="/images/posts/stellaris/image-20210219110108309.png" alt="image-20210219110108309" /><figcaption aria-hidden="true">image-20210219110108309</figcaption></figure><hr /><p>然后我们开始删除会污染科技树的武器。</p><p><img src="/images/posts/stellaris/image-20210219110858255.png" alt="等离子发射器" />没有一点用，到游戏结束都不需要点。</p><p>其次是<img src="/images/posts/stellaris/image-20210219110931086.png" alt="光矛" />这个也不需要点， 我们有上位替代品，电弧。</p><p>但是<img src="/images/posts/stellaris/image-20210219111120664.png" alt="X射线发射器" />这个必须点，因为后置武器是<img src="/images/posts/stellaris/image-20210219111214020.png" alt="中子发射器" /></p><p>中子发射器是什么效果，大家都很清楚，超远的射程成了没出电弧以前的最优选择。</p><p>点防的上位替代品——高炮，所以点防也从科技树中删除，因为高炮追踪高，适合打小船，点防只适合打导弹。</p><p>最后是电弧，前置科技裂解炮，这个没什么用，要不是为了电弧，我才不点呢。</p><h1 id="舰船搭配正篇">舰船搭配（正篇）</h1><h2 id="前期护卫舰">（前期）护卫舰</h2><figure><img src="/images/posts/stellaris/image-20210219123042043.png" alt="护卫舰" /><figcaption aria-hidden="true">护卫舰</figcaption></figure><p>皮糙肉厚还耐用，没什么可以评价的，这是前期最优解的配船。</p><h2 id="后期护卫舰">（后期）护卫舰</h2><p>然后是后期的护卫，后期的护卫如何搭配装备？后期的护卫的定位是什么？我们要配装，就需要了解护卫的定位，出于射程即是正义的原则，我们后期的战舰主力是战列，护卫实际上没有任何帮助，那么护卫是不是就可以不出？不，<strong>舰队在穿越时空航道的时候，只需要舰队里最快的那艘船通过航道，那么整个舰队就会被带到新星系</strong>，出于这个机制，我们研发出了这种配置的护卫：</p><figure><img src="/images/posts/stellaris/image-20210219123129267.png" alt="带路护卫舰" /><figcaption aria-hidden="true">带路护卫舰</figcaption></figure><p>这种舰船，有个通俗的名称：雪橇犬。国中土耳其，舰中哈士奇！，后期依靠各种buff，亚光速可以很轻松的飚上420，做到真正的光速支援。<strong>发生战斗之前需要手动把护卫舰从主力舰队中分离出去，因为护卫没有战斗力，所以普通ai不会将它视为作战舰船，可以当做眼虫使用。</strong></p><figure><img src="/images/posts/stellaris/image-20210219123249701.png" alt="后期正常思路护卫舰" /><figcaption aria-hidden="true">后期正常思路护卫舰</figcaption></figure><p>正常思路的护卫，闪避堆满以后随便堆点其他的就行了。</p><h2 id="中期战列舰">（中期）战列舰</h2><figure><img src="/images/posts/stellaris/image-20210219123426925.png" alt="中期战列舰" /><figcaption aria-hidden="true">中期战列舰</figcaption></figure><p>因为中期舰容有限，大部分人口依旧在科研状态，随便挤出一些合金来暴打堕落，完整版的T-34或者电弧防空炮就是最优选择，俩队就可以宣战堕落，三队可以碾压堕落。</p><p>适用性很强的T-34（强烈推荐萌新们使用这个配置）：</p><figure><img src="/images/posts/stellaris/image-20210219123536534.png" alt="T-34" /><figcaption aria-hidden="true">T-34</figcaption></figure><p>我们注意到了部分玩家的需求，时间拖太久，ai的小船太多了，不知道怎么处理，我们根据性价比和战斗力俩个原则，推出了这个全新版本的T-34，节约合金，只为真正的战力。不带S槽是为了节约合金，不带舰载机是因为舰载机毁后期的科技树以及<strong>舰载机是真的鸡</strong>。</p><div class="note note-warning">            <p>（需要注意的是右边配件一栏，必须带炮击电脑，<strong>有红脑上红脑，有灵能跃迁上灵能跃迁，如果有红脑就不上预知接口，三个电脑关系是高级电脑&lt;预知接口&lt;知性战斗电脑，前提是没遇到肃正，遇到肃正就尽快将作战电脑换成高级电脑或者预知接口</strong>）</p>          </div><h2 id="后期战列舰">（后期）战列舰</h2><figure><img src="/images/posts/stellaris/image-20210219123929338.png" alt="天灾用战列舰" /><figcaption aria-hidden="true">天灾用战列舰</figcaption></figure><p>节约合金给真正的战力，射程既是正义，只适合打25X天灾，因为其他天灾都是顺手解决，不需要大动干戈造专门针对的舰船。</p><p>战列舰一直是争论最大的地方，很多人为了双穿选择带天云闪电却忽视了天云闪电的射程只有60。又比如航母，航母派最大的问题还是没在意射程，舰载机射程10，然后航母会刚刚好停留在电弧的射程内放出小飞机，然后，就没然后了，更别提航母小飞机没了就会自动紧急跃迁，损失在紧急跃迁的战列不计其数（进入紧急跃迁的舰船会损毁1%，剩下的全部大残），还有群星nt的优先级，航母打人也有顺序哦，打完一场战斗以后还需要180天时间补充飞机（你看不到，但是的确有冷却时间），污染后期科技树啊，还有很多很多，真是一言难尽，总结一个字就是垃圾。上述的T-34可谓是身经百战，只要出了五队满编，无论是五星上将难度的可汗堕落还是5X的天灾，都可以直接按死。</p><p>为什么不上光矛？拿天灾虫族来算一下吧，因为虫族无盾，只有船体和装甲，所以一直以来众多玩家都认为光矛和电弧相比，光矛对虫族伤害更大，经过计算，我们发现光矛在无解码器的情况下对虫族的伤害，虫族船体和甲1:2，光矛的伤害期望值是1400，需要完成的伤害是0.67+1，电弧的期望值是850，需要完成1，命中不考虑解码器，电弧35光矛29.75。</p><p>总结：电弧天下第一（备注，该情况只限于pve中）</p><h2 id="中期泰坦">（中期）泰坦</h2><figure><img src="/images/posts/stellaris/image-20210219124245926.png" alt="中期泰坦" /><figcaption aria-hidden="true">中期泰坦</figcaption></figure><p>我来考考大家，为什么泰坦不上T槽？明明T槽才是群星最大的槽啊？（巨像爬）</p><p>思考三秒钟再往下拉</p><figure><img src="/images/posts/stellaris/image-20210219124326391.png" alt="T槽" /><figcaption aria-hidden="true">T槽</figcaption></figure><p>很多萌新都不知道，T槽实际上既不算动能武器，也非能量武器，也就是说，<strong>T槽的伤害 无 ！法 ！ 被循环</strong>，伤害恒定，又因为T槽的射程过远，足足有250的射程，这导致经常出现一种情况：我觉得我打不过！我要跑路了！啊！泰坦你在干什么！你怎么突然射了一炮？接敌了？我的舰队没了。（而且因为泰坦的造价和它庞大的舰容，我们通常会把泰坦T出舰队编队外，主宰：你也来了啊）</p><h2 id="后期泰坦">（后期）泰坦</h2><figure><img src="/images/posts/stellaris/image-20210219124430946.png" alt="后期泰坦" /><figcaption aria-hidden="true">后期泰坦</figcaption></figure><p>不带武器可以避免ai将舰船标为作战部队，可以有效节约合金和提高生存率。</p><p>泰坦的敌对buff是在和泰坦在同一个星系内生效的，对己方的buff只能在同一舰队内的舰船生效。Buff的排名是护盾挡板&gt;量子去稳器&gt;亚空间陷阱。对己方的buff不推荐带，泰坦的舰容太大了，我们只需要一俩艘就可以了。</p><h2 id="主宰">主宰</h2><figure><img src="/images/posts/stellaris/image-20210219124620049.png" alt="主宰" /><figcaption aria-hidden="true">主宰</figcaption></figure><p>主宰重要是只是那个加四十射程的buff，因为主宰的唯一性和它的建造时间，不推荐将主宰卷入战斗，直接放到决战星系的安全航道旁就好了，打输了就跑路，实际上因为主宰只是buff制造机，全身除了那俩个X槽有点用，可以什么都不带，就带那个buff，反正平时位移也就靠跃迁，不带武器可以避免ai将主宰标为作战部队，可以有效节约合金和提高主宰生存率。</p><h2 id="舰队配置">舰队配置</h2><p><img src="/images/posts/stellaris/image-20210219125105512.png" /></p><p>不需要驱逐，不需要巡洋，战列拉满，剩下的上护卫。</p><h1 id="战斗辅助篇">战斗辅助篇</h1><h2 id="前期篇">前期篇：</h2><p>早战前期可以做的准备很少，对舰队的加成更多的是国策思潮上的加成，前期基本上只有俩个东西可以调整。</p><h3 id="一政策">一，政策</h3><p><img src="/images/posts/stellaris/image-20210219125245334.png" /></p><p>当至高传统关门时候就会出现这个政策，因为前期我们是护卫舰决斗，并没有射程优势，近身狗头的唯一加成就是射速。</p><h3 id="二将领">二，将领</h3><p>前期最好的将领是不屈将领<img src="/images/posts/stellaris/clip_image002.jpg" /></p><p>第二好的将领是火力全开将领</p><p><img src="/images/posts/stellaris/clip_image004.jpg" /></p><p>第三好的将领，迅捷什么的随意吧，别让你的陆军被抓了。</p><h2 id="后期篇">后期篇：</h2><p>后期的舰船辅助就几点</p><h3 id="一造船领袖以及造船总督">一，造船领袖以及造船总督。</h3><p>十分节约资源，必须招募一个，放在星港的星域上，他掌管的星域就有该星域造船费用减免，注意，不是整个帝国的造舰费用减免。</p><figure><img src="/images/posts/stellaris/image-20210219125506527.png" alt="image-20210219125506527" /><figcaption aria-hidden="true">image-20210219125506527</figcaption></figure><h3 id="二政策">二，政策</h3><p><img src="/images/posts/stellaris/image-20210219125706966.png" /></p><p>后期必须带上快速部署，这是唯一一个加射程的策略</p><h3 id="三法令">三，法令</h3><p><img src="/images/posts/stellaris/faling1.jpg" /></p><p><img src="/images/posts/stellaris/faling2.jpg" /></p><p><img src="/images/posts/stellaris/faling3.jpg" /></p><p><strong>最终决战</strong>的时候需要开的就这三个法令，不带天然气是因为战舰飞的慢，可以多射俩炮，其中，最后一个法令要求配合政策里的</p><p><img src="/images/posts/stellaris/zhengce1.jpg" /></p><p>防御战争来使用，加造舰速度。</p><h4 id="四将领">四，将领</h4><p>后期最好的上将只有一个，就是</p><figure><img src="/images/posts/stellaris/jiangling.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>必须带，所有主力舰队都必须带一个谨慎上将，什么？你问我后期我有一个十级的不屈亚光速什么杂七杂八buff上将和一个一级的谨慎上将，该选哪个当舰队上将？肯定是一级的谨慎啊，射程必须高于一切。</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>游戏</category>
      
      <category>群星</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>游戏</tag>
      
      <tag>群星</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>群星各政体（种族）岗位产出一览</title>
    <link href="/2021/02/19/2021-02-19-stellaris/"/>
    <url>/2021/02/19/2021-02-19-stellaris/</url>
    
    <content type="html"><![CDATA[<h1 id="群星主要岗位来源与产出">群星主要岗位来源与产出</h1><div class="note note-info">            <p>本文总结自机械天团群文件</p>          </div><h2 id="有机国家">1.有机国家</h2><h3 id="统治者">统治者</h3><h4 id="官员">1：官员</h4><p>基础产出：8舒适，3凝聚力</p><p>岗位来源：</p><ul><li>星球首府建筑；</li><li>生产部</li></ul><p>一般情况下最常用的统治者，前期星球稳定度主要靠官员提升；8点舒适与3点凝聚作为统治者产出也相对较高。</p><h4 id="商人">2：商人</h4><p>基础产出：5舒适，8贸易</p><p>岗位来源：</p><ul><li>繁荣传统的50人口1商人岗位；</li><li>星际交易所；</li><li>奴码神坛；</li><li>商人工会国策（该国策加2凝聚产出）；</li><li>巨企分部建筑；</li><li>复合商业区；</li><li>环世界商业区划。</li></ul><p>一般来说商人由于来源多，会是正常第二多的统治者岗位，但是较低的5舒适还有8贸易值产出，前期可以考虑关闭商人岗位。</p><h4 id="科研总管">3：科研总管</h4><p>基础产出：5物理 5社会 5工程 5舒适</p><p>岗位来源：</p><ul><li>技官治国国策，首府建筑提供的官员岗位部分替换为科研总管（该国策下加凝聚产出）；</li><li>研究中心</li></ul><p>技官治国作为最强前期国策之一，科研总管在岗位产出上相对一般但是其提供该岗位的国策或者建筑均相当重要。</p><h4 id="贵族">4：贵族</h4><p>基础产出：5稳定 3凝聚</p><p>岗位来源：</p><ul><li>贵族精英，首府建筑提供的官员岗位部分替换为贵族；</li><li>贵族精英国策建造贵族庄园建筑</li></ul><p>贵族作为提升后期稳定性最高的国策，该统治者岗位一岗位相对于3%星球全产，对人口多的星球收益较高。</p><h4 id="大祭司">5：大祭司</h4><p>基础产出：2社会学 6凝聚 5舒适</p><p>岗位来源：</p><ul><li>唯心主义信念堡垒；</li><li>唯心主义国策崇高圣职（该国策提高凝聚力产出）</li></ul><p>都玩唯心主义了，就不讨论强度了，开心就好。</p><h4 id="执行官">6：执行官</h4><p>基础产出：2凝聚 5舒适 4贸易</p><p>岗位来源：巨企替代官员岗位</p><p>巨企的官员岗位，不过贸易产出替代舒适相对于正常的官员整体是亏的。</p><h3 id="专家">专家</h3><h4 id="冶金师">1：冶金师</h4><p>基础产出：3合金</p><p>岗位来源：</p><ul><li>理想城区划；</li><li>合金铸造厂</li></ul><p>最主要的合金产出来源，不需要评价。</p><h4 id="工匠">2：工匠</h4><p>基础产出：6消费品</p><p>岗位来源：</p><ul><li>理想城区划，环世界商业区划；</li><li>民用工厂</li></ul><p>人口消费品主要来源，一般来说够用就行。</p><h4 id="执法者">3：执法者</h4><p>产出：1凝聚（警察国度增加1凝聚基础产出）；2星球防御军团；-25犯罪</p><p>岗位来源：</p><ul><li>环世界城市区划；</li><li>星球首府；</li><li>警署</li></ul><p>压犯罪率的主要岗位,不过由于和犯罪分子达成协议的决议存在，不是很需要。</p><h4 id="官僚">4：官僚</h4><p>基础产出：10行政上限（该产出只有星球类型与总督可以加成）（拜占庭国策+1稳定产出）</p><p>岗位来源：行政办公楼</p><p>够用就行，尽量不要吃到过多的规模debuff。</p><h4 id="科研工作者">5：科研工作者</h4><p>基础产出：4物理 4社会 4工程</p><p>岗位来源：</p><ul><li>实验室；</li><li>环世界区划；</li><li>特殊地块（包括区域A，扎纳姆，遗落星球中央尖塔，粒子加速器，迁徙林木）</li></ul><p>科研点数主要来源，能供的起的情况下应尽量多提供该岗位。</p><h4 id="演员">6：演员</h4><p>基础产出：10舒适 2凝聚</p><p>岗位来源：</p><ul><li>剧院；</li><li>理想城休闲区划；</li><li>异星动物园；</li><li>居住站休闲区划</li></ul><p>一般情况下产出舒适度最多的岗位。</p><h4 id="文化工作者">7：文化工作者</h4><p>基础产出：3社会 3凝聚</p><p>岗位来源：</p><ul><li>先驱者纪念碑；</li><li>理想城休闲区划；</li><li>异星动物园；</li><li>文化中心（行商）；</li><li>居住站休闲区划</li></ul><p>一般情况下的凝聚产出来源，需要凝聚力时可以多建纪念碑。</p><h4 id="医务工作者">8：医务工作者</h4><p>基础产出：5%有机人口增长 5舒适</p><p>岗位来源：基因诊所</p><p>该岗位5%人口增长聊胜于无，5点舒适产出并不能弥补该岗位整体上难以收回成本的情况。</p><h4 id="气体精炼工">9：气体精炼工</h4><p>基础产出：2异星天然气</p><p>岗位来源：异星天然气精炼厂</p><p>主要气体来源（没有孢子星球情况）。</p><h4 id="转化师">10：转化师</h4><p>基础产出：2稀有水晶</p><p>岗位来源：水晶合成厂（唯一有二级的稀有资源厂）</p><p>主要水晶来源。</p><h4 id="化学家">11：化学家</h4><p>基础产出：2易爆微粒</p><p>岗位来源：化学厂</p><p>主要易爆微粒来源。</p><h4 id="机器人专家">12：机器人专家</h4><p>基础产出：2人口组装（仅有量产、血肉苦弱飞升与肃正遗珍可以加成）</p><p>来源：</p><ul><li>机飞后首府建筑；</li><li>机械组装厂</li></ul><p>不会有人不知道机器人专家的重要性吧，不会吧，不会吧。</p><h4 id="灵能使">13：灵能使</h4><p>基础产出：3凝聚；-40犯罪；2星球防御军团</p><p>来源：灵能飞升后建造灵能军团建筑</p><p>都灵能飞升了，开心就好。</p><h4 id="决斗者">14：决斗者</h4><p>基础产出：3凝聚 12舒适 2舰容</p><p>来源：尚武文化国策下替代演员</p><p>全游戏提高舒适度的人口中产出最高的存在，不过需要消耗合金与占一个国策槽就见仁见智了。</p><h4 id="经理">15：经理</h4><p>基础产出：2社会 3凝聚 2贸易</p><p>来源：非唯心主义巨企替代文化工作者</p><p>文化工作者怎么用就怎么用呗。</p><h4 id="祭司">16：祭司</h4><p>基础产出：2社会 3凝聚 5舒适</p><p>来源：</p><ul><li>寺庙；</li><li>信念堡垒（前两者唯心专属）；</li><li>奴码神坛</li></ul><p>岗位产出较高但是大部分情况下唯心专属，奴码神坛提供的祭司岗位倒是可以前期使用。</p><h4 id="殖民者">17：殖民者</h4><p>基础产出：1食物 5舒适 1星球防御部队</p><p>来源：殖民星球至第一级首府建筑升级完成</p><p>该岗位不需要评价。</p><h4 id="气体工厂工程师">18：气体工厂工程师</h4><p>基础产出：3气体</p><p>来源：孢子气体星球上每40人口提供一岗位</p><p>运气好可以碰到的话基本上天然气不缺了。</p><h4 id="蓝荷转化师">19：蓝荷转化师</h4><p>基础产出：4合金</p><p>来源：星球蓝荷特殊地块</p><p>极其罕见的事件</p><h4 id="传送门研究者">20：传送门研究者</h4><p>该岗位基础产出有5种：</p><p>未研究触发：12物理</p><p>研究后：</p><ol type="1"><li>2物理 2暗物质；</li><li>12物理 6舒适 4贸易；</li><li>12物理 6电；</li><li>18物理（第4个没找到对应，可能有错误）</li></ol><p>来源：传送门星球地块</p><p>有趣的事件岗位。</p><h3 id="劳工">劳工</h3><h4 id="职员">1：职员</h4><p>基础产出：2舒适 2贸易</p><p>来源：</p><ul><li>城市区划（除了居住站外的所有球）；</li><li>居住站贸易区划；</li><li>物资仓库；</li><li>环世界商业区划；</li><li>商业中心；</li><li>旅游星球2人口提供1职员岗位；</li><li>巨企分部</li></ul><p>全游戏产出最低岗位，所以尽量别用。</p><h4 id="技师">2：技师</h4><p>基础产出：4电（机飞后6电）</p><p>来源：</p><ul><li>电网；</li><li>发电区划；</li><li>贝石发电厂；</li><li>居住站反应堆区划</li></ul><p>主要电力来源。</p><h4 id="矿工">3：矿工</h4><p>基础产出：4矿（矿业工会国策+1矿）</p><p>来源：</p><ul><li>采矿区划；</li><li>矿物处理站；</li><li>居住站航天采矿湾</li></ul><p>主要矿物来源。</p><h4 id="农民">4：农民</h4><p>基础产出：6粮</p><p>来源：</p><ul><li>农业区划；</li><li>水培农场；</li><li>食物加工厂</li></ul><p>主要食物来源，不过一般来说除了贸易多余的部分没有用处，基础产出最高的基础1产岗位。</p><h4 id="士兵">5：士兵</h4><p>基础产出：3防御部队 6舰容</p><p>来源：</p><ul><li>堡垒；</li><li>军事学院</li></ul><p>后期舰容主要来源，防御陆军主要来源，后期一个堡垒球能恶心死人。</p><h4 id="水晶矿工">6：水晶矿工</h4><p>基础产出：2稀有水晶（1矿物，矿业工会国策）</p><p>来源：特殊地块球的水晶矿井</p><p>补充稀有产出。</p><h4 id="微粒捕获工">7：微粒捕获工</h4><p>基础产出：2易爆微粒（1矿物，矿业工会国策）</p><p>来源：特殊地块球的微粒捕获阱</p><p>补充稀有产出。</p><h4 id="气体采集工">8：气体采集工</h4><p>基础产出：2异星天然气（1矿物，矿业工会国策）</p><p>来源：特殊地块星球的气体采集井</p><p>补充稀有产出。</p><h4 id="牲口">9：牲口</h4><p>基础产出：4粮（石头人为4矿）</p><p>来源：奴役方式为家畜的人口</p><p>比较亏的奴役方法，建议只针对海星。</p><h4 id="仆从">10：仆从</h4><p>基础产出：4舒适</p><p>来源：奴役方式为仆从的热人口</p><p>同样为较亏的奴役方式。</p><h4 id="巨兽猎手">11：巨兽猎手</h4><p>基础产出：8粮 6贸易</p><p>来源：泰坦星球上选择猎杀巨兽</p><p>事件专属，该选择可以将该星球作为食物产出球。</p><h4 id="古怪工厂工人">12：古怪工厂工人</h4><p>基础产出：4合金</p><p>来源：古怪工厂</p><p>事件专属，不是很重要</p><h4 id="繁荣传道者">13：繁荣传道者</h4><p>基础产出：3舒适 3贸易 1凝聚</p><p>来源：唯心巨企专属分部建筑繁荣神殿</p><p>是个人都比职员强。</p><h4 id="地底人联络人员">14：地底人联络人员</h4><p>基础产出：3舒适 5贸易</p><p>来源：地底人事件链星球</p><h3 id="不可接触者">不可接触者</h3><h4 id="驱逐灭绝">1：驱逐、灭绝</h4><p>无产出</p><h4 id="绝育人口">2：绝育人口</h4><p>可以正常进入劳工岗位</p><h4 id="强制奴役">3：强制奴役</h4><p>基础产出：3矿 3粮</p><p>来源：被强制奴役人口</p><p>人肉物质解压器，该怎么用第四天灾应该都清楚。</p><h4 id="加工">4：加工</h4><p>基础产出：6粮</p><p>来源：加工的人口</p><p>对海星最终处理方案。</p><h2 id="智械">2.智械</h2><h3 id="复合子个体">复合子个体</h3><h4 id="复制者">1： 复制者</h4><p>基础产出：1人口组装</p><p>来源：</p><ul><li>智械首府建筑；</li><li>组装厂</li></ul><p>智械的人口增长来源，虽然相对有机机器人专家2的人口组装相对较慢，不过在二级组装厂后，加上快速组装者等加成可以让智械拥有超过机械飞升的组装速度。</p><h4 id="演算者">2：演算者</h4><p>基础产出：4物理，4社会。4工程</p><p>来源：</p><ul><li>实验室；</li><li>星球超级计算机；</li><li>环世界科研区划；</li><li>居住站科研区划；</li><li>特殊地块（包括区域A，扎纳姆，遗落星球中央尖塔，粒子加速器，迁徙林木）</li></ul><p>智械的主要科研来源，相对于有机的研究人员，其维护消耗更多的电力，不过对智械也没有别的选择。</p><h4 id="猎杀者">3：猎杀者</h4><p>基础产出：-20反常度，2星球防御部队</p><p>来源：</p><ul><li>首府建筑；</li><li>护卫哨所</li></ul><p>智械的执法者，相对于有机可以通过与犯罪分子达成协议避免犯罪的debuff，智械由于人口幸福度效果锁定50%且没有与有机国家犯罪协议对应的星球决议去，其反常度后期会相对较高且会给星球带来负面效果。这使得该岗位相对重要，应尽量保持反常度相对较低的状态。</p><h4 id="协调者">4：协调者</h4><p>基础产出：+15帝国规模</p><p>来源：</p><ul><li>上传链路节点；</li><li>居住站首府建筑</li></ul><p>智械的官僚，相对于有机体的官僚岗位，协调者的基础产出高但是没有对应的领袖与星球类型加成。</p><h4 id="制造者">5：制造者</h4><p>基础产出：4合金</p><p>来源：</p><ul><li>铸造厂；</li><li>理想城铸造区划；</li></ul><p>智械的合金产出来源。</p><h4 id="工匠工蜂">6：工匠工蜂</h4><p>基础产出：8消费品</p><p>来源：</p><ul><li>民用工厂；</li><li>理想城区划（两者均为机仆专属）</li></ul><p>养手办用的岗位，至于机仆有多菜我就不吐槽了。</p><h4 id="评估者">7：评估者</h4><p>基础产出：4凝聚</p><p>来源：</p><ul><li>模拟站点(非机仆)；</li><li>文化中心（行商）</li></ul><p>非机仆的智械凝聚力来源之一，作用类似于有机的文化工作者</p><h4 id="水晶采集无人机">8：水晶采集无人机</h4><p>基础产出：2稀有水晶（+1矿物，碎岩机国策）</p><p>来源：特殊地块球的水晶矿井</p><p>补充稀有产出。</p><h4 id="微粒捕获无人机">9：微粒捕获无人机</h4><p>基础产出：2易爆微粒（+1矿物，碎岩机国策）</p><p>来源：特殊地块球的微粒捕获阱</p><p>补充稀有产出。</p><h4 id="气体采集无人机">10：气体采集无人机</h4><p>基础产出：2异星天然气（+1矿物，碎岩机国策）</p><p>来源：特殊地块星球的气体采集井</p><h4 id="精炼子个体">11：精炼子个体</h4><p>基础产出：2异星天然气</p><p>岗位来源：异星天然气精炼厂</p><p>主要气体来源（没有孢子星球情况）。</p><h4 id="透镜子个体">10：透镜子个体</h4><p>基础产出：2稀有水晶</p><p>岗位来源：水晶合成厂（唯一有二级的稀有资源厂）</p><p>主要水晶来源。</p><h4 id="化合子个体">11：化合子个体</h4><p>基础产出：2易爆微粒</p><p>岗位来源：化学厂</p><p>主要易爆微粒来源。</p><h4 id="位面传送门研究子个体">12：位面传送门研究子个体</h4><p>未研究触发：12物理</p><p>研究后：</p><ol type="1"><li>12物理 2暗物质；</li><li>12物理 6舒适 6电；</li><li>12物理 6电；</li><li>18物理（第4个没找到对应，可能有错误）</li></ol><h3 id="简单子个体">简单子个体</h3><h4 id="作战无人机">1：作战无人机</h4><p>基础产出：3防御，4舰队容量</p><p>来源：堡垒</p><p>舰容来源，智械的士兵岗位，人肉戴森球维稳必备</p><h4 id="维护子个体">2：维护子个体</h4><p>基础产出：4舒适（+1凝聚力，维护协议国策）</p><p>来源：</p><ul><li>智械首府；</li><li>城市区划（理想城、环、居住站）；</li><li>居住站休闲区划（机仆专属）；</li><li>有机庇护所（机仆专属）；</li><li>仓库；</li></ul><p>智械主要舒适度产出，相对于有机体演员的舒适度产出，维护子个体舒适产出较低使得智械维护人口往往是总人口的1/4，极大影响了格式塔的强度。</p><h4 id="技工子个体">3：技工子个体</h4><p>基础产出：6电</p><p>来源：</p><ul><li>发电区划（星球、环）；</li><li>居住站反应堆区划；</li><li>电网</li></ul><p>主要电力产出</p><h4 id="采矿子个体">4：采矿子个体</h4><p>基础产出：4矿</p><p>来源：</p><ul><li>矿物区划；</li><li>居住站航天采矿湾；</li><li>矿物处理中心</li></ul><p>矿物主要来源</p><h4 id="农业子个体">5：农业子个体</h4><p>基础产出：5粮</p><p>来源：</p><ul><li>农业区划；</li><li>食物加工厂（机仆，同化专属）</li></ul><p>别造，智械粮食根本没有意义，不会真有人喜欢养大爷吧。</p><h3 id="智械的有机体岗位">智械的有机体岗位</h3><h4 id="有机生命体遗珍">1：有机生命体遗珍</h4><p>基础产出：0.25%复合子个体产出，2凝聚</p><p>来源：</p><ul><li>机仆的有机庇护所；</li><li>机仆休闲区划</li></ul><p>维护费奇高且作用贼低的岗位建议机仆玩家吧所有有机体移到一个居住站上批处理。</p><h4 id="并入电网">2：并入电网</h4><p>基础产出：4电</p><p>来源：奴役方式为并入电网的有机人口</p><p>人肉戴森球不用解释吧</p><h4 id="化学处理化质合成">3：化学处理(化质合成)</h4><p>基础产出：6电</p><p>来源；净化方式为化学处理的有机人口</p><p>同样的人肉戴森球，至于选择哪个就随意吧。</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>游戏</category>
      
      <category>群星</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>游戏</tag>
      
      <tag>群星</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>几种经典的CNN模型</title>
    <link href="/2020/12/29/2020-12-29-CNNmodles/"/>
    <url>/2020/12/29/2020-12-29-CNNmodles/</url>
    
    <content type="html"><![CDATA[<h1 id="几种经典的cnn模型">几种经典的CNN模型</h1><p>首先，标准的CNN网络结构模型一般包括：</p><ul><li>卷积层</li><li>批标准化</li><li>激活函数</li><li>池化</li><li>dropout，休眠一定比例的神经元</li></ul><h2 id="lenet">1、LeNet</h2><p>共5层，包括两层卷积计算和三层全连接</p><ul><li>第一层卷积计算<ul><li>6个5*5卷积核，卷积步长为1，不使用全零填充</li><li>无批标准化</li><li>激活函数使用sigmoid</li><li>最大池化，池化核尺寸2*2，步长为2，不使用全零填充</li><li>无dropout</li></ul></li><li>第二层卷积计算<ul><li>16个5*5卷积核，卷积步长为1，不使用全零填充</li><li>无批标准化</li><li>激活函数使用sigmoid</li><li>最大池化，池化核尺寸2*2，步长为2，不使用全零填充</li><li>无dropout</li></ul></li><li>fatten</li><li>全连接网络，120个神经元，使用sigmoid激活函数</li><li>全连接网络，84个神经元，使用sigmoid激活函数</li><li>全连接网络，10个神经元，使用softmax激活函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseModel</span>(<span class="hljs-title class_ inherited__">Model</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(BaseModel, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-comment"># 卷积（特征提取）</span><br>        <span class="hljs-comment"># C:卷积层--6个卷积核，每个尺寸为5*5</span><br>        <span class="hljs-variable language_">self</span>.c1 = Conv2D(filters=<span class="hljs-number">6</span>, kernel_size=(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>), padding=<span class="hljs-string">&#x27;valid&#x27;</span>)  <br>        <span class="hljs-comment"># A:激活层--激活</span><br>        <span class="hljs-variable language_">self</span>.a1 = Activation(tf.keras.activations.sigmoid)  <br>        <span class="hljs-comment"># P: 池化层--最大池化，尺寸2*2，步长2</span><br>        <span class="hljs-variable language_">self</span>.p1 = MaxPool2D(pool_size=(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), strides=<span class="hljs-number">2</span>, padding=<span class="hljs-string">&#x27;valid&#x27;</span>)  <br><br>        <span class="hljs-variable language_">self</span>.c2 = Conv2D(filters=<span class="hljs-number">6</span>, kernel_size=(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>), padding=<span class="hljs-string">&#x27;valid&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.a2 = Activation(tf.keras.activations.sigmoid)<br>        <span class="hljs-variable language_">self</span>.p2 = MaxPool2D(pool_size=(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), strides=<span class="hljs-number">2</span>, padding=<span class="hljs-string">&#x27;valid&#x27;</span>)<br><br>        <span class="hljs-variable language_">self</span>.flatten = Flatten()<br>        <span class="hljs-variable language_">self</span>.f1 = Dense(<span class="hljs-number">120</span>, activation=tf.keras.activations.sigmoid)<br>        <span class="hljs-variable language_">self</span>.f2 = Dense(<span class="hljs-number">84</span>, activation=tf.keras.activations.sigmoid)<br>        <span class="hljs-variable language_">self</span>.f3 = Dense(<span class="hljs-number">10</span>, activation=tf.keras.activations.softmax)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">call</span>(<span class="hljs-params">self, inputs, training=<span class="hljs-literal">None</span>, mask=<span class="hljs-literal">None</span></span>):<br>        inputs = <span class="hljs-variable language_">self</span>.c1(inputs)<br>        inputs = <span class="hljs-variable language_">self</span>.a1(inputs)<br>        inputs = <span class="hljs-variable language_">self</span>.p1(inputs)<br><br>        inputs = <span class="hljs-variable language_">self</span>.c2(inputs)<br>        inputs = <span class="hljs-variable language_">self</span>.a2(inputs)<br>        inputs = <span class="hljs-variable language_">self</span>.p2(inputs)<br><br>        inputs = <span class="hljs-variable language_">self</span>.flatten(inputs)<br>        inputs = <span class="hljs-variable language_">self</span>.f1(inputs)<br>        inputs = <span class="hljs-variable language_">self</span>.f2(inputs)<br>        outputs = <span class="hljs-variable language_">self</span>.f3(inputs)<br><br>        <span class="hljs-keyword">return</span> outputs<br></code></pre></td></tr></table></figure><figure><img src="/images/posts/CNNmodels/LeNet.png" alt="LeNet" /><figcaption aria-hidden="true">LeNet</figcaption></figure><h2 id="alexnet">2、AlexNet</h2><p>共8层，包括五层卷积计算和三层全连接</p><ul><li>第一层卷积计算<ul><li>96个3*3卷积核，卷积步长为1，不使用全零填充</li><li>使用局部相应标准化LRN</li><li>激活函数使用relu</li><li>最大池化，池化核尺寸3*3，步长为2</li><li>无dropout</li></ul></li><li>第二层卷积计算<ul><li>256个3*3卷积核，卷积步长为1，不使用全零填充</li><li>使用局部相应标准化LRN</li><li>激活函数使用relu</li><li>最大池化，池化核尺寸3*3，步长为2</li><li>无dropout</li></ul></li><li>第三层卷积计算<ul><li>384个3*3卷积核，卷积步长为1，<strong>使用</strong>全零填充</li><li>无标准化</li><li>激活函数使用relu</li><li>不使用池化</li><li>无dropout</li></ul></li><li>第四层卷积计算与第三层相同<ul><li>384个3*3卷积核，卷积步长为1，<strong>使用</strong>全零填充</li><li>无标准化</li><li>激活函数使用relu</li><li>不使用池化</li><li>无dropout</li></ul></li><li>第五层卷积计算<ul><li>256个3*3卷积核，卷积步长为1，<strong>使用</strong>全零填充</li><li>无标准化</li><li>激活函数使用relu</li><li>最大池化，池化核尺寸3*3，步长为2</li><li>无dropout</li></ul></li><li>fatten</li><li>全连接网络，2048个神经元，使用relu激活函数，50% dropout</li><li>全连接网络，2048个神经元，使用relu激活函数，50% dropout</li><li>全连接网络，10个神经元，使用softmax激活函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseModel</span>(<span class="hljs-title class_ inherited__">Model</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(BaseModel, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.c1 = Conv2D(filters=<span class="hljs-number">96</span>, kernel_size=(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), padding=<span class="hljs-string">&#x27;valid&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.b1 = BatchNormalization()<br>        <span class="hljs-variable language_">self</span>.a1 = Activation(tf.keras.activations.relu)<br>        <span class="hljs-variable language_">self</span>.p1 = MaxPool2D(pool_size=(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), strides=<span class="hljs-number">2</span>)<br><br>        <span class="hljs-variable language_">self</span>.c2 = Conv2D(filters=<span class="hljs-number">256</span>, kernel_size=(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), padding=<span class="hljs-string">&#x27;valid&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.b2 = BatchNormalization()<br>        <span class="hljs-variable language_">self</span>.a2 = Activation(tf.keras.activations.relu)<br>        <span class="hljs-variable language_">self</span>.p2 = MaxPool2D(pool_size=(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), strides=<span class="hljs-number">2</span>)<br><br>        <span class="hljs-variable language_">self</span>.c3 = Conv2D(filters=<span class="hljs-number">384</span>, kernel_size=(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), padding=<span class="hljs-string">&#x27;same&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.a3 = Activation(tf.keras.activations.relu)<br><br>        <span class="hljs-variable language_">self</span>.c4 = Conv2D(filters=<span class="hljs-number">384</span>, kernel_size=(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), padding=<span class="hljs-string">&#x27;same&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.a4 = Activation(tf.keras.activations.relu)<br><br>        <span class="hljs-variable language_">self</span>.c5 = Conv2D(filters=<span class="hljs-number">256</span>, kernel_size=(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), padding=<span class="hljs-string">&#x27;same&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.a5 = Activation(tf.keras.activations.relu)<br>        <span class="hljs-variable language_">self</span>.p5 = MaxPool2D(pool_size=(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), strides=<span class="hljs-number">2</span>)<br><br>        <span class="hljs-variable language_">self</span>.flatten = Flatten()<br>        <span class="hljs-variable language_">self</span>.f1 = Dense(<span class="hljs-number">2048</span>, activation=tf.keras.activations.relu)<br>        <span class="hljs-variable language_">self</span>.d1 = Dropout(<span class="hljs-number">0.5</span>)<br>        <span class="hljs-variable language_">self</span>.f2 = Dense(<span class="hljs-number">2048</span>, activation=tf.keras.activations.relu)<br>        <span class="hljs-variable language_">self</span>.d2 = Dropout(<span class="hljs-number">0.5</span>)<br>        <span class="hljs-variable language_">self</span>.f3 = Dense(<span class="hljs-number">10</span>, activation=tf.keras.activations.softmax)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">call</span>(<span class="hljs-params">self, inputs, training=<span class="hljs-literal">None</span>, mask=<span class="hljs-literal">None</span></span>):<br>        inputs = <span class="hljs-variable language_">self</span>.c1(inputs)<br>        inputs = <span class="hljs-variable language_">self</span>.b1(inputs)<br>        inputs = <span class="hljs-variable language_">self</span>.a1(inputs)<br>        inputs = <span class="hljs-variable language_">self</span>.p1(inputs)<br><br>        inputs = <span class="hljs-variable language_">self</span>.c2(inputs)<br>        inputs = <span class="hljs-variable language_">self</span>.b2(inputs)<br>        inputs = <span class="hljs-variable language_">self</span>.a2(inputs)<br>        inputs = <span class="hljs-variable language_">self</span>.p2(inputs)<br><br>        inputs = <span class="hljs-variable language_">self</span>.c3(inputs)<br>        inputs = <span class="hljs-variable language_">self</span>.a3(inputs)<br><br>        inputs = <span class="hljs-variable language_">self</span>.c4(inputs)<br>        inputs = <span class="hljs-variable language_">self</span>.a4(inputs)<br><br>        inputs = <span class="hljs-variable language_">self</span>.c5(inputs)<br>        inputs = <span class="hljs-variable language_">self</span>.a5(inputs)<br>        inputs = <span class="hljs-variable language_">self</span>.p5(inputs)<br><br>        inputs = <span class="hljs-variable language_">self</span>.flatten(inputs)<br>        inputs = <span class="hljs-variable language_">self</span>.f1(inputs)<br>        inputs = <span class="hljs-variable language_">self</span>.d1(inputs)<br>        inputs = <span class="hljs-variable language_">self</span>.f2(inputs)<br>        inputs = <span class="hljs-variable language_">self</span>.d2(inputs)<br>        outputs = <span class="hljs-variable language_">self</span>.f3(inputs)<br><br>        <span class="hljs-keyword">return</span> outputs<br></code></pre></td></tr></table></figure><figure><img src="/images/posts/CNNmodels/AlexNet.png" alt="image-20201231132729733" /><figcaption aria-hidden="true">image-20201231132729733</figcaption></figure><h2 id="vggnet">3、VGGNet</h2><p>共16层，包括13层卷积计算及三层全连接</p><h3 id="卷积计算层">1、卷积计算层</h3><table><thead><tr class="header"><th style="text-align: center;">层数</th><th style="text-align: center;">卷积层</th><th style="text-align: center;">批标准化</th><th style="text-align: center;">激活层</th><th style="text-align: center;">池化层</th><th style="text-align: center;">dropout</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">1</td><td style="text-align: center;">64个卷积核，尺寸为3*3，步长为1，全零填充</td><td style="text-align: center;">BN操作</td><td style="text-align: center;">relu</td><td style="text-align: center;">无</td><td style="text-align: center;">无</td></tr><tr class="even"><td style="text-align: center;">2</td><td style="text-align: center;">64个卷积核，尺寸为3*3，步长为1，全零填充</td><td style="text-align: center;">BN操作</td><td style="text-align: center;">relu</td><td style="text-align: center;">最大池化，池化核尺寸2*2，池化步长为2</td><td style="text-align: center;">0.2</td></tr><tr class="odd"><td style="text-align: center;">3</td><td style="text-align: center;">128个卷积核，尺寸为3*3，步长为1，全零填充</td><td style="text-align: center;">BN操作</td><td style="text-align: center;">relu</td><td style="text-align: center;">无</td><td style="text-align: center;">无</td></tr><tr class="even"><td style="text-align: center;">4</td><td style="text-align: center;">128个卷积核，尺寸为3*3，步长为1，全零填充</td><td style="text-align: center;">BN操作</td><td style="text-align: center;">relu</td><td style="text-align: center;">最大池化，池化核尺寸2*2，池化步长为2</td><td style="text-align: center;">0.2</td></tr><tr class="odd"><td style="text-align: center;">5</td><td style="text-align: center;">256个卷积核，尺寸为3*3，步长为1，全零填充</td><td style="text-align: center;">BN操作</td><td style="text-align: center;">relu</td><td style="text-align: center;">无</td><td style="text-align: center;">无</td></tr><tr class="even"><td style="text-align: center;">6</td><td style="text-align: center;">256个卷积核，尺寸为3*3，步长为1，全零填充</td><td style="text-align: center;">BN操作</td><td style="text-align: center;">relu</td><td style="text-align: center;">无</td><td style="text-align: center;">无</td></tr><tr class="odd"><td style="text-align: center;">7</td><td style="text-align: center;">256个卷积核，尺寸为3*3，步长为1，全零填充</td><td style="text-align: center;">BN操作</td><td style="text-align: center;">relu</td><td style="text-align: center;">最大池化，池化核尺寸2*2，池化步长为2</td><td style="text-align: center;">0.2</td></tr><tr class="even"><td style="text-align: center;">8</td><td style="text-align: center;">512个卷积核，尺寸为3*3，步长为1，全零填充</td><td style="text-align: center;">BN操作</td><td style="text-align: center;">relu</td><td style="text-align: center;">无</td><td style="text-align: center;">无</td></tr><tr class="odd"><td style="text-align: center;">9</td><td style="text-align: center;">512个卷积核，尺寸为3*3，步长为1，全零填充</td><td style="text-align: center;">BN操作</td><td style="text-align: center;">relu</td><td style="text-align: center;">无</td><td style="text-align: center;">无</td></tr><tr class="even"><td style="text-align: center;">10</td><td style="text-align: center;">512个卷积核，尺寸为3*3，步长为1，全零填充</td><td style="text-align: center;">BN操作</td><td style="text-align: center;">relu</td><td style="text-align: center;">最大池化，池化核尺寸2*2，池化步长为2</td><td style="text-align: center;">0.2</td></tr><tr class="odd"><td style="text-align: center;">11</td><td style="text-align: center;">512个卷积核，尺寸为3*3，步长为1，全零填充</td><td style="text-align: center;">BN操作</td><td style="text-align: center;">relu</td><td style="text-align: center;">无</td><td style="text-align: center;">无</td></tr><tr class="even"><td style="text-align: center;">12</td><td style="text-align: center;">512个卷积核，尺寸为3*3，步长为1，全零填充</td><td style="text-align: center;">BN操作</td><td style="text-align: center;">relu</td><td style="text-align: center;">无</td><td style="text-align: center;">无</td></tr><tr class="odd"><td style="text-align: center;">13</td><td style="text-align: center;">512个卷积核，尺寸为3*3，步长为1，全零填充</td><td style="text-align: center;">BN操作</td><td style="text-align: center;">relu</td><td style="text-align: center;">最大池化，池化核尺寸2*2，池化步长为2</td><td style="text-align: center;">0.2</td></tr></tbody></table><h3 id="全连接层">2、全连接层</h3><ul><li>fatten</li><li>全连接网络，512个神经元，使用relu激活函数，20% dropout</li><li>全连接网络，512个神经元，使用relu激活函数，20% dropout</li><li>全连接网络，10个神经元，使用softmax激活函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-built_in">super</span>(BaseModel, <span class="hljs-variable language_">self</span>).__init__()<br>    <span class="hljs-variable language_">self</span>.c1 = Conv2D(filters=<span class="hljs-number">64</span>, kernel_size=(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), padding=<span class="hljs-string">&#x27;same&#x27;</span>)<br>    <span class="hljs-variable language_">self</span>.b1 = BatchNormalization()<br>    <span class="hljs-variable language_">self</span>.a1 = Activation(<span class="hljs-string">&#x27;relu&#x27;</span>)<br><br>    <span class="hljs-variable language_">self</span>.c2 = Conv2D(filters=<span class="hljs-number">64</span>, kernel_size=(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), padding=<span class="hljs-string">&#x27;same&#x27;</span>)<br>    <span class="hljs-variable language_">self</span>.b2 = BatchNormalization()<br>    <span class="hljs-variable language_">self</span>.a2 = Activation(<span class="hljs-string">&#x27;relu&#x27;</span>)<br>    <span class="hljs-variable language_">self</span>.p2 = MaxPool2D(pool_size=(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), strides=<span class="hljs-number">2</span>, padding=<span class="hljs-string">&#x27;same&#x27;</span>)<br>    <span class="hljs-variable language_">self</span>.d2 = Dropout(<span class="hljs-number">0.2</span>)<br><br>    <span class="hljs-variable language_">self</span>.c3 = Conv2D(filters=<span class="hljs-number">128</span>, kernel_size=(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), padding=<span class="hljs-string">&#x27;same&#x27;</span>)<br>    <span class="hljs-variable language_">self</span>.b3 = BatchNormalization()<br>    <span class="hljs-variable language_">self</span>.a3 = Activation(<span class="hljs-string">&#x27;relu&#x27;</span>)<br><br>    <span class="hljs-variable language_">self</span>.c4 = Conv2D(filters=<span class="hljs-number">128</span>, kernel_size=(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), padding=<span class="hljs-string">&#x27;same&#x27;</span>)<br>    <span class="hljs-variable language_">self</span>.b4 = BatchNormalization()<br>    <span class="hljs-variable language_">self</span>.a4 = Activation(<span class="hljs-string">&#x27;relu&#x27;</span>)<br>    <span class="hljs-variable language_">self</span>.p4 = MaxPool2D(pool_size=(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), strides=<span class="hljs-number">2</span>, padding=<span class="hljs-string">&#x27;same&#x27;</span>)<br>    <span class="hljs-variable language_">self</span>.d4 = Dropout(<span class="hljs-number">0.2</span>)<br><br>    <span class="hljs-variable language_">self</span>.c5 = Conv2D(filters=<span class="hljs-number">256</span>, kernel_size=(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), padding=<span class="hljs-string">&#x27;same&#x27;</span>)<br>    <span class="hljs-variable language_">self</span>.b5 = BatchNormalization()<br>    <span class="hljs-variable language_">self</span>.a5 = Activation(<span class="hljs-string">&#x27;relu&#x27;</span>)<br><br>    <span class="hljs-variable language_">self</span>.c6 = Conv2D(filters=<span class="hljs-number">256</span>, kernel_size=(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), padding=<span class="hljs-string">&#x27;same&#x27;</span>)<br>    <span class="hljs-variable language_">self</span>.b6 = BatchNormalization()<br>    <span class="hljs-variable language_">self</span>.a6 = Activation(<span class="hljs-string">&#x27;relu&#x27;</span>)<br><br>    <span class="hljs-variable language_">self</span>.c7 = Conv2D(filters=<span class="hljs-number">256</span>, kernel_size=(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), padding=<span class="hljs-string">&#x27;same&#x27;</span>)<br>    <span class="hljs-variable language_">self</span>.b7 = BatchNormalization()<br>    <span class="hljs-variable language_">self</span>.a7 = Activation(<span class="hljs-string">&#x27;relu&#x27;</span>)<br>    <span class="hljs-variable language_">self</span>.p7 = MaxPool2D(pool_size=(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), strides=<span class="hljs-number">2</span>, padding=<span class="hljs-string">&#x27;same&#x27;</span>)<br>    <span class="hljs-variable language_">self</span>.d7 = Dropout(<span class="hljs-number">0.2</span>)<br><br>    <span class="hljs-variable language_">self</span>.c8 = Conv2D(filters=<span class="hljs-number">512</span>, kernel_size=(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), padding=<span class="hljs-string">&#x27;same&#x27;</span>)<br>    <span class="hljs-variable language_">self</span>.b8 = BatchNormalization()<br>    <span class="hljs-variable language_">self</span>.a8 = Activation(<span class="hljs-string">&#x27;relu&#x27;</span>)<br><br>    <span class="hljs-variable language_">self</span>.c9 = Conv2D(filters=<span class="hljs-number">512</span>, kernel_size=(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), padding=<span class="hljs-string">&#x27;same&#x27;</span>)<br>    <span class="hljs-variable language_">self</span>.b9 = BatchNormalization()<br>    <span class="hljs-variable language_">self</span>.a9 = Activation(<span class="hljs-string">&#x27;relu&#x27;</span>)<br><br>    <span class="hljs-variable language_">self</span>.c10 = Conv2D(filters=<span class="hljs-number">512</span>, kernel_size=(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), padding=<span class="hljs-string">&#x27;same&#x27;</span>)<br>    <span class="hljs-variable language_">self</span>.b10 = BatchNormalization()<br>    <span class="hljs-variable language_">self</span>.a10 = Activation(<span class="hljs-string">&#x27;relu&#x27;</span>)<br>    <span class="hljs-variable language_">self</span>.p10 = MaxPool2D(pool_size=(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), strides=<span class="hljs-number">2</span>, padding=<span class="hljs-string">&#x27;same&#x27;</span>)<br>    <span class="hljs-variable language_">self</span>.d10 = Dropout(<span class="hljs-number">0.2</span>)<br><br>    <span class="hljs-variable language_">self</span>.c11 = Conv2D(filters=<span class="hljs-number">512</span>, kernel_size=(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), padding=<span class="hljs-string">&#x27;same&#x27;</span>)<br>    <span class="hljs-variable language_">self</span>.b11 = BatchNormalization()<br>    <span class="hljs-variable language_">self</span>.a11 = Activation(<span class="hljs-string">&#x27;relu&#x27;</span>)<br><br>    <span class="hljs-variable language_">self</span>.c12 = Conv2D(filters=<span class="hljs-number">512</span>, kernel_size=(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), padding=<span class="hljs-string">&#x27;same&#x27;</span>)<br>    <span class="hljs-variable language_">self</span>.b12 = BatchNormalization()<br>    <span class="hljs-variable language_">self</span>.a12 = Activation(<span class="hljs-string">&#x27;relu&#x27;</span>)<br><br>    <span class="hljs-variable language_">self</span>.c13 = Conv2D(filters=<span class="hljs-number">512</span>, kernel_size=(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), padding=<span class="hljs-string">&#x27;same&#x27;</span>)<br>    <span class="hljs-variable language_">self</span>.b13 = BatchNormalization()<br>    <span class="hljs-variable language_">self</span>.a13 = Activation(<span class="hljs-string">&#x27;relu&#x27;</span>)<br>    <span class="hljs-variable language_">self</span>.p13 = MaxPool2D(pool_size=(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), strides=<span class="hljs-number">2</span>, padding=<span class="hljs-string">&#x27;same&#x27;</span>)<br>    <span class="hljs-variable language_">self</span>.d13 = Dropout(<span class="hljs-number">0.2</span>)<br><br>    <span class="hljs-variable language_">self</span>.flatten = Flatten()<br>    <span class="hljs-variable language_">self</span>.fa = Dense(<span class="hljs-number">512</span>, activation=tf.keras.activations.relu)<br>    <span class="hljs-variable language_">self</span>.da = Dropout(<span class="hljs-number">0.2</span>)<br>    <span class="hljs-variable language_">self</span>.fb = Dense(<span class="hljs-number">512</span>, activation=tf.keras.activations.relu)<br>    <span class="hljs-variable language_">self</span>.db = Dropout(<span class="hljs-number">0.2</span>)<br>    <span class="hljs-variable language_">self</span>.fc = Dense(<span class="hljs-number">10</span>, activation=tf.keras.activations.softmax)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">call</span>(<span class="hljs-params">self, inputs, training=<span class="hljs-literal">None</span>, mask=<span class="hljs-literal">None</span></span>):<br>    inputs = <span class="hljs-variable language_">self</span>.c1(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.b1(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.a1(inputs)<br><br>    inputs = <span class="hljs-variable language_">self</span>.c2(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.b2(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.a2(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.p2(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.d2(inputs)<br><br>    inputs = <span class="hljs-variable language_">self</span>.c3(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.b3(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.a3(inputs)<br><br>    inputs = <span class="hljs-variable language_">self</span>.c4(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.b4(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.a4(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.p4(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.d4(inputs)<br><br>    inputs = <span class="hljs-variable language_">self</span>.c5(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.b5(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.a5(inputs)<br><br>    inputs = <span class="hljs-variable language_">self</span>.c6(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.b6(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.a6(inputs)<br><br>    inputs = <span class="hljs-variable language_">self</span>.c7(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.b7(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.a7(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.p7(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.d7(inputs)<br><br>    inputs = <span class="hljs-variable language_">self</span>.c8(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.b8(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.a8(inputs)<br><br>    inputs = <span class="hljs-variable language_">self</span>.c9(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.b9(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.a9(inputs)<br><br>    inputs = <span class="hljs-variable language_">self</span>.c10(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.b10(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.a10(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.p10(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.d10(inputs)<br><br>    inputs = <span class="hljs-variable language_">self</span>.c11(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.b11(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.a11(inputs)<br><br>    inputs = <span class="hljs-variable language_">self</span>.c12(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.b12(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.a12(inputs)<br><br>    inputs = <span class="hljs-variable language_">self</span>.c13(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.b13(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.a13(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.p13(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.d13(inputs)<br><br>    inputs = <span class="hljs-variable language_">self</span>.flatten(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.fa(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.da(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.fb(inputs)<br>    inputs = <span class="hljs-variable language_">self</span>.db(inputs)<br>    outputs = <span class="hljs-variable language_">self</span>.fc(inputs)<br><br>    <span class="hljs-keyword">return</span> outputs<br></code></pre></td></tr></table></figure><figure><img src="/images/posts/CNNmodels/VGGNet.png" alt="VGGNet" /><figcaption aria-hidden="true">VGGNet</figcaption></figure><h2 id="inceptionnet">4、InceptionNet</h2><p>主体结构为Inception结构块，结构如下图所示：</p><pre><code class=" mermaid">classDiagram卷积连接器 &lt;-- 1X1卷积核a卷积连接器 &lt;-- 3X3卷积核b3X3卷积核b &lt;-- 1X1卷积核b : 降维卷积连接器 &lt;-- 5X5卷积核c5X5卷积核c &lt;-- 1X1卷积核c : 降维卷积连接器 &lt;-- 1X1卷积核d : 降维1X1卷积核d &lt;-- 3X3最大池化核1X1卷积核a &lt;-- 输入层1X1卷积核b &lt;-- 输入层1X1卷积核c &lt;-- 输入层3X3最大池化核 &lt;-- 输入层卷积连接器 : 将收到的四路特征卷积连接器 : 按照深度拼接</code></pre><table><thead><tr class="header"><th style="text-align: center;">卷积核</th><th style="text-align: center;">卷积层</th><th style="text-align: center;">批标准化</th><th style="text-align: center;">激活层</th><th style="text-align: center;">池化层</th><th style="text-align: center;">dropout</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">1X1卷积核a</td><td style="text-align: center;">16个卷积核，尺寸为1*1，<br/>步长为1，全零填充</td><td style="text-align: center;">BN操作</td><td style="text-align: center;">relu</td><td style="text-align: center;">无</td><td style="text-align: center;">无</td></tr><tr class="even"><td style="text-align: center;">1X1卷积核b</td><td style="text-align: center;">16个卷积核，尺寸为1*1，<br/>步长为1，全零填充</td><td style="text-align: center;">BN操作</td><td style="text-align: center;">relu</td><td style="text-align: center;">无</td><td style="text-align: center;">无</td></tr><tr class="odd"><td style="text-align: center;">3X3卷积核b</td><td style="text-align: center;">16个卷积核，尺寸为3*3，<br/>步长为1，全零填充</td><td style="text-align: center;">BN操作</td><td style="text-align: center;">relu</td><td style="text-align: center;">无</td><td style="text-align: center;">无</td></tr><tr class="even"><td style="text-align: center;">1X1卷积核c</td><td style="text-align: center;">16个卷积核，尺寸为1*1，<br/>步长为1，全零填充</td><td style="text-align: center;">BN操作</td><td style="text-align: center;">relu</td><td style="text-align: center;">无</td><td style="text-align: center;">无</td></tr><tr class="odd"><td style="text-align: center;">5X5卷积核c</td><td style="text-align: center;">16个卷积核，尺寸为5*5，<br/>步长为1，全零填充</td><td style="text-align: center;">BN操作</td><td style="text-align: center;">relu</td><td style="text-align: center;">无</td><td style="text-align: center;">无</td></tr><tr class="even"><td style="text-align: center;">3X3最大池化核</td><td style="text-align: center;">无</td><td style="text-align: center;">无</td><td style="text-align: center;">无</td><td style="text-align: center;">最大池化，池化核尺寸3*3，<br/>池化步长为1，全零填充</td><td style="text-align: center;">无</td></tr><tr class="odd"><td style="text-align: center;">1X1卷积核d</td><td style="text-align: center;">16个卷积核，尺寸为1*1，<br/>步长为1，全零填充</td><td style="text-align: center;">BN操作</td><td style="text-align: center;">relu</td><td style="text-align: center;">无</td><td style="text-align: center;">无</td></tr></tbody></table><p>神经网络结构范例如下所示，包括四个Inception结构块，两两一组，分为block_0和block_1</p><pre><code class=" mermaid">graph TBid1(3*3 conv, filters=16)style id1 fill: #3991B620, stroke: #3991B6, stroke-width:2pxid2_1(Filter concatenation)id2_2(1*1 conv)id2_3(1*1 conv)id2_4(3*3 conv)id2_5(1*1 conv)id2_6(5*5 conv)id2_7(1*1 conv)id2_8(3*3 pooling)id2_9(Previous layer)style id2_1 fill: #B9CF9320, stroke: #B9CF93, stroke-width:2pxstyle id2_9 fill: #B9CF9320, stroke: #B9CF93, stroke-width:2pxstyle id2_2 fill: #3991B620, stroke: #3991B6, stroke-width:2pxstyle id2_4 fill: #3991B620, stroke: #3991B6, stroke-width:2pxstyle id2_6 fill: #3991B620, stroke: #3991B6, stroke-width:2pxstyle id2_3 fill: #FFFF6940, stroke: #FFFF69, stroke-width:2pxstyle id2_5 fill: #FFFF6940, stroke: #FFFF69, stroke-width:2pxstyle id2_7 fill: #FFFF6940, stroke: #FFFF69, stroke-width:2pxstyle id2_8 fill: #CFA3A420, stroke: #CFA3A4, stroke-width:2pxid3_1(Filter concatenation)id3_2(1*1 conv)id3_3(1*1 conv)id3_4(3*3 conv)id3_5(1*1 conv)id3_6(5*5 conv)id3_7(1*1 conv)id3_8(3*3 pooling)id3_9(Previous layer)style id3_1 fill: #B9CF9320, stroke: #B9CF93, stroke-width:2pxstyle id3_9 fill: #B9CF9320, stroke: #B9CF93, stroke-width:2pxstyle id3_2 fill: #3991B620, stroke: #3991B6, stroke-width:2pxstyle id3_4 fill: #3991B620, stroke: #3991B6, stroke-width:2pxstyle id3_6 fill: #3991B620, stroke: #3991B6, stroke-width:2pxstyle id3_3 fill: #FFFF6940, stroke: #FFFF69, stroke-width:2pxstyle id3_5 fill: #FFFF6940, stroke: #FFFF69, stroke-width:2pxstyle id3_7 fill: #FFFF6940, stroke: #FFFF69, stroke-width:2pxstyle id3_8 fill: #CFA3A420, stroke: #CFA3A4, stroke-width:2pxsubgraph block_0id2_9 --&gt; id2_2id2_2 --&gt; id2_1id2_9 --&gt; id2_3id2_3 --&gt; id2_4id2_4 --&gt; id2_1id2_9 --&gt; id2_5id2_5 --&gt; id2_6id2_6 --&gt; id2_1id2_9 --&gt; id2_8id2_8 --&gt; id2_7id2_7 --&gt; id2_1id3_9 --&gt; id3_2id3_2 --&gt; id3_1id3_9 --&gt; id3_3id3_3 --&gt; id3_4id3_4 --&gt; id3_1id3_9 --&gt; id3_5id3_5 --&gt; id3_6id3_6 --&gt; id3_1id3_9 --&gt; id3_8id3_8 --&gt; id3_7id3_7 --&gt; id3_1id2_1 --&gt; id3_9endid4_1(Filter concatenation)id4_2(1*1 conv)id4_3(1*1 conv)id4_4(3*3 conv)id4_5(1*1 conv)id4_6(5*5 conv)id4_7(1*1 conv)id4_8(3*3 pooling)id4_9(Previous layer)style id4_1 fill: #B9CF9320, stroke: #B9CF93, stroke-width:2pxstyle id4_9 fill: #B9CF9320, stroke: #B9CF93, stroke-width:2pxstyle id4_2 fill: #3991B620, stroke: #3991B6, stroke-width:2pxstyle id4_4 fill: #3991B620, stroke: #3991B6, stroke-width:2pxstyle id4_6 fill: #3991B620, stroke: #3991B6, stroke-width:2pxstyle id4_3 fill: #FFFF6940, stroke: #FFFF69, stroke-width:2pxstyle id4_5 fill: #FFFF6940, stroke: #FFFF69, stroke-width:2pxstyle id4_7 fill: #FFFF6940, stroke: #FFFF69, stroke-width:2pxstyle id4_8 fill: #CFA3A420, stroke: #CFA3A4, stroke-width:2pxid5_1(Filter concatenation)id5_2(1*1 conv)id5_3(1*1 conv)id5_4(3*3 conv)id5_5(1*1 conv)id5_6(5*5 conv)id5_7(1*1 conv)id5_8(3*3 pooling)id5_9(Previous layer)style id5_1 fill: #B9CF9320, stroke: #B9CF93, stroke-width:2pxstyle id5_9 fill: #B9CF9320, stroke: #B9CF93, stroke-width:2pxstyle id5_2 fill: #3991B620, stroke: #3991B6, stroke-width:2pxstyle id5_4 fill: #3991B620, stroke: #3991B6, stroke-width:2pxstyle id5_6 fill: #3991B620, stroke: #3991B6, stroke-width:2pxstyle id5_3 fill: #FFFF6940, stroke: #FFFF69, stroke-width:2pxstyle id5_5 fill: #FFFF6940, stroke: #FFFF69, stroke-width:2pxstyle id5_7 fill: #FFFF6940, stroke: #FFFF69, stroke-width:2pxstyle id5_8 fill: #CFA3A420, stroke: #CFA3A4, stroke-width:2pxsubgraph block_1id4_9 --&gt; id4_2id4_2 --&gt; id4_1id4_9 --&gt; id4_3id4_3 --&gt; id4_4id4_4 --&gt; id4_1id4_9 --&gt; id4_5id4_5 --&gt; id4_6id4_6 --&gt; id4_1id4_9 --&gt; id4_8id4_8 --&gt; id4_7id4_7 --&gt; id4_1id5_9 --&gt; id5_2id5_2 --&gt; id5_1id5_9 --&gt; id5_3id5_3 --&gt; id5_4id5_4 --&gt; id5_1id5_9 --&gt; id5_5id5_5 --&gt; id5_6id5_6 --&gt; id5_1id5_9 --&gt; id5_8id5_8 --&gt; id5_7id5_7 --&gt; id5_1id4_1 --&gt; id5_9endid1 --&gt; id2_9id3_1 --&gt; id4_9id6(global avgpool)style id6 fill: #CFA3A420, stroke: #CFA3A4, stroke-width:2pxid7(Dense 10)style id7 fill: #B9CF9320, stroke: #B9CF93, stroke-width:2pxid5_1 --&gt; id6id6 --&gt; id7</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConvBNRelu</span>(<span class="hljs-title class_ inherited__">Model</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ch, kernel_size=<span class="hljs-number">3</span>, strides=<span class="hljs-number">1</span>, padding=<span class="hljs-string">&#x27;same&#x27;</span></span>):<br>        <span class="hljs-built_in">super</span>(ConvBNRelu, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.modle = tf.keras.models.Sequential([<br>            Conv2D(ch, kernel_size, strides=strides, padding=padding),<br>            BatchNormalization(),<br>            Activation(<span class="hljs-string">&#x27;relu&#x27;</span>)<br>        ])<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">call</span>(<span class="hljs-params">self, inputs, **kwargs</span>):<br>        outputs = <span class="hljs-variable language_">self</span>.modle(inputs, training=<span class="hljs-literal">False</span>)<br><br>        <span class="hljs-keyword">return</span> outputs<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InceptionBlock</span>(<span class="hljs-title class_ inherited__">Model</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ch, strides=<span class="hljs-number">1</span></span>):<br>        <span class="hljs-built_in">super</span>(InceptionBlock, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.ch = ch<br>        <span class="hljs-variable language_">self</span>.strides = strides<br>        <span class="hljs-variable language_">self</span>.c1 = ConvBNRelu(ch, kernel_size=<span class="hljs-number">1</span>, strides=strides)<br>        <span class="hljs-variable language_">self</span>.c2_1 = ConvBNRelu(ch, kernel_size=<span class="hljs-number">1</span>, strides=strides)<br>        <span class="hljs-variable language_">self</span>.c2_2 = ConvBNRelu(ch, kernel_size=<span class="hljs-number">3</span>, strides=<span class="hljs-number">1</span>)<br>        <span class="hljs-variable language_">self</span>.c3_1 = ConvBNRelu(ch, kernel_size=<span class="hljs-number">1</span>, strides=strides)<br>        <span class="hljs-variable language_">self</span>.c3_2 = ConvBNRelu(ch, kernel_size=<span class="hljs-number">5</span>, strides=<span class="hljs-number">1</span>)<br>        <span class="hljs-variable language_">self</span>.P4_1 = MaxPool2D(<span class="hljs-number">2</span>, strides=<span class="hljs-number">1</span>, padding=<span class="hljs-string">&#x27;same&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.c4_2 = ConvBNRelu(ch, kernel_size=<span class="hljs-number">1</span>, strides=strides)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">call</span>(<span class="hljs-params">self, inputs, training=<span class="hljs-literal">None</span>, mask=<span class="hljs-literal">None</span></span>):<br>        inputs1 = <span class="hljs-variable language_">self</span>.c1(inputs)<br>        inputs2_1 = <span class="hljs-variable language_">self</span>.c2_1(inputs)<br>        inputs2_2 = <span class="hljs-variable language_">self</span>.c2_2(inputs2_1)<br>        inputs3_1 = <span class="hljs-variable language_">self</span>.c3_1(inputs)<br>        inputs3_2 = <span class="hljs-variable language_">self</span>.c3_2(inputs3_1)<br>        inputs4_1 = <span class="hljs-variable language_">self</span>.P4_1(inputs)<br>        inputs4_2 = <span class="hljs-variable language_">self</span>.c4_2(inputs4_1)<br><br>         <span class="hljs-comment"># 沿深度方向堆叠</span><br>        outputs = tf.concat([inputs1, inputs2_2, inputs3_2, inputs4_2], axis=<span class="hljs-number">3</span>) <br><br>        <span class="hljs-keyword">return</span> outputs<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Inception10</span>(<span class="hljs-title class_ inherited__">Model</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num_blocks, num_classes, init_ch=<span class="hljs-number">16</span>, **kwargs</span>):<br>        <span class="hljs-built_in">super</span>(Inception10, <span class="hljs-variable language_">self</span>).__init__(**kwargs)<br>        <span class="hljs-variable language_">self</span>.in_channels = init_ch<br>        <span class="hljs-variable language_">self</span>.out_channels = init_ch<br>        <span class="hljs-variable language_">self</span>.num_blocks = num_blocks<br>        <span class="hljs-variable language_">self</span>.init_ch = init_ch<br>        <span class="hljs-variable language_">self</span>.c1 = ConvBNRelu(init_ch)<br>        <span class="hljs-variable language_">self</span>.blocks = tf.keras.models.Sequential()<br>        <span class="hljs-keyword">for</span> block_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_blocks):<br>            <span class="hljs-keyword">for</span> layer_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>                <span class="hljs-keyword">if</span> layer_id == <span class="hljs-number">0</span>:<br>                    block = InceptionBlock(<span class="hljs-variable language_">self</span>.out_channels, strides=<span class="hljs-number">2</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    block = InceptionBlock(<span class="hljs-variable language_">self</span>.out_channels, strides=<span class="hljs-number">1</span>)<br>                <span class="hljs-variable language_">self</span>.blocks.add(block)<br><br>            <span class="hljs-variable language_">self</span>.out_channels *= <span class="hljs-number">2</span><br>        <span class="hljs-variable language_">self</span>.p1 = GlobalAveragePooling2D()<br>        <span class="hljs-variable language_">self</span>.f1 = Dense(num_classes, activation=<span class="hljs-string">&#x27;softmax&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">call</span>(<span class="hljs-params">self, inputs, **kwargs</span>):<br>        inputs = <span class="hljs-variable language_">self</span>.c1(inputs)<br>        inputs = <span class="hljs-variable language_">self</span>.blocks(inputs)<br>        inputs = <span class="hljs-variable language_">self</span>.p1(inputs)<br>        outputs = <span class="hljs-variable language_">self</span>.f1(inputs)<br><br>        <span class="hljs-keyword">return</span> outputs<br></code></pre></td></tr></table></figure><figure><img src="/images/posts/CNNmodels/InceptionNet.png" alt="InceptionNet" /><figcaption aria-hidden="true">InceptionNet</figcaption></figure><h2 id="resnet">5、ResNet</h2><p>将前面的输出特征结果越过对叠层直接传递到后面，并与堆叠卷积的非线性输出叠加，有效的缓解了神经网络模型堆叠导致的退化</p><pre><code class=" mermaid">graph TB    id0(( ))    id1(3X3conv, filters=512&lt;br/&gt;strides=2)    id2(3X3conv, filters=512)    id3((&quot;H(x)&quot;))    id4(3X3conv, filters=512)    id5(3X3conv, filters=512)    id6((&quot;H(x)&quot;))    subgraph      id0 --&gt; id1    id1 --&gt; id2    id2 --&gt;|&quot;F(x)&quot;| id3    end    subgraph      id3 --&gt; id4    id4 --&gt; id5    id5 --&gt;|&quot;F(x)&quot;| id6    id0 -.&quot;W(x)&quot;.-&gt; id3    id3 --&gt;|x| id6    end</code></pre><p>其中，虚线表示维度不同时，此时H(x)=F(x)+W(x)，其中W(x)是1*1卷积操作，用于调整x的维度</p><p>实线表示维度相同时，此时H(x)=F(x)+x</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ResnetBlock</span>(<span class="hljs-title class_ inherited__">Model</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, filters, strides=<span class="hljs-number">1</span>, residual_path=<span class="hljs-literal">False</span></span>):<br>        <span class="hljs-built_in">super</span>(ResnetBlock, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.filters = filters<br>        <span class="hljs-variable language_">self</span>.strides = strides<br>        <span class="hljs-variable language_">self</span>.residual_path = residual_path<br><br>        <span class="hljs-variable language_">self</span>.c1 = Conv2D(filters, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), strides=strides, padding=<span class="hljs-string">&#x27;same&#x27;</span>, use_bias=<span class="hljs-literal">False</span>)<br>        <span class="hljs-variable language_">self</span>.b1 = BatchNormalization()<br>        <span class="hljs-variable language_">self</span>.a1 = Activation(<span class="hljs-string">&#x27;relu&#x27;</span>)<br><br>        <span class="hljs-variable language_">self</span>.c2 = Conv2D(filters, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), strides=<span class="hljs-number">1</span>, padding=<span class="hljs-string">&#x27;same&#x27;</span>, use_bias=<span class="hljs-literal">False</span>)<br>        <span class="hljs-variable language_">self</span>.b2 = BatchNormalization()<br><br>        <span class="hljs-comment"># residual_path为True时，对输入进行下采样，即用1x1的卷积核做卷积操作，保证x能和F(x)维度相同，顺利相加</span><br>        <span class="hljs-keyword">if</span> residual_path:<br>            <span class="hljs-variable language_">self</span>.down_c1 = Conv2D(filters, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>), strides=strides, padding=<span class="hljs-string">&#x27;same&#x27;</span>, use_bias=<span class="hljs-literal">False</span>)<br>            <span class="hljs-variable language_">self</span>.down_b1 = BatchNormalization()<br><br>        <span class="hljs-variable language_">self</span>.a2 = Activation(<span class="hljs-string">&#x27;relu&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">call</span>(<span class="hljs-params">self, inputs, **kwargs</span>):<br>        <span class="hljs-comment"># residual等于输入值本身，即residual=x</span><br>        residual = inputs<br><br>        <span class="hljs-comment"># 将输入通过卷积、BN层、激活层，计算F(x)</span><br>        x = <span class="hljs-variable language_">self</span>.c1(inputs)<br>        x = <span class="hljs-variable language_">self</span>.b1(x)<br>        x = <span class="hljs-variable language_">self</span>.a1(x)<br><br>        x = <span class="hljs-variable language_">self</span>.c2(x)<br>        y = <span class="hljs-variable language_">self</span>.b2(x)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.residual_path:<br>            residual = <span class="hljs-variable language_">self</span>.down_c1(inputs)<br>            residual = <span class="hljs-variable language_">self</span>.down_b1(residual)<br><br>        <span class="hljs-comment"># 最后输出的是两部分的和，即F(x)+x或F(x)+Wx,再过激活函数</span><br>        out = <span class="hljs-variable language_">self</span>.a2(y + residual)<br>        <span class="hljs-keyword">return</span> out<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ResNet18</span>(<span class="hljs-title class_ inherited__">Model</span>):<br>    <span class="hljs-comment"># block_list表示每个block有几个卷积层</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, block_list, initial_filters=<span class="hljs-number">64</span></span>):<br>        <span class="hljs-built_in">super</span>(ResNet18, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-comment"># 共有几个block</span><br>        <span class="hljs-variable language_">self</span>.num_blocks = <span class="hljs-built_in">len</span>(block_list)<br>        <span class="hljs-variable language_">self</span>.block_list = block_list<br>        <span class="hljs-variable language_">self</span>.out_filters = initial_filters<br>        <span class="hljs-variable language_">self</span>.c1 = Conv2D(<span class="hljs-variable language_">self</span>.out_filters, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), strides=<span class="hljs-number">1</span>, padding=<span class="hljs-string">&#x27;same&#x27;</span>, use_bias=<span class="hljs-literal">False</span>)<br>        <span class="hljs-variable language_">self</span>.b1 = BatchNormalization()<br>        <span class="hljs-variable language_">self</span>.a1 = Activation(<span class="hljs-string">&#x27;relu&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.blocks = tf.keras.models.Sequential()<br>        <span class="hljs-comment"># 构建ResNet网络结构</span><br>        <span class="hljs-comment"># 第几个resnet block</span><br>        <span class="hljs-keyword">for</span> block_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(block_list)):<br>            <span class="hljs-comment"># 第几个卷积层</span><br>            <span class="hljs-keyword">for</span> layer_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(block_list[block_id]):<br>                <span class="hljs-comment"># 对除第一个block以外的每个block的输入进行下采样</span><br>                <span class="hljs-keyword">if</span> block_id != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> layer_id == <span class="hljs-number">0</span>:<br>                    block = ResnetBlock(<span class="hljs-variable language_">self</span>.out_filters, strides=<span class="hljs-number">2</span>, residual_path=<span class="hljs-literal">True</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    block = ResnetBlock(<span class="hljs-variable language_">self</span>.out_filters, residual_path=<span class="hljs-literal">False</span>)<br>                <span class="hljs-comment"># 将构建好的block加入resnet</span><br>                <span class="hljs-variable language_">self</span>.blocks.add(block)<br>            <span class="hljs-comment"># 下一个block的卷积核数是上一个block的2倍</span><br>            <span class="hljs-variable language_">self</span>.out_filters *= <span class="hljs-number">2</span><br>        <span class="hljs-variable language_">self</span>.p1 = GlobalAveragePooling2D()<br>        <span class="hljs-variable language_">self</span>.f1 = Dense(<span class="hljs-number">10</span>, activation=<span class="hljs-string">&#x27;softmax&#x27;</span>, kernel_regularizer=tf.keras.regularizers.l2())<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">call</span>(<span class="hljs-params">self, inputs, **kwargs</span>):<br>        x = <span class="hljs-variable language_">self</span>.c1(inputs)<br>        x = <span class="hljs-variable language_">self</span>.b1(x)<br>        x = <span class="hljs-variable language_">self</span>.a1(x)<br>        x = <span class="hljs-variable language_">self</span>.blocks(x)<br>        x = <span class="hljs-variable language_">self</span>.p1(x)<br>        y = <span class="hljs-variable language_">self</span>.f1(x)<br>        <span class="hljs-keyword">return</span> y<br></code></pre></td></tr></table></figure><figure><img src="/images/posts/CNNmodels/ResNet.png" alt="ResNet" /><figcaption aria-hidden="true">ResNet</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WIN10关闭蓝牙耳机绝对音量功能</title>
    <link href="/2020/12/21/2020-12-21-BLEearphone/"/>
    <url>/2020/12/21/2020-12-21-BLEearphone/</url>
    
    <content type="html"><![CDATA[<h1 id="win10关闭蓝牙耳机绝对音量功能">WIN10关闭蓝牙耳机绝对音量功能</h1><span id="more"></span><p>通过执行以下命令来使用命令提示符启用或禁用绝对音量：</p><p>要禁用绝对音量功能，请执行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">reg add HKLM\SYSTEM\ControlSet001\Control\Bluetooth\Audio\AVRCP\CT /v DisableAbsoluteVolume /t REG_DWORD /d <span class="hljs-number">1</span> /f<br></code></pre></td></tr></table></figure><p>要启用绝对音量功能，请执行以下操作：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">reg add HKLM\SYSTEM\ControlSet001\Control\Bluetooth\Audio\AVRCP\CT /v DisableAbsoluteVolume /t REG_DWORD /d <span class="hljs-number">0</span> /f<br></code></pre></td></tr></table></figure><p>重新启动Windows，以使注册表更改生效。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>计算机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mermaid常用公式</title>
    <link href="/2020/12/07/2020-12-07-mermaid/"/>
    <url>/2020/12/07/2020-12-07-mermaid/</url>
    
    <content type="html"><![CDATA[<h1 id="mermaid常用公式">mermaid常用公式</h1><p>摘自官方文档</p><span id="more"></span><h2 id="flowchart"><a href="https://mermaid-js.github.io/mermaid/#/flowchart?id=flowcharts-basic-syntax">Flowchart</a></h2><blockquote><p>graph TD; A--&gt;B;<br />A--&gt;C;<br />B--&gt;D;<br />C--&gt;D;</p></blockquote><pre><code class=" mermaid">graph TD;    A--&gt;B;    A--&gt;C;    B--&gt;D;    C--&gt;D;</code></pre><h2 id="sequence-diagram"><a href="https://mermaid-js.github.io/mermaid/#/sequenceDiagram">Sequence diagram</a></h2><blockquote><p>sequenceDiagram participant Alice participant Bob Alice-&gt;&gt;John: Hello John, how are you? loop Healthcheck John-&gt;&gt;John: Fight against hypochondria end Note right of John: Rational thoughts <code>&lt;br/&gt;</code>prevail! John--&gt;&gt;Alice: Great! John-&gt;&gt;Bob: How about you? Bob--&gt;&gt;John: Jolly good!</p></blockquote><pre><code class=" mermaid">sequenceDiagram    participant Alice    participant Bob    Alice-&gt;&gt;John: Hello John, how are you?    loop Healthcheck        John-&gt;&gt;John: Fight against hypochondria    end    Note right of John: Rational thoughts &lt;br/&gt;prevail!    John--&gt;&gt;Alice: Great!    John-&gt;&gt;Bob: How about you?    Bob--&gt;&gt;John: Jolly good!</code></pre><h2 id="gantt-diagram"><a href="https://mermaid-js.github.io/mermaid/#/gantt">Gantt diagram</a></h2><blockquote><p>gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10</p><p>section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d</p></blockquote><pre><code class=" mermaid">ganttdateFormat  YYYY-MM-DDtitle Adding GANTT diagram to mermaidexcludes weekdays 2014-01-10section A sectionCompleted task            :done,    des1, 2014-01-06,2014-01-08Active task               :active,  des2, 2014-01-09, 3dFuture task               :         des3, after des2, 5dFuture task2               :         des4, after des3, 5d</code></pre><h2 id="class-diagram"><a href="https://mermaid-js.github.io/mermaid/#/classDiagram">Class diagram</a></h2><blockquote><p>classDiagram Class01 &lt;|-- AveryLongClass : Cool Class03 <em>-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --&gt; C2 : Where am i? Class09 --</em> C3 Class09 --|&gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 &lt;--&gt; C2: Cool label</p></blockquote><pre><code class=" mermaid">classDiagramClass01 &lt;|-- AveryLongClass : CoolClass03 *-- Class04Class05 o-- Class06Class07 .. Class08Class09 --&gt; C2 : Where am i?Class09 --* C3Class09 --|&gt; Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaClass08 &lt;--&gt; C2: Cool label</code></pre><h2 id="git-graph---experimental"><a href="https://mermaid-js.github.io/mermaid/#/?id=git-graph-exclamation-experimental">Git graph - experimental</a></h2><blockquote><p>gitGraph: options { "nodeSpacing": 150, "nodeRadius": 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch</p></blockquote><pre><code class=" mermaid">gitGraph:options&#123;    &quot;nodeSpacing&quot;: 150,    &quot;nodeRadius&quot;: 10&#125;endcommitbranch newbranchcheckout newbranchcommitcommitcheckout mastercommitcommitmerge newbranch</code></pre><h2 id="entity-relationship-diagram---experimental"><a href="https://mermaid-js.github.io/mermaid/#/entityRelationshipDiagram">Entity Relationship Diagram - experimental</a></h2><blockquote><p>erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses</p></blockquote><pre><code class=" mermaid">erDiagram    CUSTOMER ||--o&#123; ORDER : places    ORDER ||--|&#123; LINE-ITEM : contains    CUSTOMER &#125;|..|&#123; DELIVERY-ADDRESS : uses</code></pre><h2 id="user-journey-diagram"><a href="https://mermaid-js.github.io/mermaid/#/user-journey">User Journey Diagram</a></h2><blockquote><p>journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me</p></blockquote><pre><code class=" mermaid">journey    title My working day    section Go to work      Make tea: 5: Me      Go upstairs: 3: Me      Do work: 1: Me, Cat    section Go home      Go downstairs: 5: Me      Sit down: 5: Me</code></pre>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>计算机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows terminal + power shell调教手册</title>
    <link href="/2020/11/15/2020-11-15-winterminal/"/>
    <url>/2020/11/15/2020-11-15-winterminal/</url>
    
    <content type="html"><![CDATA[<h1 id="windows-terminal-power-shell调教手册">windows terminal + power shell调教手册</h1><h2 id="一安装-windows-terminal-和-power-shell-7">一、安装 windows terminal 和 power shell 7</h2><p>windows terminal直接在应用商店里搜索安装即可：</p><figure><img src="/images/posts/winterminal/image-20201115172018617.png" alt="image-20201115172018617" /><figcaption aria-hidden="true">image-20201115172018617</figcaption></figure><p>之后安装新版的power shell：</p><p>可以参考<a href="https://docs.microsoft.com/zh-cn/powershell/scripting/install/installing-powershell-core-on-windows?view=powershell-7.1">官方文档</a></p><p>全部安装好之后，从开始菜单打开power shell7，以管理员身份启动：</p><figure><img src="/images/posts/winterminal/image-20201115174738972.png" alt="image-20201115174738972" /><figcaption aria-hidden="true">image-20201115174738972</figcaption></figure><p>下面的操作，除非特殊说明，记得<strong>都要以管理员身份运行</strong>。</p><h2 id="二安装chocolatey">二、安装Chocolatey</h2><p>Chocolatey是一个Windows下的包管理系统，我们下面的很多插件等都需要使用他来进行安装，安装非常简单，只需要在power shell中执行<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[chocolatey官方文档](https://chocolatey.org/install#individual)">[1]</span></a></sup>：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Set-ExecutionPolicy</span> Bypass <span class="hljs-literal">-Scope</span> <span class="hljs-keyword">Process</span> <span class="hljs-literal">-Force</span>; [<span class="hljs-type">System.Net.ServicePointManager</span>]::SecurityProtocol = [<span class="hljs-type">System.Net.ServicePointManager</span>]::SecurityProtocol <span class="hljs-operator">-bor</span> <span class="hljs-number">3072</span>; <span class="hljs-built_in">iex</span> ((<span class="hljs-built_in">New-Object</span> System.Net.WebClient).DownloadString(<span class="hljs-string">&#x27;https://chocolatey.org/install.ps1&#x27;</span>))<br></code></pre></td></tr></table></figure><p>即可完成安装：</p><figure><img src="/images/posts/winterminal/tem2.jpg" alt="tem2" /><figcaption aria-hidden="true">tem2</figcaption></figure><p>在下面的过程中，若碰到使用Choco命令安装软件包时出现超时报错的，可以考虑为Choco设置代理：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">choco config <span class="hljs-built_in">set</span> proxy http://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">1080</span><br></code></pre></td></tr></table></figure><p><img src="/images/posts/winterminal/tem3.jpg" /></p><h2 id="三安装oh-my-posh">三、安装oh-my-posh</h2><p>目前，只要安装了Windows terminal就可以直接安装oh-my-posh<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[oh-my-posh](https://github.com/JanDeDobbeleer/oh-my-posh)">[2]</span></a></sup>了。</p><p>注意，下面的操作一定是在<font color=red><strong>以管理员身份运行的power shell中</strong></font>进行！</p><h3 id="安装microsoft-windows-terminal包">1、安装microsoft-windows-terminal包：</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">choco install microsoft<span class="hljs-literal">-windows-terminal</span><br></code></pre></td></tr></table></figure><p>之中会碰到询问是否运行安装脚本，输入A（<em>意为全部同意</em>），回车</p><figure><img src="/images/posts/winterminal/tem4.jpg" alt="tem3" /><figcaption aria-hidden="true">tem3</figcaption></figure><h3 id="分别安装posh-git和oh-my-posh">2、分别安装posh-git和oh-my-posh：</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Install-Module</span> posh<span class="hljs-literal">-git</span> <span class="hljs-literal">-Scope</span> CurrentUser<br><span class="hljs-built_in">Install-Module</span> <span class="hljs-built_in">oh</span><span class="hljs-literal">-my-posh</span> <span class="hljs-literal">-Scope</span> CurrentUser<br></code></pre></td></tr></table></figure><p>同理，若网络条件不佳导致安装失败，可以考虑通过代理安装：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Install-Module</span> posh<span class="hljs-literal">-git</span> <span class="hljs-literal">-Scope</span> CurrentUser <span class="hljs-literal">-Proxy</span> <span class="hljs-string">&quot;http://127.0.0.1:1080&quot;</span><br><span class="hljs-built_in">Install-Module</span> <span class="hljs-built_in">oh</span><span class="hljs-literal">-my-posh</span> <span class="hljs-literal">-Scope</span> CurrentUser <span class="hljs-literal">-Proxy</span> <span class="hljs-string">&quot;http://127.0.0.1:1080&quot;</span><br></code></pre></td></tr></table></figure><p>同样，按A，继续运行安装</p><p><img src="/images/posts/winterminal/tem5.jpg" /></p><h3 id="安装psreadline">3、安装PSReadLine</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Install-Module</span> <span class="hljs-literal">-Name</span> PSReadLine <span class="hljs-literal">-AllowPrerelease</span> <span class="hljs-literal">-Scope</span> CurrentUser <span class="hljs-literal">-Force</span> <span class="hljs-literal">-SkipPublisherCheck</span><br></code></pre></td></tr></table></figure><h3 id="生成配置文件">4、生成配置文件</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-keyword">if</span> (!(<span class="hljs-built_in">Test-Path</span> <span class="hljs-literal">-Path</span> <span class="hljs-variable">$PROFILE</span> )) &#123; <span class="hljs-built_in">New-Item</span> <span class="hljs-literal">-Type</span> File <span class="hljs-literal">-Path</span> <span class="hljs-variable">$PROFILE</span> <span class="hljs-literal">-Force</span> &#125;<br>notepad <span class="hljs-variable">$PROFILE</span><br></code></pre></td></tr></table></figure><p>第一行代码运行之后，即可通过第二行代码打开配置文件</p><p><img src="/images/posts/winterminal/tem6.jpg" /></p><p>在此配置文件中输入如下信息：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Import-Module</span> posh<span class="hljs-literal">-git</span><br><span class="hljs-built_in">Import-Module</span> <span class="hljs-built_in">oh</span><span class="hljs-literal">-my-posh</span><br><span class="hljs-built_in">Set-Theme</span> Paradox<br></code></pre></td></tr></table></figure><p>最后一行为主题，你也可以换成你自己喜欢的主题<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[oh-my-posh 主题样例](https://github.com/JanDeDobbeleer/oh-my-posh#themes)">[3]</span></a></sup></p><p>之后运行此代码，使配置文件生效：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">set-executionpolicy</span> remotesigned<br></code></pre></td></tr></table></figure><h3 id="安装支持字体">5、安装支持字体</h3><p>由于主题涉及到一些特殊字符，因此需要安装支持这些特殊字符的字体，</p><p>oh-my-posh官方文档中推荐的是<a href="https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/Meslo/M/Regular/complete/Meslo%20LG%20M%20Regular%20Nerd%20Font%20Complete%20Mono.ttf">Meslo LG M Regular for Powerline Nerd Font</a></p><p>当然，你也可以前往这个字体所在的GitHub项目<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="[nerd-fonts项目仓库](https://github.com/ryanoasis/nerd-fonts)">[4]</span></a></sup>选择其他自己喜欢的字体下载。</p><p>右键power shell标题栏，选择默认项，将字体改为刚刚安装的MesloLGM Nerd Font Mono</p><p><img src="/images/posts/winterminal/tem7.jpg" /></p><p><img src="/images/posts/winterminal/tem8.jpg" /></p><p>重新打开power shell，可以看到主题已经成功加载出来了</p><p><img src="/images/posts/winterminal/tem9.jpg" /></p><h2 id="四编辑windows-terminal配置文件">四、编辑Windows terminal配置文件</h2><p>刚刚仅仅是修改了power shell的配置，但是打开Windows terminal可以看到字体仍然没有加载，且默认的终端也不是刚刚安装的power shell7，而是旧版的power shell，此时就需要修改Windows terminal配置文件<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Windows terminal配置文档](https://aka.ms/terminal-profile-settings)">[5]</span></a></sup>。</p><p>点击标签栏的剪头，选择设置，自动打开配置文件</p><p><img src="/images/posts/winterminal/tem10.jpg" /></p><p>此时在你的"profiles"的列表中应该有默认的四个配置，从上到下分别为默认power shell、CMD、Azure Cloud Shell、和刚刚安装的power shell7</p><p><img src="/images/posts/winterminal/tem11.jpg" /></p><h3 id="设置power-shell字体">1、设置power shell字体</h3><p>选择PowerShell，为其添加字体和字号颜色等配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;colorScheme&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Campbell&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;useAcrylic&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;closeOnExit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;acrylicOpacity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.8</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;fontFace&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;MesloLGM Nerd Font Mono&quot;</span><br></code></pre></td></tr></table></figure><p><font color=red><strong>记得不是最后一行的要加逗号</strong></font></p><blockquote><p>这里如果不清楚字体名字，可以参考上一步power shell配置中选择的那个名字</p></blockquote><h3 id="设置默认终端为power-shell7">2、设置默认终端为power shell7</h3><p>在配置文件的开头处，将<code>defaultProfile</code>改为power shell7的guid即可，如下图所示：</p><p><img src="/images/posts/winterminal/tem12.jpg" /></p><p>此时载打开Windows terminal，可以看到界面已经焕然一新：</p><p><img src="/images/posts/winterminal/tem13.jpg" /></p><h3 id="修改添加默认快捷键">3、修改（添加）默认快捷键：</h3><p>你可以根据官方文档<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Windows terminal快捷键指令文档](https://docs.microsoft.com/zh-cn/windows/terminal/customize-settings/actions)">[6]</span></a></sup>自己修改，也可以直接参考我给出的这份配置文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;actions&quot;</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;action&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;copy&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;singleLine&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;keys&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+c&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;paste&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;keys&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+v&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;find&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;keys&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+shift+f&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>  <br>        <br>        <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;newTab&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;keys&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+n&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>        <br>        <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;closeTab&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;keys&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+shift+w&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>        <br>        <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;closePane&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;keys&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+delete&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>        <br><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;action&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;splitPane&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;split&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;splitMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;duplicate&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;keys&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;alt+[&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>        <br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;action&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;moveFocus&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;direction&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;up&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;keys&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;alt+up&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>        <br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;action&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;moveFocus&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;direction&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;down&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;keys&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;alt+down&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>        <br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;action&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;moveFocus&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;direction&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;left&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;keys&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;alt+left&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>        <br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;action&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;moveFocus&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;direction&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;right&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;keys&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;alt+right&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>        <br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;action&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;resizePane&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;direction&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;up&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;keys&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+alt+up&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>        <br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;action&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;resizePane&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;direction&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;down&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;keys&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+alt+down&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>        <br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;action&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;resizePane&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;direction&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;left&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;keys&quot;</span><span class="hljs-punctuation">:</span>  <span class="hljs-string">&quot;ctrl+alt+left&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>        <br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;action&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;resizePane&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;direction&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;right&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;keys&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+alt+right&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>    <br>        <br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scrollUp&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;keys&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+up&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>        <br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scrollUpPage&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;keys&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+shift+up&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>        <br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scrollDown&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;keys&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+down&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>        <br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scrollDownPage&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;keys&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+shift+down&quot;</span><span class="hljs-punctuation">&#125;</span>    <br>    <span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>主要一个要说的就是分割窗口：</p><ul><li>通过<code>alt+[</code>来分割窗口</li><li>通过 alt+上下左右 来切换到不同的窗口（也可以直接通过鼠标点击）</li><li>在对应的窗口通过 ctrl+alt+上下左右 来调整大小</li></ul><h2 id="五使用设置及插件安装">五、使用设置及插件安装</h2><h3 id="自动补全扩展">1、自动补全扩展</h3><p>同理，通过</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">notepad <span class="hljs-variable">$PROFILE</span><br></code></pre></td></tr></table></figure><p>打开power shell配置文件，在下面添加一行：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">Set</span><span class="hljs-operator">-</span><span class="hljs-variable">PSReadlineKeyHandler</span> <span class="hljs-operator">-</span><span class="hljs-built_in">Key</span> <span class="hljs-built_in">Tab</span> <span class="hljs-operator">-</span><span class="hljs-built_in">Function</span> <span class="hljs-variable">MenuComplete</span><br></code></pre></td></tr></table></figure><p>这样当使用Tab补全时，会可视化的列出补全选项，且可以直接通过光标选择</p><p><img src="/images/posts/winterminal/tem14.jpg" /></p><h3 id="文件检索插件fzf">2、文件检索插件fzf</h3><p>首先通过Chocolatey安装fzf：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">choco install fzf<br></code></pre></td></tr></table></figure><p>接下来安装power shell支持：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Install-Module</span> PSFzf<br></code></pre></td></tr></table></figure><p>之后打开配置文件：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">notepad <span class="hljs-variable">$PROFILE</span><br></code></pre></td></tr></table></figure><p>在配置文件中禁用默认的配置方案，并导入模块。</p><p>添加：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-keyword">Import</span>-<span class="hljs-keyword">Module</span> PSFzf<br><br><span class="hljs-keyword">Remove</span>-PSReadlineKeyHandler &#x27;Ctrl+r&#x27;<br></code></pre></td></tr></table></figure><p>此时可以通过在需要查询的文件夹中按 Ctrl+t 打开搜索功能</p><h2 id="六将windows-terminal添加到右键菜单">六、将Windows terminal添加到右键菜单</h2><p>直接安装<sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="[windowsterminal-shell](https://github.com/lextm/windowsterminal-shell)">[7]</span></a></sup>：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Set-ExecutionPolicy</span> Bypass <span class="hljs-literal">-Scope</span> <span class="hljs-keyword">Process</span> <span class="hljs-literal">-Force</span>; [<span class="hljs-type">System.Net.ServicePointManager</span>]::SecurityProtocol = [<span class="hljs-type">System.Net.ServicePointManager</span>]::SecurityProtocol <span class="hljs-operator">-bor</span> <span class="hljs-number">3072</span>; <span class="hljs-built_in">iex</span> ((<span class="hljs-built_in">New-Object</span> System.Net.WebClient).DownloadString(<span class="hljs-string">&#x27;https://raw.githubusercontent.com/lextm/windowsterminal-shell/master/install.ps1&#x27;</span>))<br></code></pre></td></tr></table></figure><p>这一步若因网络原因导致无法从GitHub下载文件，可以考虑采用以下指令来为power shell设置全局代理：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">Set</span>-Item <span class="hljs-comment">Env:http_proxy</span> <span class="hljs-comment">&quot;http://127.0.0.1:1080&quot;</span><br><span class="hljs-keyword">Set</span>-Item <span class="hljs-comment">Env:https_proxy</span> <span class="hljs-comment">&quot;http://127.0.0.1:1080&quot;</span><br></code></pre></td></tr></table></figure><p>之后想要取消代理，则执行：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-comment">Remove-Item Env:http_proxy</span><br><span class="hljs-comment">Remove-Item Env:https_proxy</span><br></code></pre></td></tr></table></figure><p>执行之后，可以看到现在的右键菜单中已经有了Windows terminal。</p><p><img src="/images/posts/winterminal/tem15.jpg" /></p><hr /><h2 id="参考文献">参考文献：</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://chocolatey.org/install#individual">chocolatey官方文档</a> <a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://github.com/JanDeDobbeleer/oh-my-posh">oh-my-posh</a> <a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://github.com/JanDeDobbeleer/oh-my-posh#themes">oh-my-posh 主题样例</a> <a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://github.com/ryanoasis/nerd-fonts">nerd-fonts项目仓库</a> <a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://aka.ms/terminal-profile-settings">Windows terminal配置文档</a> <a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://docs.microsoft.com/zh-cn/windows/terminal/customize-settings/actions">Windows terminal快捷键指令文档</a> <a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li><li><span id="fn:7" class="footnote-text"><span><a href="https://github.com/lextm/windowsterminal-shell">windowsterminal-shell</a> <a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>计算机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派安装python3+OpenCV4.0</title>
    <link href="/2020/11/12/2020-11-12-opencvonpi/"/>
    <url>/2020/11/12/2020-11-12-opencvonpi/</url>
    
    <content type="html"><![CDATA[<h1 id="树莓派安装python3opencv4.0">树莓派安装python3+OpenCV4.0</h1><p>本教程特指通过源码编译安装</p><span id="more"></span><div class="note note-info">            <p>2020-11-28更新：现在，contrib版本已经可以直接通过pipy安装，详见：<strong>五、直接安装</strong></p>          </div><h2 id="一树莓派配置">一、树莓派配置</h2><h3 id="换源">1、换源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 编辑 `/etc/apt/sources.list` 文件，删除原文件所有内容，用以下内容取代：</span><br>deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib rpi<br>deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib rpi<br><br><span class="hljs-comment"># 编辑 `/etc/apt/sources.list.d/raspi.list` 文件，删除原文件所有内容，用以下内容取代：</span><br>deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui<br></code></pre></td></tr></table></figure><p>编辑器推荐使用nano，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nano /etc/apt/sources.list<br></code></pre></td></tr></table></figure><p>编辑完毕后 CTRL+O 保存、CTRL+X 退出。</p><p>更新源列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get update<br><span class="hljs-built_in">sudo</span> apt-get -y dist-upgrade<br></code></pre></td></tr></table></figure><h3 id="安装screen">2、安装screen</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install screen<br></code></pre></td></tr></table></figure><p>screen可以让进程在<strong>后台挂起</strong>，方便后面编译时脱机编译</p><h3 id="修改交换分区及显存">3、修改交换分区及显存</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nano /etc/dphys-swapfile<br></code></pre></td></tr></table></figure><p>选择将交换分区大小设为内存的两倍，即：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># set size to computed value, this times RAM size, dynamically adapts,</span><br><span class="hljs-comment">#   guarantees that there is enough swap without wasting disk space on excess</span><br>CONF_SWAPFACTOR=2<br></code></pre></td></tr></table></figure><p>并将其他的配置注释掉。</p><p>重启服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> /etc/init.d/dphys-swapfile stop<br><span class="hljs-built_in">sudo</span> /etc/init.d/dphys-swapfile start<br></code></pre></td></tr></table></figure><p>之后检查是否修改成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">free -m<br></code></pre></td></tr></table></figure><p>若看到类似如下信息，则说明修改成功：</p><p><img src="/images/posts/picv/Screen-Shot-2018-11-21-at-1.16.59-PM.png" /></p><p>修改显存：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nano /boot/config.txt<br></code></pre></td></tr></table></figure><p>将 gpu_mem 设为128</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gpu_mem=128<br></code></pre></td></tr></table></figure><p>（可以适当的再改大一点）</p><p>重启树莓派：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> reboot<br></code></pre></td></tr></table></figure><h2 id="二安装依赖">二、安装依赖</h2><h3 id="opencv前置依赖">1、OpenCV前置依赖</h3><p>git：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install git<br></code></pre></td></tr></table></figure><p>编译工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install cmake<br><span class="hljs-built_in">sudo</span> apt-get install gcc g++<br></code></pre></td></tr></table></figure><p>图形界面、媒体、编码等依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install libavcodec-dev libavformat-dev libswscale-dev<br><span class="hljs-built_in">sudo</span> apt-get install libgstreamer-plugins-base1.0-dev libgstreamer1.0-dev<br></code></pre></td></tr></table></figure><p>GTK支持：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install libgtk2.0-dev libgtk-3-dev<br></code></pre></td></tr></table></figure><p>图片解码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install libpng-dev<br><span class="hljs-built_in">sudo</span> apt-get install libjpeg-dev<br><span class="hljs-built_in">sudo</span> apt-get install libopenexr-dev<br><span class="hljs-built_in">sudo</span> apt-get install libtiff-dev<br><span class="hljs-built_in">sudo</span> apt-get install libwebp-dev<br></code></pre></td></tr></table></figure><h3 id="python相关">2、python相关</h3><p>安装python3：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install python3-dev<br></code></pre></td></tr></table></figure><p>执行以下指令，检查是否有安装pip：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 -h<br></code></pre></td></tr></table></figure><p>若没有安装，则安装pip3：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install python3-pip<br></code></pre></td></tr></table></figure><p>安装 numpy 和 scipy：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> pip3 install numpy scipy<br></code></pre></td></tr></table></figure><h3 id="建立后台进程">3、建立后台进程</h3><p>接下来的编译过程会持续较长时间，且几乎吃满树莓派的CPU，建议使用screen专门创建一个后台用于编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">screen -S cv<br></code></pre></td></tr></table></figure><p>这里后面的cv可以说任意你喜欢的名字，记住就好。</p><p>之后想要退出此后台，按组合键：<code>CTRL+A+D</code>；</p><p>想要重新切入这个后台，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">screen -r cv<br></code></pre></td></tr></table></figure><p>后面的名字就是之前你输入的那个</p><p>这样，当进行下面耗时较长的步骤时，可以在进程中执行，执行完指令后按CTRL+A+D退出进程，即可关闭SSH链接，不用保持一直打开，编译仍可以在后台运行。</p><h2 id="三正式编译">三、正式编译</h2><p>首先分别下载两个源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/opencv/opencv.git<br>git <span class="hljs-built_in">clone</span> https://github.com/opencv/opencv_contrib.git<br></code></pre></td></tr></table></figure><p>若git下载缓慢，可以用gitee进行转载：</p><figure><img src="/images/posts/picv/image-20201112202141441.png" alt="image-20201112202141441" /><figcaption aria-hidden="true">image-20201112202141441</figcaption></figure><figure><img src="/images/posts/picv/image-20201112202225347.png" alt="image-20201112202225347" /><figcaption aria-hidden="true">image-20201112202225347</figcaption></figure><figure><img src="/images/posts/picv/image-20201112202331350.png" alt="image-20201112202331350" /><figcaption aria-hidden="true">image-20201112202331350</figcaption></figure><p>之后只要将仓库代码换为gitee上你down下来的仓库地址即可：</p><figure><img src="/images/posts/picv/image-20201112202546806.png" alt="image-20201112202546806" /><figcaption aria-hidden="true">image-20201112202546806</figcaption></figure><p>下载下来后，在应该存在两个文件夹，分别名为opencv和opencv_contrib。</p><p>建立编译文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/opencv/  <span class="hljs-comment"># 这里是opencv本体源码的文件夹，请根据你的实际路径加以调整</span><br><span class="hljs-built_in">mkdir</span> build<br><span class="hljs-built_in">cd</span> build<br></code></pre></td></tr></table></figure><p>添加编译配置信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">cmake -D CMAKE_BUILD_TYPE=RELEASE \<br> -D CMAKE_INSTALL_PREFIX=/usr/local \<br>-D INSTALL_C_EXAMPLES=OFF \<br>-D INSTALL_PYTHON_EXAMPLES=OFF \<br>-D OPENCV_EXTRA_MODULES_PATH=/home/pi/opencv_contrib/modules \  <span class="hljs-comment"># 这里是contrib文件夹所在路径，请根据你的实际路径加以调整</span><br>-D BUILD_EXAMPLES=OFF ..<br></code></pre></td></tr></table></figure><p>配置完成后，开始编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make -j4<br></code></pre></td></tr></table></figure><p>这里是使用4个线程进行编译，理论上树莓派4的性能应该是可以支持8线程的，可以将后面参数改为 <code>-j8</code></p><p>编译结束后，开始安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> make install<br><span class="hljs-built_in">sudo</span> ldconfig<br><span class="hljs-built_in">sudo</span> apt-get update<br></code></pre></td></tr></table></figure><p>之后重启系统：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> reboot<br></code></pre></td></tr></table></figure><h2 id="四可能问题">四、可能问题</h2><p>若安装完成后import cv2仍然报错，可以考虑手动拷贝文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/opencv/build/lib/python3<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> cv2.cpython-37m-arm-linux-gnueabihf.so /usr/local/lib/python3.7/dist-packages/cv2.so<br></code></pre></td></tr></table></figure><p>这里的文件路径及python版本根据实际情况进行相应修改即可。</p><h2 id="五直接安装">五、直接安装</h2><p>若要安装原生opencv，则直接运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install opencv-python<br>或<br>pip3 install opencv-python<br></code></pre></td></tr></table></figure><p>若需要人脸识别、图像识别等额外功能，则运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install opencv-contrib-python<br>或<br>pip3 install opencv-contrib-python<br></code></pre></td></tr></table></figure><p>注意，这两个版本的opencv仅可<font color=red><strong>同时安装一个</strong></font></p><p>可以通过</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lsl">pip <span class="hljs-type">list</span><br>或<br>pip3 <span class="hljs-type">list</span><br></code></pre></td></tr></table></figure><p>来查看已安装的包，若已经安装了另一个版本，可以通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip|pip3 uninstall [包名]<br></code></pre></td></tr></table></figure><p>来卸载已经安装的opencv。</p><hr /><h4 id="参考文档">参考文档：</h4><p>【1】: <a href="https://docs.opencv.org/master/d2/de6/tutorial_py_setup_in_ubuntu.html">OpenCV官方文档</a></p><p>【2】: <a href="https://www.alatortsev.com/installing-opencv-4-0-on-raspberry-pi-3-b/">installing opencv4.0 on raspberrypi 3b</a></p><p>【3】: <a href="https://github.com/opencv/opencv_contrib">opnecv_contrib文档</a></p><p>【4】: <a href="https://mirrors.tuna.tsinghua.edu.cn/help/raspbian/">清华大学开源镜像站</a></p><p>【6】: <a href="https://pypi.org/project/opencv-contrib-python/">pypi说明界面</a></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>计算机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>马原答辩大纲</title>
    <link href="/2020/10/27/2020-10-27-%E9%A9%AC%E5%8E%9F/"/>
    <url>/2020/10/27/2020-10-27-%E9%A9%AC%E5%8E%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="马原汇报">马原汇报</h1><h2 id="联系与发展辩证法的两大总特征">联系与发展（辩证法的两大总特征）</h2><h3 id="联系的普遍性">联系的普遍性</h3><ul><li>任何事物同其他事物都处于一定的联系之中</li><li>整个世界是互相联系统一的一个整体</li></ul><h3 id="联系的客观性">联系的客观性</h3><ul><li>联系是事务本身固有的</li></ul><p><strong>联系的多样性、条件性</strong></p><blockquote><p>分析事物的具体联系，确立整体性、开放性的观点，从动态中考察事物的普遍联系</p></blockquote><h3 id="五对范畴其二普遍性">五对范畴其二（普遍性）</h3><h4 id="必然与偶然">必然与偶然</h4><ul><li><p>揭示事物发展趋势（一方面）</p></li><li><p>必然性存在于偶然性之中</p></li><li><p>偶然是必然的表现方式</p><ul><li>认识论相关<ul><li>认识世界与改造世界相互依赖、相互制约、辩证统一</li><li>只有在认识必然性的基础上才有自由的活动</li><li>一切从实际出发、实事求是</li></ul></li></ul></li></ul><blockquote><p>原因-结果、现象-本质不再赘述</p></blockquote><h3 id="量变与质变">量变与质变</h3><ul><li>量变是质变的必要准备</li><li>质变是量变的必然结果</li></ul><blockquote><p>指导从事实践活动的重要思想原则</p></blockquote><h2 id="唯物史观">唯物史观</h2><h3 id="人民群众在历史发展中的作用">人民群众在历史发展中的作用</h3><ul><li>人民群众是历史的创造者<ul><li>人民群众起着决定性的作用</li><li>人民群众是社会实践的主体</li></ul></li><li>个人在历史中的作用<ul><li>历史是无数人合力的作用</li><li>历史人物是领导者</li><li>体现了偶然性与必然性的统一</li></ul></li></ul><h3 id="科学技术在社会发展中的作用">科学技术在社会发展中的作用</h3><ul><li>科技是一把双刃剑</li><li>科学技术对生产生活方式产生了巨大的影响</li><li>科学技术推动了思维方式的变革</li></ul><blockquote><p>正确把握科学技术的社会作用</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>期末复习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>期末复习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搬运组数据库API说明</title>
    <link href="/2020/10/13/2020-10-13-apidoc/"/>
    <url>/2020/10/13/2020-10-13-apidoc/</url>
    
    <content type="html"><![CDATA[<p>为了方便接入，将原来内置于bot中的搬运组数据存储功能分离出来，作为单独的API使用，以下为该API使用参考 <span id="more"></span></p><h1 id="搬运组api说明文档">搬运组API说明文档</h1><p>仅供组内相应开发使用。</p><p>需要验证密钥，密钥请在群内私聊我。</p><p>API链接：<a href="http://api.aye10032.com/">http://api.aye10032.com/</a></p><h2 id="获取信息get">获取信息（GET）</h2><h3 id="videos">videos</h3><p>查询相应视频的信息</p><table><thead><tr class="header"><th style="text-align: center;">字段</th><th style="text-align: center;">类型</th><th style="text-align: center;">必填</th><th style="text-align: center;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">id</td><td style="text-align: center;">int</td><td style="text-align: center;">false</td><td style="text-align: center;">视频对应的ID，若填写则<strong>无视下面所有字段</strong>，直接返回该ID对应的视频信息</td></tr><tr class="even"><td style="text-align: center;">has_done</td><td style="text-align: center;">int</td><td style="text-align: center;">true</td><td style="text-align: center;"><strong>0</strong>：返回未完工的视频列表<br> <strong>1</strong>：返回所有视频列表</td></tr><tr class="odd"><td style="text-align: center;">need_trans</td><td style="text-align: center;">int</td><td style="text-align: center;">true</td><td style="text-align: center;"><strong>0</strong>：返回所有未完工视频信息<br> <strong>1</strong>：返回需要翻译的视频列表</td></tr></tbody></table><p><strong>返回值</strong></p><table><thead><tr class="header"><th style="text-align: center;">返回字段</th><th style="text-align: center;">类型</th><th style="text-align: center;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">ID</td><td style="text-align: center;">int</td><td style="text-align: center;">视频ID，每个视频的唯一标识</td></tr><tr class="even"><td style="text-align: center;">URL</td><td style="text-align: center;">string</td><td style="text-align: center;">视频的源链接</td></tr><tr class="odd"><td style="text-align: center;">HASDONE</td><td style="text-align: center;">int</td><td style="text-align: center;"><strong>0</strong>：未完工<br> <strong>1</strong>：已完工</td></tr><tr class="even"><td style="text-align: center;">NEEDTRANS</td><td style="text-align: center;">int</td><td style="text-align: center;"><strong>0</strong>：不需要翻译<br> <strong>1</strong>：需要翻译</td></tr><tr class="odd"><td style="text-align: center;">ISTRANS</td><td style="text-align: center;">int</td><td style="text-align: center;"><strong>0</strong>：未开始翻译<br> <strong>1</strong>：已有人开始承接翻译</td></tr><tr class="even"><td style="text-align: center;">FROMEQQ</td><td style="text-align: center;">int</td><td style="text-align: center;">添加此视频的QQ号</td></tr><tr class="odd"><td style="text-align: center;">DESCRIPTION</td><td style="text-align: center;">string</td><td style="text-align: center;">对此视频搬运的描述</td></tr><tr class="even"><td style="text-align: center;">TIME</td><td style="text-align: center;">date</td><td style="text-align: center;">搬运（翻译）需求添加的时间</td></tr></tbody></table><h3 id="translate">translate</h3><p>查询相应视频的翻译人员信息</p><table><thead><tr class="header"><th style="text-align: center;">字段</th><th style="text-align: center;">类型</th><th style="text-align: center;">必填</th><th style="text-align: center;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">id</td><td style="text-align: center;">int</td><td style="text-align: center;">true</td><td style="text-align: center;">需要查询的<strong>视频的ID</strong></td></tr></tbody></table><p><strong>返回值</strong></p><table><thead><tr class="header"><th style="text-align: center;">返回字段</th><th style="text-align: center;">类型</th><th style="text-align: center;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">FROMID</td><td style="text-align: center;">int</td><td style="text-align: center;">该翻译信息所属视频的ID</td></tr><tr class="even"><td style="text-align: center;">FROMQQ</td><td style="text-align: center;">int</td><td style="text-align: center;">翻译承接人QQ</td></tr><tr class="odd"><td style="text-align: center;">MSG</td><td style="text-align: center;">string</td><td style="text-align: center;">翻译承接人备注信息（承接时间段）</td></tr><tr class="even"><td style="text-align: center;">TIME</td><td style="text-align: center;">date</td><td style="text-align: center;">信息添加时间</td></tr></tbody></table><h2 id="修改信息">修改信息</h2><h3 id="new_video">new_video</h3><table><thead><tr class="header"><th style="text-align: center;">字段</th><th style="text-align: center;">类型</th><th style="text-align: center;">必填</th><th style="text-align: center;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">url</td><td style="text-align: center;">string</td><td style="text-align: center;">true</td><td style="text-align: center;">视频链接</td></tr><tr class="even"><td style="text-align: center;">description</td><td style="text-align: center;">string</td><td style="text-align: center;">true</td><td style="text-align: center;">搬运描述</td></tr><tr class="odd"><td style="text-align: center;">need_trans</td><td style="text-align: center;">int</td><td style="text-align: center;">true</td><td style="text-align: center;"><strong>0</strong>：不需要翻译<br> <strong>1</strong>：需要翻译</td></tr><tr class="even"><td style="text-align: center;">from_qq</td><td style="text-align: center;">int</td><td style="text-align: center;">true</td><td style="text-align: center;">添加此视频的QQ号</td></tr><tr class="odd"><td style="text-align: center;">key</td><td style="text-align: center;">string</td><td style="text-align: center;">true</td><td style="text-align: center;">密钥字符串</td></tr></tbody></table><p><strong>返回值</strong></p><ul><li>200 添加成功</li><li>401 密钥验证错误</li></ul><h3 id="update">update</h3><table><thead><tr class="header"><th style="text-align: center;">字段</th><th style="text-align: center;">类型</th><th style="text-align: center;">必填</th><th style="text-align: center;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">id</td><td style="text-align: center;">string</td><td style="text-align: center;">true</td><td style="text-align: center;">需要修改的<strong>视频的ID</strong></td></tr><tr class="even"><td style="text-align: center;">has_done</td><td style="text-align: center;">int</td><td style="text-align: center;">true</td><td style="text-align: center;"><strong>0</strong>：未完工<br> <strong>1</strong>：已完工</td></tr><tr class="odd"><td style="text-align: center;">is_trans</td><td style="text-align: center;">int</td><td style="text-align: center;">true</td><td style="text-align: center;"><strong>0</strong>：未开始翻译<br> <strong>1</strong>：已有人开始承接翻译</td></tr><tr class="even"><td style="text-align: center;">key</td><td style="text-align: center;">string</td><td style="text-align: center;">true</td><td style="text-align: center;">密钥字符串</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>开发文档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>开发文档</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工业物联网复习</title>
    <link href="/2020/06/28/2020-06-28-IoT/"/>
    <url>/2020/06/28/2020-06-28-IoT/</url>
    
    <content type="html"><![CDATA[<h1 id="工业物联网考试内容与复习指导">《工业物联网考试内容与复习指导》</h1><h2 id="一简答题">一、简答题</h2><h3 id="第一章">第一章</h3><p><strong>1、通常国内对物联网的定义是什么？物联网主要解决哪三个层次的互联？（6 分）</strong></p><blockquote><ul><li>国内通常认为物联网是通过无线射频识别装置、红外感应器、全球定位系统和激光扫描器等信息传感设备，按约定的协议，把任何物品与互联网相连接，进行信息交换和通信，以实现智能化识别、定位、跟踪、监控和管理的一种网络。</li><li>物联网主要解决物品到物品（Thing to Thing，T2T）、人到物品（Human to Thing，H2T）以及人到人（Human to Human，H2H）之间的互连。</li></ul></blockquote><p><strong>2、物联网的基本特征，物联网应用的特点。（6 分）</strong></p><blockquote><ul><li>物联网的基本特征就是网络化、物联化、互联化、自动化、感知化以及智能化等。</li><li>特点：<ul><li>（1）经济发展跨越化。</li><li>（2）感知识别普适化。</li><li>（3）异构设备互联化。</li><li>（4）联网终端规模化。</li><li>（5）管理调控智能化。</li><li>（6）应用服务链条化。</li></ul></li></ul></blockquote><p><strong>3、物联网应用服务类型有： （5 分）</strong></p><blockquote><ul><li><strong>① 联网类服务</strong></li><li><strong>② 信息类服务</strong></li><li><strong>③ 操作类服务</strong></li><li><strong>④ 安全类服务</strong></li><li><strong>⑤ 管理类服务</strong></li></ul></blockquote><p><strong>4、物联网应用 4 大关键领域和 3 大物联网应用模式（5 分）</strong></p><blockquote><ul><li>RFID领域、传感网（Wireless Sensor Networks，WSN）领域、M2M（Machine to Machine）领域和两化（工业化与信息化）融合领域</li><li>基于RFID的物联网应用模式<strong>、</strong>基于WSN的物联网应用模式<strong>、</strong>基于M2M的物联网应用模式</li></ul></blockquote><h3 id="第二章">第二章</h3><p><strong>1、物联网软件平台的组成部分（4 分）</strong></p><blockquote><p>一般来说，物联网软件平台建立在分层的通信协议体系之上，通常包括<strong>数据感知系统软件</strong>、<strong>中间件系统软件</strong>、<strong>网络操作系统</strong>（包括嵌入式系统）以及<strong>物联网管理信息中心</strong>（包括企业物联网管理中心、国家物联网管理中心、国际物联网管理中心及其信息中心）的<strong>信息管理系统</strong>（Management Information System，MIS）等。</p></blockquote><p><strong>2、物联网的参考体系架构的分层及各层的作用。（10 分）</strong></p><blockquote><ul><li>物联网的参考体系架构可分为三层，即<strong>感知层</strong>、<strong>网络层</strong>和<strong>应用层</strong><ul><li><strong>感知层</strong>。感知层是物联网的皮肤和五官，主要完成信息的收集与简单处理。</li><li><strong>网络层</strong>。网络层是物联网的神经中枢和大脑，主要完成信息的远距离传输等功能。</li><li><strong>应用层</strong>。应用层主要完成服务发现和服务呈现的工作，其作用是将物联网的“社会分工”与行业需求相结合，实现广泛的智能化。</li></ul></li></ul></blockquote><p><strong>3、物联网的三种体系结构及其组成</strong></p><blockquote><ul><li><strong>物联网自主体系结构</strong>，由数据面、控制面、知识面和管理面组成。</li><li><strong>物联网EPC体系结构</strong>，由EPC编码体系、RFID系统及EPC信息网络系统等3个部分组成。</li><li><strong>物联网UID技术体系架构</strong>，由泛在识别码（uCode）、泛在通信器（Ubiquitous Communicator，UC）、信息系统服务器和uCode解析服务器等4部分构成。</li></ul></blockquote><p><strong>4、物联网体系结构的特点和物联网体系结构的构建原则（6 分）</strong></p><blockquote><ul><li>特点:<ul><li>（1）网络拓扑结构变化快</li><li>（2）传感器网络难以形成网络的结点和中心</li><li>（3）传感器网络的作用距离一般比较短</li><li>（4）传感器网络数据的数量不大</li><li>（5）物联网对数据的安全性要求较高</li><li>（6）网络终端之间的关联性较低</li><li>（7）网络地址的短缺导致网络管理的复杂性</li></ul></li><li>原则：<ul><li>（1）多样性原则</li><li>（2）时空性原则</li><li>（3）互联性原则</li><li>（4）互操作性</li><li>（5）扩展性原则</li><li>（6）安全性原则</li></ul></li></ul></blockquote><p><strong>5、物联网结点类型，及各种节点在电源、移动性、感知性、存储能力、计算能 力、联网能力和连接能力等几个方面的比较（6 分）</strong></p><blockquote><table><thead><tr class="header"><th style="text-align: center;">节点类型</th><th style="text-align: center;">无源CPS</th><th style="text-align: center;">有源CPS</th><th style="text-align: center;">互联网CPS</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">电源</td><td style="text-align: center;">无</td><td style="text-align: center;">有</td><td style="text-align: center;">不间断</td></tr><tr class="even"><td style="text-align: center;">移动性</td><td style="text-align: center;">有</td><td style="text-align: center;">可有</td><td style="text-align: center;">无</td></tr><tr class="odd"><td style="text-align: center;">感知性</td><td style="text-align: center;">被感知</td><td style="text-align: center;">感知</td><td style="text-align: center;">感知</td></tr><tr class="even"><td style="text-align: center;">存储能力</td><td style="text-align: center;">无</td><td style="text-align: center;">有</td><td style="text-align: center;">强</td></tr><tr class="odd"><td style="text-align: center;">计算能力</td><td style="text-align: center;">无</td><td style="text-align: center;">有</td><td style="text-align: center;">强</td></tr><tr class="even"><td style="text-align: center;">联网能力</td><td style="text-align: center;">无</td><td style="text-align: center;">有</td><td style="text-align: center;">强</td></tr><tr class="odd"><td style="text-align: center;">连接能力</td><td style="text-align: center;">T2T</td><td style="text-align: center;">T2T、H2T、H2H</td><td style="text-align: center;">H2T、H2H</td></tr></tbody></table></blockquote><p><strong>6、物联网结点的互联类型、连接方式及不同连接方式的特点（10 分）</strong></p><blockquote><ul><li>结点之间可能存在的连接类型包括<strong>无源CPS结点与有源CPS结点</strong>、<strong>有源CPS结点与有源CPS结点</strong>以及<strong>有源CPS结点与互联网CPS结点</strong>之间的连接。<ul><li><strong>无源CPS结点与有源CPS结点</strong>的互连结构，两者通过物理层协议连接。</li><li><strong>有源CPS结点与有源CPS结点</strong>的互连结构。有源CPS结点之间通过物理层、数据链路层和应用层的协议交互，可实现有源CPS结点之间的信息采集、传递和查询。</li><li><strong>有源CPS结点与互联网CPS结点</strong>的互连结构，有源CPS结点需要通过CPS网关，才能与互联网结点连接。</li></ul></li></ul></blockquote><h3 id="第三章">第三章</h3><p><strong>1、红外感应技术原理是什么？红外感应技术的主要优点有哪些？（5 分）</strong></p><blockquote><ul><li>红外感应技术是指利用目标与背景之间的红外辐射差异所形成的热点或图像来获取目标和背景信息。</li><li>红外感应技术的<strong>主要优点</strong>在于符合隐身自身高度隐蔽性的要求，即被动探测、不辐射电磁波，且因工作波长较微波雷达短3～4个数量级，因此可以形成具有高度细节的目标图像，而且目标分辨率也较高。</li></ul></blockquote><p><strong>2、GPS 的组成部分，基本观测方式及观测方式的优缺点。（8 分）</strong></p><blockquote><ul><li>GPS主要有三大部分组成，即<strong>空间星座部分</strong>、<strong>地面监控部分</strong>和<strong>用户接收部分</strong>。</li><li><strong>伪距定位</strong>，<strong>优点</strong>是数据处理简单，对定位条件的要求低，不存在整周模糊度问题，可以非常容易地实现实时定位；<strong>缺点</strong>是观测值精度低；</li><li><strong>载波相位定位</strong>，<strong>优点</strong>是观测值的精度高，一般优于2 mm；<strong>缺点</strong>是数据处理过程复杂，存在整周模糊度问题。</li></ul></blockquote><p><strong>3、RFID 的工作频带，RFID 的选取需要考虑的问题。（6 分）</strong></p><blockquote><ul><li><ol type="1"><li><strong>无源低频（125～134 kHz）</strong></li><li><strong>无源高频（13.56 MHz）</strong></li><li><strong>无源超高频（860～960 MHz）</strong></li><li><strong>有源RFID技术（2.45 GHz，5.8 GHz）</strong></li></ol></li><li>选择RFID标签时，除了要考虑<strong>频率与距离的关系</strong>，同时还要考虑如下几点：<ul><li><strong>频点</strong></li><li><strong>读/写技术</strong></li><li><strong>识读距离</strong></li><li><strong>标签外形</strong></li><li><strong>环境条件</strong></li><li><strong>采用标准</strong></li></ul></li></ul></blockquote><p><strong>4、EPC 编码规则，EPC 编码结构及编码各部分的意义（8 分）</strong></p><blockquote><ul><li><ol type="1"><li><strong>唯一性</strong></li><li><strong>永久性</strong></li><li><strong>简单性</strong></li><li><strong>可扩展性</strong></li><li><strong>保密性与安全性</strong></li><li><strong>无含义</strong></li></ol></li><li>EPC标签编码由一个分层次、可变长度的标头以及一系列数字字段组成。标头之后的3段数据依次为EPC管理者、对象分类和序列号。<ul><li><strong>EPC的标头字段</strong>（EPC Header）。标头字段标识EPC的总长、识别类型和EPC编码结构。</li><li><strong>EPC管理者</strong>（EPC Manager）。EPC管理者是描述与此EPC相关的生产厂商的信息。</li><li><strong>对象分类</strong>（Object Class）。对象分类记录产品精确类型的信息，标识厂家的产品种类。</li><li><strong>序列号</strong>（Serial Number）。序列号唯一标识货品。</li></ul></li></ul></blockquote><p><strong>5、WSN 中的数据融合技术可以分为？WSN 的特点。（6 分）</strong></p><blockquote><ul><li>目前，WSN中的数据融合技术主要采用<strong>集中式数据融合算法</strong>和<strong>分布式数据融合算法</strong>实现。</li><li><ol type="1"><li><strong>硬件资源有限</strong></li><li><strong>电源容量有限</strong></li><li><strong>无中心</strong></li><li><strong>自组织</strong></li><li><strong>多跳路由</strong></li><li><strong>动态拓扑</strong></li><li><strong>结点数量众多、分布密集</strong></li><li><strong>传感器结点出现故障的可能性较大</strong></li></ol></li></ul></blockquote><p><strong>6、5G 通信的关键技术</strong></p><blockquote><ol type="1"><li><strong>高频段传输</strong></li><li><strong>新型多天线传输</strong></li><li><strong>同时同频全双工</strong></li><li><strong>D2D</strong></li><li><strong>密集网络</strong></li><li><strong>新型网络架构</strong></li></ol></blockquote><p><strong>7、什么是超宽带？UWB 与其他的“窄带”或者“宽带”相比的区别。（ 4 分）</strong></p><blockquote><ul><li>超宽带（Ultra-wideband，UWB）是指信号带宽大于500 MHz或者信号带宽与中心频率之比大于25%。</li><li>主要有两方面的区别：一是超宽的带宽，二是超宽带典型的用于无载波应用方式。</li></ul></blockquote><p><strong>8、ZigBee 的频带分布，不同频带的带宽，ZigBee 的特点（10 分）</strong></p><blockquote><ul><li><ol type="1"><li>868 MHz频带，传输速率为20 kbps，适用于欧洲；</li><li>915 MHz频带，传输速率为40 kbps，适用于美国；</li><li>2.4 GHz频带，传输速率为250 kbps，全球通用。</li></ol></li><li>特点：<ul><li><strong>低功耗</strong></li><li><strong>低成本</strong></li><li><strong>低速率</strong></li><li><strong>近距离</strong></li><li><strong>短时延</strong></li><li><strong>网络容量大</strong></li><li><strong>高可靠</strong></li><li><strong>高安全</strong></li><li><strong>免执照频段</strong></li></ul></li></ul></blockquote><p><strong>9、IPv6 的结构及主要优势</strong></p><blockquote><ul><li>IPv6严格按照地址的位数划分地址，而不用子网掩码区分网络号和主机号。在128位的地址中，<strong>前64位为地址前缀</strong>，表示该地址所属的子网络并用于路由；<strong>后64位为接口地址</strong>，用于子网络中标识结点。</li><li><ol type="1"><li><strong>更大的地址空间</strong></li><li><strong>更好的头部格式</strong></li><li><strong>更小的路由表</strong></li><li><strong>安全性高</strong></li><li><strong>服务类型种类多</strong></li><li><strong>协议可扩展</strong></li></ol></li></ul></blockquote><p><strong>10、中间件的分类（6 分）</strong></p><blockquote><ol type="1"><li><strong>数据访问中间件</strong></li><li><strong>远程过程调用中间件</strong></li><li><strong>面向消息中间件</strong></li><li><strong>面向对象中间件</strong></li><li><strong>事务处理中间件</strong></li><li><strong>网络中间件</strong></li><li><strong>终端仿真/屏幕转换中间件</strong></li></ol></blockquote><p><strong>11、云平台的业务模式、云计算的运营模式、云计算的核心技术（8 分）</strong></p><blockquote><ul><li>云平台的业务模式通常有<strong>基础设施即服务</strong>（Infrastructure as a Service，IaaS）、<strong>平台即服务</strong>（Platform as a Service，PaaS）和<strong>软件即服务</strong>（Software as a Service，SaaS）3种形式。</li><li>云计算按运营模式可以分为<strong>公共云</strong>、<strong>私有云</strong>和<strong>混合云</strong>3种。</li><li>云计算系统运用了许多技术，其中以<strong>编程模型</strong>、<strong>数据存储</strong>、<strong>数据管理</strong>、<strong>虚拟化</strong>和<strong>云计算平台管理</strong>等技术最为关键。</li></ul></blockquote><h3 id="第五章">第五章</h3><p><strong>1、RFID-MTS（基于 RFID 的生产追溯管理系统）的主要内容： （5 分）</strong></p><blockquote><p>RFID-MTS的主要内容涉及如下几个方面：</p><ul><li><strong>生产计划与排产</strong></li><li><strong>生产过程控制</strong></li><li><strong>数据采集</strong></li><li><strong>质量管理</strong></li><li><strong>产品物料追溯与招回管理</strong></li><li><strong>资源管理</strong></li><li><strong>流程过程控制</strong></li><li><strong>统计分析</strong></li><li><strong>其他系统接口</strong></li><li><strong>系统管理</strong></li><li><strong>角色分配管理</strong></li></ul></blockquote><h3 id="第七章">第七章</h3><p><strong>1、交通信号实时采集系统中车辆信息采集的两种方式（5 分）</strong></p><blockquote><ol type="1"><li><strong>固定式信息采集</strong></li><li><strong>浮动车式信息采集</strong></li></ol></blockquote><p><strong>2、交通大数据平台特点（3 分）</strong></p><blockquote><ol type="1"><li><strong>海量数据，综合研判</strong></li><li><strong>精确检测，疏导交通</strong></li><li><strong>及时纠正车辆违法</strong></li></ol></blockquote><p><strong>3、公交车辆智能调度系统的组成及实现的功能</strong></p><blockquote><ul><li>公交车辆智能调度系统由<strong>车载子系统</strong>、<strong>网控中心子系统</strong>、<strong>站调中心子系统</strong>等3个主要子系统构成</li><li>实现的功能：<ul><li><strong>公交运营车辆定位</strong></li><li><strong>公交运营车辆实时监控</strong></li><li><strong>实时通信</strong></li><li><strong>自动调整发车间隔和行车顺序</strong></li><li><strong>乘客信息采集</strong></li><li><strong>公共交通中心多种移动交通方式的协调</strong></li><li><strong>车站乘客服务信息</strong></li></ul></li></ul></blockquote><h3 id="第九章">第九章</h3><p><strong>1、智能家居系统的应用领域，智能家居系统结构组成及各组成部分的作用。（8 分）</strong></p><blockquote><ul><li>智能家居系统通常主要涵盖<strong>智能灯光</strong>、<strong>家庭安全</strong>、<strong>家电控制</strong>、<strong>室内环境控制</strong>、<strong>背景音乐</strong>、<strong>家庭影院</strong>、<strong>云健康体系</strong>、<strong>智能厨房</strong>以及<strong>智能园艺</strong>等9大应用领域</li><li>智能家居系统结构主要包括感知层、网络层、应用层等三大层次<ol type="1"><li><strong>感知层</strong>，感知层主要作用是“感知”环境参数及电器设备的工作参数；</li><li><strong>网络层</strong>，网络层是物联网网关，主要负责将感知层的感知设备信息接入互联网中。它一方面接收感知设备发送的信息，并通过网络接口接入互联网，实现远程通信服务。</li><li><strong>应用层</strong>，应用层主要包括各种终端设备，通过浏览器或者手机APP软件为用户提供一个可以与智能家居系统远程交互的人机接口。应用层还可以利用大数据、云计算等技术把大量的数据处理放在家庭外部，构成智能家居的核心。</li></ol></li></ul></blockquote><h2 id="二分析说明题">二、分析说明题</h2><h3 id="第二章-1">第二章</h3><p><strong>1、物联网的硬件平台的组成及各部分的作用。（8 分）</strong></p><blockquote><ul><li><strong>感知结点</strong>，</li><li><strong>末梢网络</strong>，感知结点与末梢网络承担物联网的信息采集和控制任务，构成传感网并实现传感网的功能。</li><li><strong>核心承载网</strong>，主要承担接入网与信息服务系统之间的数据通信任务。</li><li><strong>信息服务系统硬件设施</strong>，主要用于对采集数据的融合/会聚、转换、分析，以及对用户呈现的适配和事件的触发等。</li></ul></blockquote><p><strong>2、物联网体系结构层次分析。（10 分）能够画出物联网体系结构层次图， 了解各部分的功能。</strong></p><blockquote><p><img src="/images/posts/IoT/image-20200628094817491.png" /></p><ul><li><strong>感知层</strong>，完成物联网应用的数据采集和设备控制<ul><li><strong>感知控制层</strong>，主要任务是实现全面感知与自动控制，即通过实现对物理世界各种参数的采集与处理，以其需要进行行为自动控制。</li><li><strong>数据融合层</strong>，任务是将不同感知结点、不同模式、不同媒质、不同时间、不同表示的数据进行相关和综合，以获得对被感知对象的更精确描述。</li></ul></li><li><strong>网络层</strong>，主要功能是利用各种通信网络，实现感知数据和控制信息的双向传递。<ul><li><strong>接入层</strong>，完成应用末梢各结点信息的组网控制和信息汇集，或完成向末梢结点下发信息的转发等功能。</li><li><strong>汇聚层</strong>，<ol type="1"><li>汇集接入层的用户流量，进行数据分组传输的汇聚、转发与交换；</li><li>根据接入层的用户流量进行本地路由、包过滤和排序、流量均衡与整形、地址转换，以及安全控制等；</li><li>根据处理结果把用户流量转发到核心交换层，或者在本地重新路由；</li><li>在虚拟局域网（Virtual Local Area Network，VLAN）之间进行路由以及其他工作组所支持的功能；</li><li>定义组播域和广播域等</li></ol></li><li><strong>核心交换层</strong>，核心交换层主要为物联网提供高速、安全、具有服务质量保障力的通信环境。</li></ul></li><li><strong>应用层</strong>，物联网应用层利用经过分析处理的感知数据，为用户提供不同类型的特定服务。<ul><li><strong>智能处理层</strong>，智能处理层对下层网络层的网络资源进行认知，进而达到自适应传输的目的。对上层的应用接口层提供统一的接口与虚拟化支撑。</li><li><strong>应用接口层</strong>，应用接口层的主要任务就是将智能处理层提供的数据信息，按照业务应用需求，采用软件工程方法，完成服务发现和服务呈现。</li></ul></li></ul></blockquote><h3 id="第三章-1">第三章</h3><p><strong>1、请具体给出 3 种不同的遥感分类方法（8 分）</strong></p><blockquote><ol type="1"><li><strong>按搭载传感器的遥感平台进行分类</strong>（地面遥感、航空遥感、航天遥感）</li><li><strong>按遥感探测的工作方式进行分类</strong>（主动式遥感、被动式遥感）</li><li><strong>按遥感探测的工作波段进行分类</strong>（紫外遥感、可见光遥感、红外遥感、多谱段遥感、微波遥感、多光谱遥感）</li></ol></blockquote><p><strong>2、与条形码相比，RFID 用于物品识别时具有的优势。（ 6 分）</strong></p><blockquote><p>与条形码相比，RFID用于物品识别时具有很多优势：</p><ol type="1"><li>可以识别单个非常具体的物体，而不是像条形码那样只能识别一类物体</li><li>采用无线电，可以透过外部材料读取数据，而条形码必须靠激光扫描在可视范围内读取信息；</li><li>可以同时对多个物体进行识读，而条形码每次只能读取一个；</li><li>储存的信息量非常大。</li></ol></blockquote><p><strong>3、请简要分析和说明一下 ONS 的工作流程（6 分）</strong></p><blockquote><p>ONS基础解析网络主要由映射信息、根ONS（Root ONS）服务器、本地ONS（Local ONS）服务器、ONS本地缓存（ONS Cache）和本地ONS解算器（Local ONS Resolver）这5部分组成。</p><p>首先，标签解读器从RFID标签上读取出EPC序列，并将这个EPC序列发送到本地中间件服务器。其次，中间件服务器（根据标签数据标准）把这些比特流转换成URI形式，再将此URI发送给本地ONS解算器。</p></blockquote><p><strong>4、EPCIS 中的数据分类，不同数据的处理工具，及 EPCIS 的组成部分</strong></p><blockquote><ul><li>EPCIS中的数据分类<ul><li><strong>时标数据</strong></li><li><strong>静态属性数据</strong></li></ul></li><li>关系数据库适用于处理能用一些有限的域或列表述的表格式的时标数据，而XML工具（则更适合访问和处理一些静态属性数据。</li><li>EPCIS组成<ol type="1"><li><strong>Web服务器</strong></li><li><strong>SOAP引擎</strong></li><li><strong>服务处理程序</strong></li><li><strong>数据源适配器</strong></li><li><strong>数据存储单元</strong></li></ol></li></ul></blockquote><p><strong>5、基于 ZigBee 的智能停车管理系统的工作原理。</strong></p><blockquote><p>一般大型停车场可分为入口管理系统、停车泊位和防盗报警系统、出口收费管理系统以及中心管理系统等4个部分。</p><p>当车辆进入停车场感应区时，在距离停车场10～15 m的范围时，由协调器发送信号，激活处于休眠状态的ZigBee识别标签（车载路由结点）识别标签自动连接到协调器，并向协调器发送芯片内部存储的车辆相关信息；协调器将读出的信息通过ZigBee无线网络传输到控制台。</p><p>确认进入后，控制台根据现有车位安排停车位置，从起始位置开始，经ZigBee识别标签与路由结点及协调器通信，确定行驶路径，途径中间位置最后到达限位位置（停车位置）。</p><p>停车结束后，经由同样的方式可以驶出停车场；根据时间计费，然后使ZigBee识别标签休眠，完成整个过程。中心管理系统在线监控停车场进出日期、收费以及停车场内部所有车辆安全状况，处理并记录停车场内部的各种安全事件。</p></blockquote><h3 id="第五章-1">第五章</h3><p><strong>1、煤炭运输物流系统中的车载 GPS/ELS（电子签封）监管系统的工作原理</strong></p><blockquote><p>根据煤炭运输的特点，电子签封分布在篷布与箱体四周，管理者采取电子施/解封的工作环节，在出发点将探头插入即施封，并通过电子钥匙与驾驶室内的主机办理确认，同时信息上传，此为施封过程。车辆运行至指定地点，主机指示灯显示正常，管理者办理确认，将探头拔出，同时将信息上传，此为解封过程，可正常卸车，施/解封之间的所有操作数据均上传。电子钥匙具有数码唯一性，不能仿制代替，确定管理者的合法身份。</p></blockquote><p><strong>2、RFID 图书管理系统包括哪些子系统？条形码图书馆系统与 RFID 图书馆 系统的自助借还书功能比较。（ 8 分）</strong></p><blockquote><ul><li>RFID图书管理系统包括<strong>标签转换系统</strong>、<strong>自助借还系统</strong>、<strong>自助还书系统</strong>、<strong>智能查找系统</strong>、<strong>手持盘点或移动盘点系统</strong>、<strong>安全门检测系统</strong>。</li><li>原有的基于条形码的图书馆流通系统与RFID图书馆系统的比较如下：<ol type="1"><li>识别条形码图书时，需要靠近光源扫描，而RFID标签的有效范围则可从几厘米到几米，且可以通过选择标签确定适宜的扫描范围，在保证准确性的前提下更方便扫描<strong>。</strong></li><li>条形码存储信息的容量有限，而RFID的EPC标签存储信息量很大，可存储书本位置、借阅历史和出版信息等多层次的内容。</li><li>条形码图书借阅时一次只能读取一本，借阅耗时长；而统计数据表明，借还每本RFID图书将会节约近一半时间。</li><li>条形码图书借阅时，每本图书均需进行物理的充/消磁工作；而EPC标签的图书，则无须每次进行这个过程，也无须翻开书本，寻找标签，对准扫描仪。</li></ol></li></ul></blockquote><p><strong>3、物联网供应链管理系统的组成。基于物联网的自动入库管理系统的工作 原理。（8 分）</strong></p><blockquote><ul><li><p>物联网供应链管理系统主要由<strong>管理平台</strong>、<strong>生产企业</strong>、<strong>仓储企业</strong>、<strong>商场企业</strong>和<strong>企业中间件</strong>5大部分组成。</p></li><li><p>基于物联网的自动入库管理系统的基本原理，就是以电子标签作为产品识别和信息采集的技术纽带，通过在仓库出入口处设置读写器对产品进行自动识别，同时通过物联网获取产品的详细信息从而自动生成入库清单，以达到自动化入库管理的目的。</p><p>产品入库时，由设置在仓库入口的入库读写器读取产品EPC码并通过数据采集接口交由入库管理模块；入库管理模块通过远程数据接口访问PML服务器以获取产品的详细信息，并自动生成产品入库清单；然后通过本地数据接口将入库产品信息更新到本地数据中心。</p></li></ul></blockquote><h3 id="第七章-1">第七章</h3><p><strong>1、基于 RFID 的交通流量检测技术</strong></p><blockquote><p>应用RFID技术的车流量检测系统，通过在交叉路口交通信号灯上游安装阅读器，阅读器通过发射天线发送一定频率的射频信号，这样当装有RFID标签的车辆进入天线工作区域时就会产生感应电流，发送自身信息。当接收天线接收到标签发送来的信息时，由阅读器读取信号并对其进行处理，得出车辆通行的频率，再将数据传送给智能控制系统。最后，智能控制系统根据反馈的信息，做出调整交通信号灯转换周期的决策。</p></blockquote><p><strong>2、与物联网相比，车联网独有的特点：</strong></p><blockquote><ol type="1"><li>车联网当中的网络结点以车辆为主，这就决定了车联网的高动态特性。与一般的物联网相比，车联网当中的汽车结点移动速度更快、拓扑变化更频繁、路径的寿命更短。</li><li>与一般的物联网相比，车联网当中的车辆结点间的通信受到的干扰因素更多，包括路边的建筑物、天气状况、道路交通状况、车辆的相对行驶速度等。</li><li>车联网中受到车辆运动情况、道路分布状况等因素的影响，网络的连通性不稳定，这在一定程度上限制了车联网的推广使用。</li><li>车辆中有稳定的电源供电，网络工作时一般没有能量方面的限制；车辆中有较大的承载空间，可以装备较高性能的车载计算机以及一些必要的外部辅助设备。</li><li>车联网对网络的安全性 、可靠性以及稳定性要求更高。车联网的应用过程中，不能够像互联网一样出现一些不安全、不可靠的事件，否则可能会造成巨大的生命财产损失，引起车辆行驶的混乱。</li></ol></blockquote><h3 id="第九章-1">第九章</h3><p><strong>1、共享单车智能电子锁的工作原理（8 分）</strong></p><blockquote><p>用户通过手机APP寻找车辆，云端系统会根据用户当前位置，通过定位模块得到用户附件单车的经纬度，并以地图API（Application Programming Interface，应用程序编程接口）模式在APP上展示给用户。当用户找到车后，扫描单车上的二维码，使得单车信息用户个人信息通过收／发信模块－起被发送到云端系统。</p><p>接着，系统会向锁控模块发送开锁指令。车载中央控制单元变出发电机组件转动，从而带动锁舌驱动构件将锁舌从锁销的档槽内移出，锁销在拉簧的作用下变位至开锁状态。当用户到达目的地之后，将单车停放在在路边白线公共停车区域，手动将锁销向闭锁方向拉动时，使得锁舌在弹簧的推力下进人档槽，卡定锁销。最后，中央控制器会通知云端系统锁车成功，实现远程开闭锁功能，同时时钟模块自动计时收费。</p></blockquote><h2 id="三综合设计题">三、综合设计题</h2><h3 id="第九章-2">第九章</h3><p><strong>1、物联网智能家居安防系统（功能模块组成，WSN 监测子系统，门禁控制 子系统的工作原理和设计思路）</strong></p><blockquote><ul><li>基于物联网的智能家居安防系统主要有：<strong>中央控制系统</strong>、<strong>WSN监测子系统</strong>、<strong>移动物体定位子系统</strong>、<strong>门禁控制子系统</strong>和<strong>客户/服务器</strong>（Browser/Server，B/S）<strong>结构远程监控子系统</strong>等功能模块组成。</li><li><strong>WSN监测子系统</strong>，<ul><li>主要是针对家居环境的动态变化情况进行实时监测和感知，监测室内环境变化。该系统通过ZigBee 网络搭建WSN，由各类传感器组成智能信息采集模块，将采集到的实时数据信息及时存入数据库，使用预前设置的预警阀值实现报警功能，用户可在本地服务器或者远程终端在线查看数据库信息。</li><li>当采集到数据后，经过ZigBee 网络传输到中央控制系统，由中央控制进行数据分析和处理；若发现异常，将通过ZigBee 网络发出相应控制命令，进而进行各种报警或安全防护措施等。而室内各种传感器构成一个WSN，在这个网络中通过相应路由算法和协议实现数据的采集、传输和处理等。</li></ul></li><li><strong>门禁控制子系统</strong>，<ul><li>主要是用户对家居进入权限限制和条件允许，利用现有门禁并在其上通过嵌入式单片机技术实现安全门的进一步智能化，在该安全门上通过红外传感器可以感知人的存在，通过人脸识别可以进行进门的身份认证等，智能安全门将其采集到的数据通过有线网络或无线路由器传输到中央控制系统进行数据分析和处理，发出相应控制命令给智能安全门，并将相关信息传输给远程用户的智能手机。</li><li>系统核心功能就是通过使用摄像头、麦克风、指纹识别器以及可控开关等硬件，实现多元特征的身份识别系统，用户可以选着在身份识别时启用或关闭一个或多个生物特征识别进行身份验证。若识别为合法用户则通过允许进入，在多次验证失败后向用户或者小区保安发出预警信号。</li></ul></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>期末复习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>期末复习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自动控制复习</title>
    <link href="/2020/06/17/2020-06-17-ziokng/"/>
    <url>/2020/06/17/2020-06-17-ziokng/</url>
    
    <content type="html"><![CDATA[<iframe style="min-width: 500px;min-height: 300px" src="https://www.acfun.cn/player/ac15160511" id="ACPlayer-re" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><h1 id="一知识点">一、知识点</h1><ol type="1"><li><p><strong>衡量或评价控制系统优劣的三个方面</strong></p><ul><li>稳定性</li><li>快速性</li><li>准确性</li></ul></li><li><p><strong>自动控制系统的基本控制方式可以分为哪些</strong></p><ul><li>开环控制</li><li>闭环控制</li></ul></li><li><p><strong>线性定常离散控制系统的稳定性，除了与系统的结构参数有关之外，还与什么因素有关</strong></p><ul><li>采样周期</li></ul></li><li><p><strong>根轨迹上的点应该同时满足什么条件</strong></p><ul><li>相角条件</li><li>幅值条件</li></ul></li><li><p><strong>根轨迹起始于什么，终止于什么</strong></p><ul><li><p>起始于开环极点</p></li><li><p>终止于开环零点</p></li></ul></li><li><p><strong>线性连续系统的稳态误差，除了与系统结构参数有关之外，还与什么有关</strong></p><ul><li>输入信号</li></ul></li><li><p><strong>离散系统脉冲传递函数<code>G(z)</code>的定义是什么</strong></p><ul><li><p>是在零初始条件下，<code>C(z)</code>比上<code>R(z)</code></p></li><li><p><span class="math inline">\(G(z)=\frac{C(z)}{P(z)}\)</span></p></li></ul></li><li><p><strong>连续系统稳定的充分必要条件是什么</strong></p><ul><li>所有的闭环特征根具有负实部</li></ul></li><li><p><strong>在频率特性法中，采用什么来衡量系统的相对稳定性</strong></p><ul><li>幅值预料</li><li>相角预料</li></ul></li><li><p><strong>传递函数反映的是什么</strong></p><ul><li>单输入，单输出线性定常系统在零初始条件下的动态特性</li></ul></li><li><p><strong>惯性环节在转折频率处的模值为，相角为</strong></p><ul><li><p><span class="math inline">\(模值为 \frac{\sqrt{2}}{2}\)</span></p></li><li><p><span class="math inline">\(相角为 -45^{\circ}\)</span></p></li></ul></li><li><p><strong>奈奎斯特稳定判据中，Z=P-2N，其中Z代表什么，P代表什么，N代表什么</strong></p><ul><li>Z：闭环特征根在X右半平面的个数</li><li>P：开环极点在X右半平面的个数</li><li>N：开环幅相曲线穿越-1之左实轴的次数</li></ul></li><li><p><strong>稳定的线性定常系统在谐波输入下，输出的稳态分量仍然是与输入同频率的谐波函数，而幅值和相位的变化是频率ω的函数，请问频率特性的表达式怎么写，并说明频率特性、幅频特性和相频特性的定义</strong></p><ul><li><p><span class="math inline">\(幅频特性 A(w)=\vert G(j w)\vert\)</span></p></li><li><p><span class="math inline">\(相频特性 A(w)=\angle G(J w)\)</span></p></li><li><p><span class="math inline">\(频率特性 A(w) e^{j φ^{(\omega)}}=\vert G(j w)\vert e^{jG(j w)}=G(j w)=\left.G(s)\right\vert_{s=j w}\)</span></p></li></ul></li><li><p><strong>简述频率特性的定义，并说明稳定的线性定常系统在谐波输入下输出响应与输入频率的关系</strong></p><ul><li>当线性系统的输入端加上一频率为ω的正弦信号时，系统的稳态输入是与输出同频率的正弦信号，其幅值和相位是频率ω的函数</li><li><span class="math inline">\(或用公式表示 C_{s}(t)=A\vert G(j w)\vert \sin [w t+(G(j w)]\)</span></li></ul></li><li><p><strong>已知某二阶系统的闭环传递函数<span class="math inline">\(\varphi(s)=\frac{4}{s^{2}+2 s+4}\)</span>，求谐振频率<span class="math inline">\(\omega_{r}\)</span>和谐振峰值<span class="math inline">\(M_{r}\)</span></strong></p><ul><li><p>谐振频率 <span class="math inline">\(\omega_{r}=\omega_{n} \sqrt{1-2 \xi^{2}} \qquad (0 \leq \xi \leq 0.707)\)</span></p></li><li><p>谐振峰值 <span class="math inline">\(M_{r}=\frac{1}{2 \xi \sqrt{1-\xi^{2}}}\)</span></p></li></ul></li><li><p><strong>闭环系统<span class="math inline">\(\varphi(s)=\frac{4}{s+2}\)</span>，如果输入信号为阶跃信号，求输出响应的调节时间</strong></p></li></ol><ul><li><p>一阶系统的调节时间为3T</p></li><li><p>T为将分母常数项化为一，S前面的参数，本题为<span class="math inline">\(\frac{1}{2}\)</span></p></li><li><p>调节时间为<span class="math inline">\(\frac{3}{2}\)</span></p></li></ul><ol start="17" type="1"><li><p><strong>闭环系统<span class="math inline">\(\varphi(s)=\frac{4}{s+2}\)</span>，如果输入信号为正弦信号<span class="math inline">\(\sin (2 t)\)</span>，求稳态输出</strong></p><ul><li>套用公式 <span class="math inline">\(C_{s}(t)=A\vert G(j w)\vert \sin [w t+(G(j w)]\)</span></li></ul></li><li><p><strong>已知某系统的开环传递函数<span class="math inline">\(G(s)=\frac{5}{s(s+2)}\)</span>，问它的型别和开环增益</strong></p><ul><li>型别：开环传递函数分母在原点处的极点个数，本题中为1，因此是1型</li><li>开环增益：去掉型别（s），常数项化为1，剩下的S取0，得到开环增益为<span class="math inline">\(\frac{5}{2}\)</span></li></ul></li><li><p><strong>已知某单位反馈系统，误差传递函数为<span class="math inline">\(\varphi_{e r}(s)=\frac{s+1}{s+2}\)</span>，当输入为<span class="math inline">\(\sin (2 t)\)</span>时，求稳态误差</strong></p><ul><li>套用公式 <span class="math inline">\(C_{s}(t)=A\vert G(j w)\vert \sin [w t+(G(j w)]\)</span></li></ul></li></ol><h1 id="二计算题">二、计算题</h1><h2 id="求系统的传递函数cses">1、（2-7）求系统的传递函数C(s)，E(s)。</h2><p><img src="/images/posts/zikong/2020-06-20-103108.png" /></p><blockquote><p><strong>解：</strong></p><ol type="1"><li></li></ol><p>$L_{1}=-G_{1} G_{2} H_{3} $</p><p>$L_{2}=G_{2} H_{2} $</p><p>$R(s) C(s): P_{1}=G_{1} G_{2}, _{1}=1 $</p><p><span class="math inline">\(\frac{C(S)}{R(S)}=\frac{G_{1} G_{2}}{1+G_{1} G_{2} H_{3}-G_{2} H_{2}}\)</span></p><p>$D(s) C(s): P_{1}=G_{2}, <em>{1}=1 ,P</em>{2}=-G_{1} G_{2}H_{1}, _{2}=1 $</p><p><span class="math inline">\(\frac{C(s)}{D(s)}=\frac{G_{2}-G_{1} G_{2} H_{1}}{1+G_{1} G_{2} H_{3}-G_{2} H_{2}}\)</span></p><p>总输出为：</p><p><span class="math inline">\(C(s)=\frac{G_{1} G_{2}}{1+G_{1} G_{2} H_{3}-G_{2} H_{2}} \cdot R(s)+\frac{G_{2}-G_{1} G_{2} H_{1}}{1+G_{1} G_{2} H_{3}-G_{2} H_{2}} \cdot D(s)\)</span></p><p>（2） $R(s) E(s): P_{1}=1, <em>{1}=1-G</em>{2} H_{2} \ = $</p><p>$D(s) E(s): P_{1}=-G_{2} H_{3}, <em>{1}=1, P</em>{2}=-H_{1}, <em>{2}=1-G</em>{2} H_{2} $</p><p><span class="math inline">\(\frac{E(s)}{D(s)}=\frac{-G_{2} H_{3}-H_{1}\left(1-G_{2} H_{2}\right)}{1+G_{1} G_{2} H_{3}-G_{2} H_{2}}\)</span></p><p>总误差为：</p><p><span class="math inline">\(E(s)=\frac{1-G_{2} H_{2}}{1+G_{1} G_{2} H_{3}-G_{2} H_{2}} \cdot R(s)+\frac{-G_{2} H_{3}-H_{1}\left(1-G_{2} H_{2}\right)}{1+G_{1} G_{2} H_{3}-G_{2} H_{2}} \cdot D(s)\)</span></p></blockquote><h2 id="试求图示系统中的-cs">2、（2-8）试求图示系统中的 C(s)</h2><p><img src="/images/posts/zikong/2020-06-20-104743.png" /></p><blockquote><p>解：</p><p><span class="math inline">\(L_{1}=-G_{1} H_{1}\)</span></p><p><span class="math inline">\(L_{2}=-G_{1} G_{2} G_{3} H_{1} H_{2} H_{3}\)</span></p><p><span class="math inline">\(L_{3}=G_{3} H_{3}\)</span></p><p><span class="math inline">\(L_{1} L_{3}=\left(-G_{1} H_{1}\right)\left(G_{3} H_{3}\right)\)</span></p><p><span class="math inline">\(R(s) \rightarrow C(s): P_{1}=G_{1} G_{2} G_{3}, \Delta_{1}=1; P_{2}=G_{14} G_{3}, \Delta_{1}=1-(-G_{1} H_{1})\)</span></p><p><span class="math inline">\(\frac{C(s)}{R(s)}=\frac{G_{1} G_{2} G_{3}+G_{4} G_{3}\left[1-\left(-G_{1} H_{1}\right)\right]}{1-\left(-G_{1} H_{1}\right)-\left(-G_{1} G_{2} G_{3} H_{1} H_{2} H_{3}\right)-\left(G_{3} H_{3}\right)-\left(-G_{1} H_{1}\right)\left(G_{3} H_{3}\right)}\)</span></p><p><span class="math inline">\(Y(s) \rightarrow C(s): P_{1}=G_{2} G_{3}, \Delta_{1}=1-(-G_{1} H_{1})\)</span></p><p><span class="math inline">\(\frac{C(s)}{Y(s)}=\frac{G_{2} G_{3}\left[1-\left(-G_{1} H_{1}\right)\right]}{1-\left(-G_{1} H_{1}\right)-\left(-G_{1} G_{2} G_{3} H_{1} H_{2} H_{3}\right)-\left(G_{3} H_{3}\right)-\left(-G_{1} H_{1}\right)\left(G_{3} H_{3}\right)}\)</span></p><p>总输出为：</p><p><span class="math inline">\({C(s)}=\frac{G_{1} G_{2} G_{3}+G_{4} G_{3}\left(1+G_{1} H_{1}\right)}{1+G_{1}H_{1}+G_{1} G_{2} G_{3} H_{1} H_{2} H_{3}-G_{3} H_{3}+G_{1} G_{3} H_{1} H_{3}} \cdot R(s) \\+ \frac{G_{2} G_{3}\left(1+G_{1} H_{1}\right)}{1+G_{1}H_{1}+G_{1} G_{2} G_{3} H_{1} H_{2} H_{3}-G_{3} H_{3}+G_{1} G_{3} H_{1} H_{3}} \cdot R(s)\)</span></p></blockquote><h2 id="设离散系统如图所示其中-t0.1sk1求">3、（7-9）设离散系统如图所示，其中 T=0.1s，K=1，求</h2><ol type="1"><li>系统的闭环脉冲传递函数；</li><li>判断系统的稳定性；</li><li>系统在r(t)=t作用下的稳态误差<span class="math inline">\(e^{*}(\infty)\)</span>；</li></ol><p><img src="/images/posts/zikong/2020-06-20-105012.png" /></p><blockquote><p>解：</p><p>​ 系统的开环脉冲传递函数为： <span class="math inline">\(G(z)=\left(1-z^{-1}\right) Z\left[\frac{1}{s^{2}(s+1)}\right]=\left(1-z^{-1}\right)\left[\frac{T z}{(z-1)^{2}}-\frac{\left(1-e^{-T}\right) z}{(z-1)\left(z-e^{-T}\right)}\right]\)</span></p><p>​ 将T=0.1带入并整理得<span class="math inline">\(G(z)=\frac{0.005(z+0.9)}{(z-1)(z-0.905)}\)</span>，</p><p><span class="math inline">\(K_{p}=\lim _{x \rightarrow 1}[1+G(z)]=\lim _{x \rightarrow 1}\left[1+\frac{0.005(z+0.9)}{(z-1)(z-0.905)}\right]=\infty\)</span></p><p><span class="math inline">\(K_{v}=\lim _{z \rightarrow 1}(z-1) G(z)=\lim _{z \rightarrow 1}(z-1) \frac{0.005(z+0.9)}{(z-1)(z-0.905)}=0.1\)</span></p><p><span class="math inline">\(e(\infty)=\frac{T}{K_{v}}=1\)</span></p></blockquote><h2 id="设离散系统如图所示采样周期t1sg_hs为零阶保持器而gsfracks1求">4、（7-8）设离散系统如图所示，采样周期T=1s，<span class="math inline">\(G_{h}(s)\)</span>为零阶保持器，而<span class="math inline">\(G(s)=\frac{K}{s+1}\)</span>，求：</h2><p><img src="/images/posts/zikong/2020-06-20-160940.png" /></p><ol type="1"><li>确定使系统稳定的K的范围</li><li>设K=2，求系统在阶跃信号作用下的稳态误差</li></ol><blockquote><p>解：</p><p>思路：<span class="math inline">\(G(z) \Rightarrow \phi(z) \Rightarrow D(z)=0 \quad \Rightarrow\left\vert z_{i}\right\vert &lt;1\)</span></p><p>（1）</p></blockquote><h2 id="控制系统的开环传递函数为gsfrack_rss2s4求">5、（4-4）控制系统的开环传递函数为<span class="math inline">\(G(s)=\frac{K_{r}}{s(s+2)(s+4)}\)</span>，求：</h2><ol type="1"><li>绘制根轨迹图（写出5个步骤）<ol type="1"><li>开环零、极点</li><li>实轴上的根轨迹段</li><li>根轨迹的渐近线、夹角</li><li>分离点</li><li>与虚轴的交点</li></ol></li><li>判断系统临界稳定的<span class="math inline">\(K_{r}\)</span>，并求等幅振荡的频率</li></ol><blockquote><p>解：</p><p>（1）</p><p>开环零点、极点：<span class="math inline">\(P_{1}=0，P_{1}=-2，P_{3}=-4，n=3\)</span></p><p>实轴上的根轨迹段：（0，-2）（-4，-<span class="math inline">\(\infty\)</span>）</p><p>渐近线交点及夹角：</p><p><span class="math inline">\(\sigma_{a}=\frac{0-2-4}{3}=-2\)</span></p><p><span class="math inline">\(\varphi_{a}=\frac{\pm(2 k+1) \pi}{n-m}=\pm \frac{\pi}{3}=\pm 60^{\circ}, 180^{\circ}\)</span></p><p>分离点：</p><p><span class="math inline">\(\frac{1}{d}+\frac{1}{d+2}+\frac{1}{d+4}=0\)</span></p><p><span class="math inline">\(\Rightarrow d_{1}=-0.845, d_{2}=-4.732(\text { 舍 })\)</span></p><p>与虚轴交点：</p><p><span class="math inline">\(s^{3}+6 s^{2}+8 s+K_{r}=0\)</span></p><table><thead><tr class="header"><th style="text-align: center;"><span class="math inline">\(s^{3}\)</span></th><th style="text-align: center;">1</th><th style="text-align: center;">8</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><span class="math inline">\(s^{2}\)</span></td><td style="text-align: center;">6</td><td style="text-align: center;"><span class="math inline">\(K_{r}\)</span></td></tr><tr class="even"><td style="text-align: center;"><span class="math inline">\(s^{1}\)</span></td><td style="text-align: center;"><span class="math inline">\(48-K_{r}\)</span></td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;"><span class="math inline">\(s^{0}\)</span></td><td style="text-align: center;"><span class="math inline">\(K_{r}\)</span></td><td style="text-align: center;"></td></tr></tbody></table><p><span class="math inline">\(\mathbf{4 8}-\boldsymbol{K}_{r}=\mathbf{0}\)</span></p><p><span class="math inline">\(\Rightarrow \boldsymbol{K}_{r}=\mathbf{4 8}, \boldsymbol{s}=\pm \mathbf{j} \mathbf{2} \sqrt{\mathbf{2}}\)</span></p><p>（2）</p><p>系统稳定的<span class="math inline">\(K_{r}&lt;48\)</span>，等幅振荡频率为<span class="math inline">\(\omega=2 \sqrt{2}\)</span></p></blockquote><h2 id="设gsfrack_rs22s4求">6、 设<span class="math inline">\(G(s)=\frac{K_{r}}{(s+2)^{2}(s+4)}\)</span>，求：</h2><ol type="1"><li>绘制根轨迹图</li><li>求系统出现阻尼振荡响应的开环增益的取值范围</li></ol><blockquote><p>解：</p><p>（1）</p><p>开环零点、极点：<span class="math inline">\(P_{1}=P_{2}=-2，P_{3}=-4\)</span></p><p>n=3，m=0</p><p>n-m=3（3条渐近线）</p><p>实轴上的根轨迹段：（-4，-<span class="math inline">\(\infty\)</span>）</p><p>渐近线交点及夹角：</p><p><span class="math inline">\(\sigma_{a}=\frac{(-2)+(-2)+(-4)}{3}=-\frac{8}{3}\)</span></p>$ _{a}=={<span class="math display">\[\begin{array}{l}\frac{\pi}{3}(k=0) \\\pi \quad(k=1) \\\frac{5 \pi}{3}(k=2)\end{array}\]</span><p>. $</p><p>分离点：</p><p><span class="math inline">\(3S^2 + 16S + 20 = 0\)</span></p><p><span class="math inline">\(\Rightarrow d_{1}=-6.333, d_{2}=1(\text { 舍 })\)</span></p><p>此时对应的<span class="math inline">\(K_{r}\)</span>值为 -43.8</p><p>与虚轴的交点：</p><p>特征方程</p><p><span class="math inline">\((s+2)^{2}(s+4)+k_{r}=0\)</span></p><p><span class="math inline">\(\Rightarrow s^{3}+8 s^{2}+20 s+16 +k_{r}=0\)</span></p><table><thead><tr class="header"><th style="text-align: center;"><span class="math inline">\(s^3\)</span></th><th style="text-align: center;">1</th><th style="text-align: center;">20</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><span class="math inline">\(s^2\)</span></td><td style="text-align: center;">8</td><td style="text-align: center;"><span class="math inline">\(16+K_{r}\)</span></td></tr><tr class="even"><td style="text-align: center;"><span class="math inline">\(s^1\)</span></td><td style="text-align: center;"><span class="math inline">\(\frac{8 \times 20 - (16+K_{r})}{8}\)</span></td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;"><span class="math inline">\(s^0\)</span></td><td style="text-align: center;"><span class="math inline">\(16+K_{r}\)</span></td><td style="text-align: center;"></td></tr></tbody></table><p><span class="math inline">\(\frac{8 \times 20 - (16+K_{r})}{8}=0\)</span></p><p><span class="math inline">\(\Rightarrow K_{r}=144\)</span>，带入<span class="math inline">\(8s^2 + (16+K_{r}) = 0\)</span> ，解得：</p><p><span class="math inline">\(s=\pm j 2 \sqrt{5}\)</span></p><p>（2）</p></blockquote><h2 id="单位反馈系统的开环传递函数为gsfrack-s3ss-1试用奈奎斯特判据确定使闭环系统稳定的k值范围">7、（5-12）单位反馈系统的开环传递函数为<span class="math inline">\(G(s)=\frac{K (s+3)}{s(s-1)}\)</span>，试用奈奎斯特判据确定使闭环系统稳定的K值范围</h2><blockquote><p>解：</p><p>1、绘制图像曲线</p><p>起点: <span class="math inline">\(G(s) \approx \frac{3 k}{-s}, \quad \infty &lt; -270^{\circ}\)</span> ; 终点:$ G(s) , 0 &lt; -90^{}$ ;</p><p>交点：分子分母同乘以(s+1),</p><p><span class="math inline">\(G(s)=\frac{k\left(s^{2}+4 s+3\right)}{s\left(s^{2}-1\right)}\)</span></p><p><span class="math inline">\(G(j \omega)=\frac{k\left[\left(3-\omega^{2}\right)+j 4 \omega\right]}{-j \omega\left(\omega^{2}+1\right)}\)</span></p><p><span class="math inline">\(G(j \sqrt{3})=-k\)</span></p><p><img src="/images/posts/zikong/2020-06-20%20125139.png" /></p><p>2、求K值范围</p><p>令 z=p-2N=1-2N=0，N 必须为 0.5，由图可见 k&gt;1 即可</p></blockquote><h2 id="某最小相位系统的开环对数幅频特性如图所示要求">8、（5-14）某最小相位系统的开环对数幅频特性如图所示，要求：</h2><p><img src="/images/posts/zikong/2020-06-20-130244.png" /></p><ol type="1"><li>写出系统的开环传递函数</li><li>求截止频率及相位裕量<span class="math inline">\(\gamma\)</span></li></ol><blockquote><p>解：</p><p>（1）由图可得</p><p><span class="math inline">\(G(s)=\frac{10}{s(10 s+1)(0.05 s+1)}\)</span></p><p>（2）由近似方法求截止频率：</p><p><span class="math inline">\(G(s) \approx \frac{1}{s^{2}},\)</span> 令 <span class="math inline">\(\left\vert\frac{1}{s^{2}}\right\vert=1\)</span> 得 <span class="math inline">\(\omega_{c}=1\)</span></p><p><span class="math inline">\(\gamma=180^{\circ}-90^{\circ}-\operatorname{tg}^{-1} 10-\operatorname{tg}^{-1} 0.05=2.848^{\circ}\)</span></p></blockquote><h2 id="二阶系统的结构框图如下求">9、二阶系统的结构框图如下，求</h2><p><img src="/images/posts/zikong/IMG_20200621_0001.jpg" /></p><ol type="1"><li>输入信号 r(t) = 1(t) 时，若超调量为20%，调节时间为1.8，求参数<span class="math inline">\(K_{1}，K_{2}\)</span></li><li>输入信号 r(t) = 2+t 时，求系统的稳态误差</li></ol><blockquote><p>解：</p><p>闭环传递函数：</p></blockquote><h2 id="系统结构如图所示求">10、系统结构如图所示，求：</h2><ol type="1"><li>用奈氏判据判断系统稳态</li><li>当 K &lt; 4 时，求超调量及调节时间</li><li>当输入信号为 2(1+t）时，若稳态误差为0.25，求K</li></ol><blockquote><p>解：</p><p><span class="math inline">\(G(s)=\frac{\frac{k_{1}}{s^{2}}}{1+\frac{k_{1}}{s^{2}} \cdot k_{2}s}=\frac{k_{1}}{s^{2}+k_{1} k_{2} s}\)</span></p><p><span class="math inline">\(\phi(s)=\frac{k_{1}}{s^{2}+k_{1} k_{2} s+k_{1}}\)</span></p><p><span class="math inline">\(\alpha \%=e^{-\frac{\pi \xi}{\sqrt{1-\xi ^ 2}}} \times 100 \%=20 \%\)</span></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>期末复习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>期末复习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>魔法纪录游戏音频解包随笔</title>
    <link href="/2020/06/14/2020-06-14-hca/"/>
    <url>/2020/06/14/2020-06-14-hca/</url>
    
    <content type="html"><![CDATA[<h1 id="所用工具">所用工具</h1><p><a href="https://github.com/Nyagamon/HCADecoder">HCADecoder</a></p><h1 id="步骤">步骤</h1><p>推特上有大佬公开了密钥：0000000001395C51</p><p>因此首先运行以下命令进行解密：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">.\hca.exe -c -a 01395C51 -b 00000000 HCA文件<br></code></pre></td></tr></table></figure><p>之后再转换即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">.\hca.exe HCA文件<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>游戏</category>
      
      <category>魔法纪录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>游戏</tag>
      
      <tag>魔法纪录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机床数控复习</title>
    <link href="/2020/06/13/2020-06-13-Gcode/"/>
    <url>/2020/06/13/2020-06-13-Gcode/</url>
    
    <content type="html"><![CDATA[<h1 id="一g代码分步解析">一、G代码分步解析</h1><h2 id="车床代码">车床代码</h2><p>如图所示工件，需要进行精加工，其中Φ85mm外圆不加工，毛胚为Φ85mmX340mm棒材，材料为45钢：</p><p><img src="/images/posts/Gcode/IMG_20200613_180836.jpg" /></p><h3 id="加工步骤">加工步骤</h3><ol type="1"><li>倒角</li><li>车螺纹外圆</li><li>车圆锥</li><li>车Φ62mm外圆</li><li>倒角</li><li>车Φ80mm外圆</li><li>车R70mm圆弧</li><li>车Φ80mm外圆</li><li>切槽</li><li>车螺纹</li></ol><h3 id="代码">代码</h3><table><thead><tr class="header"><th style="text-align: left;">代码</th><th style="text-align: center;">注释</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">O0003;</td><td style="text-align: center;">程序代号</td></tr><tr class="even"><td style="text-align: left;">N10 G50 X200.0 Z350.0;</td><td style="text-align: center;">设定工件坐标系</td></tr><tr class="odd"><td style="text-align: left;">N20 G30 U0 W0 T0101;</td><td style="text-align: center;">换1号刀</td></tr><tr class="even"><td style="text-align: left;">N20 S630 M03;</td><td style="text-align: center;">主轴转速630 顺时针转动</td></tr><tr class="odd"><td style="text-align: left;">N30 G00 X41.8 Z292.0 M08;</td><td style="text-align: center;">快速进给</td></tr><tr class="even"><td style="text-align: left;">N30 G01 X47.8 Z289.0 F0.15;</td><td style="text-align: center;">车倒角</td></tr><tr class="odd"><td style="text-align: left;">N50 Z230.0;</td><td style="text-align: center;">车螺纹外圆</td></tr><tr class="even"><td style="text-align: left;">N60 X50.0;</td><td style="text-align: center;">车台阶</td></tr><tr class="odd"><td style="text-align: left;">N70 X62.0 W-60.0;</td><td style="text-align: center;">车圆锥（W为Z方向增量坐标表示）</td></tr><tr class="even"><td style="text-align: left;">N80 Z155.0;</td><td style="text-align: center;">车Φ62mm外圆</td></tr><tr class="odd"><td style="text-align: left;">N90 X78.0;</td><td style="text-align: center;">车台阶</td></tr><tr class="even"><td style="text-align: left;">N100 X80.0 W-1.0;</td><td style="text-align: center;">车倒角</td></tr><tr class="odd"><td style="text-align: left;">N110 W-19.0;</td><td style="text-align: center;">车Φ80mm外圆</td></tr><tr class="even"><td style="text-align: left;">N120 G02 W-60.0 R70.0;</td><td style="text-align: center;">车R70mm圆弧（顺时针方向插补）</td></tr><tr class="odd"><td style="text-align: left;">N130 G01 Z65.0;</td><td style="text-align: center;">车Φ80mm外圆</td></tr><tr class="even"><td style="text-align: left;">N140 X90.0;</td><td style="text-align: center;">车台阶</td></tr><tr class="odd"><td style="text-align: left;">N150 G00 X200.0 Z350.0 T0101 M09;</td><td style="text-align: center;">退刀到坐标原点</td></tr><tr class="even"><td style="text-align: left;">N160 G30 U0 W0 T0202;</td><td style="text-align: center;">换2号刀</td></tr><tr class="odd"><td style="text-align: left;">N170 S315 M03;</td><td style="text-align: center;">主轴转速315 顺时针转动</td></tr><tr class="even"><td style="text-align: left;">N180 G00 X51.0 Z230 M08;</td><td style="text-align: center;">快速进给</td></tr><tr class="odd"><td style="text-align: left;">N190 G01 X45.0 F0.16;</td><td style="text-align: center;">切槽</td></tr><tr class="even"><td style="text-align: left;">N200 G04 X5.0;</td><td style="text-align: center;">暂停加工5S</td></tr><tr class="odd"><td style="text-align: left;">N210 G00 X51.0;</td><td style="text-align: center;">退刀</td></tr><tr class="even"><td style="text-align: left;">N220 X200.0 Z350.0 T0202 M09;</td><td style="text-align: center;">换3号刀</td></tr><tr class="odd"><td style="text-align: left;">N230 G30 U0 W0 T0303;</td><td style="text-align: center;">换3号刀</td></tr><tr class="even"><td style="text-align: left;">N240 S200 M03;</td><td style="text-align: center;">主轴转速200 顺时针转动</td></tr><tr class="odd"><td style="text-align: left;">N250 G00 X62.0 Z296.0 M08;</td><td style="text-align: center;">快速进给</td></tr><tr class="even"><td style="text-align: left;">N260 G92 X47.54 Z231.5 F1.5;</td><td style="text-align: center;">车螺纹（每次进给一定值）</td></tr><tr class="odd"><td style="text-align: left;">N270 X46.94;</td><td style="text-align: center;">车螺纹</td></tr><tr class="even"><td style="text-align: left;">N280 X46.54;</td><td style="text-align: center;">车螺纹</td></tr><tr class="odd"><td style="text-align: left;">N290 X46.38;</td><td style="text-align: center;">车螺纹（以小径的为终点）</td></tr><tr class="even"><td style="text-align: left;">N300 G00 X200.0 Z350.0 T0303 M09;</td><td style="text-align: center;">退刀回坐标原点</td></tr><tr class="odd"><td style="text-align: left;">N310 M05;</td><td style="text-align: center;">主轴停止</td></tr><tr class="even"><td style="text-align: left;">N320 M30;</td><td style="text-align: center;">程序结束</td></tr></tbody></table><blockquote><p>已知螺纹大径D，螺距P，则小径 d=D-1.0825*P</p></blockquote><h2 id="铣床代码">铣床代码</h2><p>加工如图所示的槽，毛坯为70mm X 70mm X 16mm的板材，工件材料为45钢，六面已经过粗加工，要求精加工：</p><p><img src="/images/posts/Gcode/IMG_20200613_181927.jpg" /></p><blockquote><ul><li>工件坐标系定在工件表面的中心点上；</li><li>选用Φ8mm键槽铣刀</li></ul></blockquote><h3 id="圆弧插补">圆弧插补</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-name">G02</span>/<span class="hljs-number">03</span> X_ Y_ <span class="hljs-comment">(R_ /I_ J_ )</span> F_<br></code></pre></td></tr></table></figure><ul><li>X:终点X坐标</li><li>Y:终点Y坐标</li><li>R:半径</li><li>I , J: I为圆弧起点与圆弧圆心的X轴方向分量，J为圆弧起点与圆弧圆心的Y轴方向分量</li><li>F:切削进给率</li></ul><h3 id="代码-1">代码</h3><table><thead><tr class="header"><th>代码</th><th style="text-align: center;">注释</th></tr></thead><tbody><tr class="odd"><td>O1000</td><td style="text-align: center;">程序代号</td></tr><tr class="even"><td>N10 G92 X35.0 Y35.0 Z100.0;</td><td style="text-align: center;">工件坐标系设定</td></tr><tr class="odd"><td>N15 S500 M03;</td><td style="text-align: center;">主轴转速500 顺时针转动</td></tr><tr class="even"><td>N17 G90 G00 X14.0 Y0.0 Z1.0 M08;</td><td style="text-align: center;">快速进给至切入点（图中1处）</td></tr><tr class="odd"><td>N20 G01 Z-3.98 F100;</td><td style="text-align: center;">下刀到槽的深度</td></tr><tr class="even"><td>N30 G03 X14.0 Y0 I-14.0 J0;</td><td style="text-align: center;">走圆轨迹</td></tr><tr class="odd"><td>N40 G01 X20.0;</td><td style="text-align: center;">向外走刀（至图中2处）</td></tr><tr class="even"><td>N50 G03 X20.0 Y0 I-20.0 J0;</td><td style="text-align: center;">走圆轨迹</td></tr><tr class="odd"><td>N60 G41 G01 X25.0 Y0 D01;</td><td style="text-align: center;">走刀至外轮廓切入点</td></tr><tr class="even"><td>N65 G01 Y15.0;</td><td style="text-align: center;">直线进给</td></tr><tr class="odd"><td>N70 G03 X15.0 Y25.0 I-10.0 J0;</td><td style="text-align: center;">右上角的圆角</td></tr><tr class="even"><td>N80 G01 X-15.0;</td><td style="text-align: center;">直线进给</td></tr><tr class="odd"><td>N90 G03 X-25.0 Y15.0 I0 J-10.0;</td><td style="text-align: center;">左上角的圆角</td></tr><tr class="even"><td>N100 G01 Y-15.0;</td><td style="text-align: center;">直线进给</td></tr><tr class="odd"><td>N110 G03 X-15.0 Y-25.0 I10.0 J0;</td><td style="text-align: center;">左下角的圆角</td></tr><tr class="even"><td>N120 G01 X15.0;</td><td style="text-align: center;">直线进给</td></tr><tr class="odd"><td>N130 G03 X25.0 Y-15.0 I0 J 10.0;</td><td style="text-align: center;">右下角的圆角</td></tr><tr class="even"><td>N140 G01 Y0;</td><td style="text-align: center;">直线进给</td></tr><tr class="odd"><td>N150 G00 Z100.0 M05;</td><td style="text-align: center;">抬刀</td></tr><tr class="even"><td>N160 G40 X35.0 Y35.0 M09;</td><td style="text-align: center;">取消补偿</td></tr><tr class="odd"><td>N160 M30;</td><td style="text-align: center;">程序结束</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>期末复习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>期末复习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OSU皮肤</title>
    <link href="/2019/12/18/2019-12-18-shigeskin/"/>
    <url>/2019/12/18/2019-12-18-shigeskin/</url>
    
    <content type="html"><![CDATA[<h1 id="老爷的皮肤">老爷的皮肤</h1><script src="https://gist.github.com/Fobxx/107e2bad2bf7312cd49431c696aac912.js"></script>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>游戏</category>
      
      <category>OSU!</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>游戏</tag>
      
      <tag>OSU!</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>东方全整数作记录</title>
    <link href="/2019/12/18/2020-02-21-touhou/"/>
    <url>/2019/12/18/2020-02-21-touhou/</url>
    
    <content type="html"><![CDATA[<h1 id="总记录">总记录</h1><h2 id="th06-东方红魔乡">TH06 东方红魔乡</h2><ul class="task-list"><li><input type="checkbox" disabled="" checked="" />easy</li><li><input type="checkbox" disabled="" />normal</li><li><input type="checkbox" disabled="" />hard</li><li><input type="checkbox" disabled="" />lunatic</li></ul><h2 id="th07-东方妖妖梦">TH07 东方妖妖梦</h2><ul class="task-list"><li><input type="checkbox" disabled="" checked="" />easy</li><li><input type="checkbox" disabled="" checked="" />normal</li><li><input type="checkbox" disabled="" />hard</li><li><input type="checkbox" disabled="" />lunatic</li></ul><h2 id="th08-东方永夜抄">TH08 东方永夜抄</h2><ul class="task-list"><li><input type="checkbox" disabled="" checked="" />easy</li><li><input type="checkbox" disabled="" checked="" />normal</li><li><input type="checkbox" disabled="" />hard</li><li><input type="checkbox" disabled="" />lunatic</li></ul><h2 id="th09-東方花映塚">TH09 東方花映塚</h2><ul class="task-list"><li><input type="checkbox" disabled="" checked="" />easy</li><li><input type="checkbox" disabled="" />normal</li><li><input type="checkbox" disabled="" />hard</li><li><input type="checkbox" disabled="" />lunatic</li></ul><h2 id="th10-东方风神录">TH10 东方风神录</h2><ul class="task-list"><li><input type="checkbox" disabled="" checked="" />easy</li><li><input type="checkbox" disabled="" checked="" />normal</li><li><input type="checkbox" disabled="" />hard</li><li><input type="checkbox" disabled="" />lunatic</li></ul><h2 id="th11-东方地灵殿">TH11 东方地灵殿</h2><ul class="task-list"><li><input type="checkbox" disabled="" checked="" />easy</li><li><input type="checkbox" disabled="" />normal</li><li><input type="checkbox" disabled="" />hard</li><li><input type="checkbox" disabled="" />lunatic</li></ul><h2 id="th12-东方星莲船">TH12 东方星莲船</h2><ul class="task-list"><li><input type="checkbox" disabled="" checked="" />easy</li><li><input type="checkbox" disabled="" />normal</li><li><input type="checkbox" disabled="" />hard</li><li><input type="checkbox" disabled="" />lunatic</li></ul><h2 id="th13-东方神灵庙">TH13 东方神灵庙</h2><ul class="task-list"><li><input type="checkbox" disabled="" />easy</li><li><input type="checkbox" disabled="" />normal</li><li><input type="checkbox" disabled="" />hard</li><li><input type="checkbox" disabled="" />lunatic</li></ul><h2 id="th14-东方辉针城">TH14 东方辉针城</h2><ul class="task-list"><li><input type="checkbox" disabled="" />easy</li><li><input type="checkbox" disabled="" />normal</li><li><input type="checkbox" disabled="" />hard</li><li><input type="checkbox" disabled="" />lunatic</li></ul><h2 id="th15-东方绀珠传">TH15 东方绀珠传</h2><ul class="task-list"><li><input type="checkbox" disabled="" checked="" />easy</li><li><input type="checkbox" disabled="" />normal</li><li><input type="checkbox" disabled="" />hard</li><li><input type="checkbox" disabled="" />lunatic</li></ul><h2 id="th16-东方天空璋">TH16 东方天空璋</h2><ul class="task-list"><li><input type="checkbox" disabled="" checked="" />easy</li><li><input type="checkbox" disabled="" checked="" />normal</li><li><input type="checkbox" disabled="" />hard</li><li><input type="checkbox" disabled="" />lunatic</li></ul><h2 id="th17-东方鬼形兽">TH17 东方鬼形兽</h2><ul class="task-list"><li><input type="checkbox" disabled="" checked="" />easy</li><li><input type="checkbox" disabled="" />normal</li><li><input type="checkbox" disabled="" />hard</li><li><input type="checkbox" disabled="" />lunatic</li></ul>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>游戏</category>
      
      <category>东方project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>游戏</tag>
      
      <tag>东方project</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>噬血代码几种配装思路</title>
    <link href="/2019/11/29/2019-11-29-codevein/"/>
    <url>/2019/11/29/2019-11-29-codevein/</url>
    
    <content type="html"><![CDATA[<h1 id="噬血代码配装">噬血代码配装</h1><h2 id="一麻痹斧枪">一、麻痹斧枪</h2><p><img src="/images/posts/codevein/678960_20191129174819_1.png" /></p><h4 id="血码与装备">1、血码与装备</h4><p>血码带女王，武器白狼斧枪麻痹改，另一把武器随便，我这里选了刺刀枪方便赶路；</p><p>吸血牙装纯白典雅，这里重改没必要，我主要是懒得改回去；</p><h4 id="技能">2、技能</h4><ul><li><strong>主动技能</strong><ul><li>（buff类），必须全有<ul><li>殒命之旅</li><li>荣耀之桥</li><li>权威，增加炼血的发动速度</li><li>麻痹刻印</li><li>献祭之血</li></ul></li><li>（输出类），选择三个顺手的带上即可<ul><li>两断深渊</li><li>猩红螺旋</li><li>幽魂进击</li><li>战车连击</li></ul></li></ul></li><li><strong>被动技能</strong><ul><li>专精斧枪</li><li>积累异常状态</li><li>速度特杀（开启殒命之旅后可触发）</li><li>提升集中力，意志力（触发权威和荣耀之桥）</li></ul></li></ul><h4 id="备注">3、备注</h4><p><strong>道具带僵直匣</strong>，更快触发麻痹</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>游戏</category>
      
      <category>噬血代码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>游戏</tag>
      
      <tag>噬血代码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Minecraft Forge 1.13.2修改后的部分函数名</title>
    <link href="/2019/03/31/2019-03-31-forgeupdate/"/>
    <url>/2019/03/31/2019-03-31-forgeupdate/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>跟大中一起修mod过程中记录一下这样子。</p><p>缓更。</p><h1 id="开始记录">开始记录</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Minecraft.getMinecraft() 改为 Minecraft.getInstance()<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">GlStateManager.color(<span class="hljs-type">float</span> colorRed, <span class="hljs-type">float</span> colorGreen, <span class="hljs-type">float</span> colorBlue, <span class="hljs-type">float</span> colorAlpha)<br>改为<br>GlStateManager.color4f(<span class="hljs-type">float</span> colorRed, <span class="hljs-type">float</span> colorGreen, <span class="hljs-type">float</span> colorBlue, <span class="hljs-type">float</span> colorAlpha)<br></code></pre></td></tr></table></figure><p>本来的color方法的两个构造器（即仅传入RGB三个参数和传入RGBa四个参数）现在被分别改为了color3f和color4f。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">GlStateManager.disableDepth() 改为 GlStateManager.disableDepthTest()<br></code></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">GlStateManager<span class="hljs-selector-class">.enableDepth</span>() 改为 GlStateManager<span class="hljs-selector-class">.enableDepthTest</span>()<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">GlStateManager.enableAlphaTest() 改为 GlStateManager.enableAlphaTest()<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">GlStateManager.translate(<span class="hljs-type">float</span> x, <span class="hljs-type">float</span> y, <span class="hljs-type">float</span> z)<br>改为<br>GlStateManager.translatef(<span class="hljs-type">float</span> x, <span class="hljs-type">float</span> y, <span class="hljs-type">float</span> z)<br></code></pre></td></tr></table></figure><p>本来的translate方法的两个构造器（即传入三个float参数和传入三个double参数）现在分别改为了translatef和translated。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">ItemStack<span class="hljs-selector-class">.getTagCompound</span>() 改为 ItemStack<span class="hljs-selector-class">.getTag</span>()<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ItemStack<span class="hljs-selector-class">.getRarity</span>()<span class="hljs-selector-class">.rarityColor</span> 改为 ItemStack<span class="hljs-selector-class">.getRarity</span>().<span class="hljs-attribute">color</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">NBTTagCompound.getCompoundTag(String key) 改为 NBTTagCompound.getCompound(String key)<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">NBTTagCompound.hasKey(String key, <span class="hljs-type">int</span> type) 改为 NBTTagCompound.contains(String key, <span class="hljs-type">int</span> type)<br></code></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">NBTTagCompound<span class="hljs-selector-class">.getKeySet</span>() 改为 NBTTagCompound<span class="hljs-selector-class">.keySet</span>()<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">GuiButton<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawButton</span><span class="hljs-params">(Minecraft mc, <span class="hljs-type">int</span> mouseX, <span class="hljs-type">int</span> mouseY, <span class="hljs-type">float</span> partialTicks)</span> &#123;<br>&#125;<br>改为<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">render</span><span class="hljs-params">(<span class="hljs-type">int</span> mouseX, <span class="hljs-type">int</span> mouseY, <span class="hljs-type">float</span> partialTicks)</span> &#123;<br><span class="hljs-type">Minecraft</span> <span class="hljs-variable">mc</span> <span class="hljs-operator">=</span> Minecraft.getInstance();<span class="hljs-comment">//mc对象在内部声明</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">NBTBase</span> 改为 INBTBase<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">net.minecraft.client.resources.IResource 移至 net.minecraft.resources.IResource<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">net.minecraft.client.resources.IResourceManager 移至 net.minecraft.resources.IResourceManager<br></code></pre></td></tr></table></figure><h1 id="存疑改动">存疑改动</h1><p>getItemDamage</p><blockquote><p>原ItemStack.getItemDamage()方法删除，但原来的此方法返回的是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getItemDamage</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> getItem().getDamage(<span class="hljs-built_in">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>考虑直接换为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">ItemStack stackA<br>stackA.getItemDamage() 改为<br>stackA.getItem().getDamage(stackA)<br></code></pre></td></tr></table></figure></blockquote><p>获取键盘输入：</p><blockquote><p>弃用了 org.lwjgl.input.Keyboard</p><p>用 net.minecraft.client.util.InputMappings 进行了替换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">KeyLoader.key_F4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KeyBinding</span>(<span class="hljs-string">&quot;FastTrading ON-OFF&quot;</span>, Keyboard.KEY_F4, <span class="hljs-string">&quot;FastTrading&quot;</span>);<br>改为<br>KeyLoader.key_F4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KeyBinding</span>(<span class="hljs-string">&quot;FastTrading ON-OFF&quot;</span>, InputMappings.getInputByName(<span class="hljs-string">&quot;key.keyboard.f4&quot;</span>).getKeyCode(), <span class="hljs-string">&quot;FastTrading&quot;</span>);<br></code></pre></td></tr></table></figure></blockquote><p>net.minecraft.client.renderer.texture.TextureUtil.readBufferedImage:</p><blockquote><p>似乎是删除了这个方法，但是此方法原来的返回是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BufferedImage <span class="hljs-title function_">readBufferedImage</span><span class="hljs-params">(InputStream imageStream)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>        BufferedImage bufferedimage;<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            bufferedimage = ImageIO.read(imageStream);<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            IOUtils.closeQuietly(imageStream);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> bufferedimage;<br>    &#125;<br></code></pre></td></tr></table></figure><p>因此考虑直接依此进行修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BufferedImage</span> <span class="hljs-variable">bufferedimage</span> <span class="hljs-operator">=</span> readBufferedImage(iresource.getInputStream());<br>改为：<br><span class="hljs-type">BufferedImage</span> <span class="hljs-variable">bufferedimage</span> <span class="hljs-operator">=</span> ImageIO.read(iresource.getInputStream());<br></code></pre></td></tr></table></figure></blockquote><p>播放声音：</p><blockquote><p>playSound(ISound sound) 方法改为了 play(ISound sound)：</p><p>但是在改变名称之后传参类型报错了，所以做了个强制转型如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mc.getSoundHandler().play((ISound) FakeSubtitleSound.getRecord(SoundEvents.ENTITY_ITEM_PICKUP, <span class="hljs-number">0.5f</span>, <span class="hljs-number">0.05F</span>, <span class="hljs-string">&quot;fasttrading.subtitles.buttonswitching&quot;</span>));<br></code></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>游戏</category>
      
      <category>Minecraft</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>游戏</tag>
      
      <tag>Minecraft</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MHW日文Wiki链接</title>
    <link href="/2019/03/01/2019-03-01-mhwlist/"/>
    <url>/2019/03/01/2019-03-01-mhwlist/</url>
    
    <content type="html"><![CDATA[<h1 id="怪物列表">怪物列表</h1><p>蛮鄂（<a href="http://mhwg.org/data/3200.html">アンジャナフ</a>） 丝瓜（<a href="http://mhwg.org/data/4254.html">イビルジョー</a>）</p><p>尸套（<a href="http://mhwg.org/data/4256.html">ヴァルハザク</a>） 烤鱼（<a href="http://mhwg.org/data/4245.html">ヴォルガノス</a>）</p><p>爆锤（<a href="http://mhwg.org/data/4244.html">ウラガンキン</a>） 鹿首精（<a href="http://mhwg.org/data/4364.html">エンシェント・レーシェン</a>）</p><p>惨爪（<a href="http://mhwg.org/data/4217.html">オドガロン</a>） 麒麟（<a href="http://mhwg.org/data/4257.html">キリン</a>）</p><p>钢龙（<a href="http://mhwg.org/data/4253.html">クシャルダオラ</a>） 骚鸟（<a href="http://mhwg.org/data/3805.html">クルルヤック</a>）</p><p>泥鱼龙（<a href="http://mhwg.org/data/3803.html">ジュラトドス</a>） 冥灯龙（<a href="http://mhwg.org/data/4324.html">ゼノ・ジーヴァ</a>）</p><p>熔山龙（<a href="http://mhwg.org/data/3806.html">ゾラ・マグダラオス</a>） 记者（<a href="http://mhwg.org/data/4203.html">ツィツィヤック</a>）</p><p>角龙（<a href="http://mhwg.org/data/3800.html">ディアブロス</a>） 黑角（<a href="http://mhwg.org/data/4318.html">ディアブロス亜種</a>）</p><p>炎喵（<a href="http://mhwg.org/data/4252.html">テオ・テスカトル</a>） 大凶鄂龙（<a href="http://mhwg.org/data/4215.html">ドスギルオス</a>）</p><p>中分哥（<a href="http://mhwg.org/data/3203.html">ドスジャグラス</a>） 肥宅（<a href="http://mhwg.org/data/4255.html">ドドガマル</a>）</p><p>飞雷龙（<a href="http://mhwg.org/data/4201.html">トビカガチ</a>） 娜娜子（<a href="http://mhwg.org/data/4321.html">ナナ・テスカトリ</a>）</p><p>咩咩子（<a href="http://mhwg.org/data/4200.html">ネルギガンテ</a>） 浮空龙（<a href="http://mhwg.org/data/4202.html">パオウルムー</a>）</p><p>阿爆（<a href="http://mhwg.org/data/4325.html">バゼルギウス</a>） 毒妖鸟（<a href="http://mhwg.org/data/3804.html">プケプケ</a>）</p><p>贝爷（<a href="http://mhwg.org/data/4361.html">ベヒーモス</a>） 土砂龙（<a href="http://mhwg.org/data/3801.html">ボルボロス</a>）</p><p>渣渣辉（<a href="http://mhwg.org/data/4358.html">マム・タロト</a>） 骨锤龙（<a href="http://mhwg.org/data/4216.html">ラドバルキン</a>）</p><p>雌火龙（<a href="http://mhwg.org/data/4205.html">リオレイア</a>）樱火龙（<a href="http://mhwg.org/data/4319.html">リオレイア亜種</a>）</p><p>雄火龙（<a href="http://mhwg.org/data/3204.html">リオレウス</a>） 苍火龙（<a href="http://mhwg.org/data/4320.html">リオレウス亜種</a>）</p><p>风飘龙（<a href="http://mhwg.org/data/4204.html">レイギエナ</a>） 古代鹿首精（<a href="http://mhwg.org/data/4363.html">レーシェン</a>）</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>游戏</category>
      
      <category>MHW</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>游戏</tag>
      
      <tag>MHW</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何搭建自己的游戏加速器</title>
    <link href="/2019/01/05/2019-01-05-none02/"/>
    <url>/2019/01/05/2019-01-05-none02/</url>
    
    <content type="html"><![CDATA[<p><del>我们表面上说是加速器，实际上就是魔改了个梯子</del></p><p>首先，服务器系统我选择了CentOS 7，关于服务器的购买等等，请移步上一篇：<a href="https://aye10031.github.io/2018/05/none/">无题</a>的网站部分。</p><blockquote><p>本文依据<a href="https://github.com/shadowsocks/shadowsocks-libev/blob/master/README.md">官方文档</a>，有能力可以直接根据官方文档自行操作</p></blockquote><p>加速器的话我们选择SSTAP，实际上就是要求SS服务端开启UDP转发，因此我们要安装shadowsocks-libev，与前一篇的直接安装不同，这里我们需要从源码编译，步骤如下：</p><p>安装依赖库</p><p>因为我们服务器是CentOS 7 的系统，因此执行以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install gcc automake autoconf libtool make m2crypto autoconf libtool curl curl-devel zlib-devel openssl-devel perl perl-devel cpio expat-devel gettext-devel pcre-devel asciidoc xmlto c-ares-devel libev-devel libsodium-devel mbedtls-devel<br></code></pre></td></tr></table></figure><h2 id="下载源码">下载源码</h2><p>首先，服务器安装git：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install git<br></code></pre></td></tr></table></figure><p>接下来从仓库下载最新版本的源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/shadowsocks/shadowsocks-libev.git<br></code></pre></td></tr></table></figure><p>进入该目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> shadowsocks-libev<br></code></pre></td></tr></table></figure><p>切换子模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git submodule update --init --recursive<br></code></pre></td></tr></table></figure><h2 id="开始编译">开始编译</h2><p>编译分为几部分，我这里为了考虑时效性与官方文档略有差别，望周知。</p><h3 id="编译安装libsodium">1、编译安装libsodium</h3><p>进入根目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> shadowsocks-libev<br></code></pre></td></tr></table></figure><p>开始编译，依次执行以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> LIBSODIUM_VER=1.0.16<br>wget https://download.libsodium.org/libsodium/releases/libsodium-<span class="hljs-variable">$LIBSODIUM_VER</span>.tar.gz<br>tar xvf libsodium-<span class="hljs-variable">$LIBSODIUM_VER</span>.tar.gz<br><span class="hljs-built_in">pushd</span> libsodium-<span class="hljs-variable">$LIBSODIUM_VER</span><br>./configure --prefix=/usr &amp;&amp; make<br><span class="hljs-built_in">sudo</span> make install<br><span class="hljs-built_in">popd</span><br><span class="hljs-built_in">sudo</span> ldconfig<br></code></pre></td></tr></table></figure><h3 id="编译安装mbedtls">2、编译安装MbedTLS</h3><p>这里跟上面差不多，首先别忘了进入根目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> shadowsocks-libev<br></code></pre></td></tr></table></figure><p>之后开始编译，依次执行以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> MBEDTLS_VER=2.6.0<br>wget https://tls.mbed.org/download/mbedtls-<span class="hljs-variable">$MBEDTLS_VER</span>-gpl.tgz<br>tar xvf mbedtls-<span class="hljs-variable">$MBEDTLS_VER</span>-gpl.tgz<br><span class="hljs-built_in">pushd</span> mbedtls-<span class="hljs-variable">$MBEDTLS_VER</span><br>make SHARED=1 CFLAGS=-fPIC<br><span class="hljs-built_in">sudo</span> make DESTDIR=/usr install<br><span class="hljs-built_in">popd</span><br><span class="hljs-built_in">sudo</span> ldconfig<br></code></pre></td></tr></table></figure><h3 id="编译shadowsocks_libev">3、编译Shadowsocks_libev</h3><p>还是记得进入根目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> shadowsocks-libev<br></code></pre></td></tr></table></figure><p>开始编译并安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">./autogen.sh &amp;&amp; ./configure &amp;&amp; make<br><span class="hljs-built_in">sudo</span> make install<br></code></pre></td></tr></table></figure><h2 id="编辑配置文件并开启代理">编辑配置文件并开启代理</h2><p>在编译结束后，仍然是在根目录下，新建配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> shadowsocks-libev<br>vi conf.conf<br></code></pre></td></tr></table></figure><blockquote><p>vi（vim）的使用方法：</p><ul><li>刚进入界面时是浏览模式，按一下<code>i</code>键进入编辑模式</li><li>通过光标进行移动，输入编辑就跟记事本一样</li><li>编辑结束后按<code>esc</code>退出编辑模式</li><li>输入<code>:wq</code>回车，保存退出</li></ul></blockquote><p>配置文件如下，输入你自己的密码即可：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;server&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;0.0.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;server_port&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">443</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;local_port&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1080</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;你的密码&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;timeout&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">300</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;aes-256-cfb&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>之后保存退出即可。</p><p>接下来开启防火墙：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">firewall-cmd --zone=public --add-port=443/tcp --permanent<br>firewall-cmd --zone=public --add-port=443/udp --permanent<br>firewall-cmd --reload<br>systemctl restart firewalld<br></code></pre></td></tr></table></figure><p>之后开启服务端并挂载后台运行（<em>这里-u参数是开启UDP代理</em>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> ss-server -c ./conf.conf -u &gt; /dev/null 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure><p>到这里代理服务端就已经结束了，不过为了使用效果起见，我们还要安装一下BBR加速。</p><h2 id="开启bbr加速">开启BBR加速</h2><p>这个是谷歌的一个加速算法，安装很简单，直接执行脚本就行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget –no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh<br><span class="hljs-built_in">chmod</span> +x bbr.sh<br>./bbr.sh<br></code></pre></td></tr></table></figure><p>脚本开始运行会提示按任意键继续，随便按个什么就好，之后会开始安装脚本并更新系统内核，因此可能会感觉卡住了，那是正常的，表示系统正在更新内核。</p><p>在全部结束之后，按照要求输入y并回车重启服务器即可。</p><p>服务器重启之后，记得再把代理服务端打开：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> shadowsocks-libev<br><span class="hljs-built_in">nohup</span> ss-server -c ./conf.conf -u &gt; /dev/null 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure><h2 id="本地配置">本地配置</h2><p>首先，如果仅仅是科学上网的话，SS客户端就够了，从GitHub仓库下载即可：</p><p><a href="https://github.com/shadowsocks/shadowsocks-windows/releases">https://github.com/shadowsocks/shadowsocks-windows/releases</a></p><p>这里下载最新的一个版本的.zip文件即可，</p><figure><img src="/images/posts/none02/sswin.jpg" alt="sswin" /><figcaption aria-hidden="true">sswin</figcaption></figure><p>下载之后解压并运行，第一次应该会直接跳出服务器配置界面，如果没有的话，右键电脑右下角出现小飞机图标，并依次选择<code>服务器--编辑服务器</code> ，在出现的界面中填入配置即可：</p><figure><img src="/images/posts/none02/sswincof.PNG" alt="sswincof" /><figcaption aria-hidden="true">sswincof</figcaption></figure><p>点击确定后，右键小飞机图标启用系统代理即可。</p><p>不过今天的文章是游戏加速器，而SS是无法对游戏进行加速的，因此这里我们选择了SSTAP这一软件进行加速：</p><h3 id="安装配置sstap">安装配置SSTAP</h3><p>首先下载SSTAP：</p><p><a href="https://github.com/FQrabbit/SSTap-Rule/releases/download/2018.7.5/SStap-2018.7.5.exe">https://github.com/FQrabbit/SSTap-Rule/releases/download/2018.7.5/SStap-2018.7.5.exe</a></p><p>之后运行安装，不过这一版本<strong>有 广 告</strong>，所以我们再下载一个打包文件：</p><p><a href="https://github.com/FQrabbit/SSTap-Rule/releases/download/%E5%8E%BB%E5%B9%BF%E5%91%8A%E7%89%88%E6%9C%AC%E7%9A%841.0.9.7/SSTap.exe">https://github.com/FQrabbit/SSTap-Rule/releases/download/%E5%8E%BB%E5%B9%BF%E5%91%8A%E7%89%88%E6%9C%AC%E7%9A%841.0.9.7/SSTap.exe</a></p><p>打开你之前安装SSTap的文件夹，将刚刚下载的SSTpa.exe丢进去替换原来的文件即可。</p><p>接下来就是配置了，打开SSTap，点击加号并选择 "添加SS/SSR代理" ，</p><figure><img src="/images/posts/none02/sstap01.PNG" alt="sstap01" /><figcaption aria-hidden="true">sstap01</figcaption></figure><p>此时会跳出配置界面，当然你可以把配置再输一遍，不过我个人建议如果你已经安装了SS客户端的话，可以直接用链接导入：</p><ul><li>右键小飞机图标，选择服务器--分享服务器配置：</li></ul><figure><img src="/images/posts/none02/ssshare.PNG" alt="ssshare" /><figcaption aria-hidden="true">ssshare</figcaption></figure><ul><li><p>将跳出来的窗口下面的链接复制下来（虽然被我涂得一团糟，不过整个图上就一个链接，我寻思你也不可能搞错吧）：</p><figure><img src="/images/posts/none02/ssshare_L2.jpg" alt="ssshare_L2" /><figcaption aria-hidden="true">ssshare_L2</figcaption></figure></li><li><p>回到SSTap的界面上，点击界面最上面的图标，在跳出的弹框中将你的链接复制进去并按确定即可导入了：</p><figure><img src="/images/posts/none02/ssshare3.jpg" alt="ssshare3" /><figcaption aria-hidden="true">ssshare3</figcaption></figure></li></ul><p>配置导入后，可以点一下边上的闪电图标测试一下：</p><figure><img src="/images/posts/none02/sstap02.PNG" alt="sstap02" /><figcaption aria-hidden="true">sstap02</figcaption></figure><p>在一切测试通过后，将模式选择为<strong>不代理中国IP（且绕过局域网代理）</strong>（当然你也可以用按需要选择其他模式），点击连接按钮，开始快乐吧！</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android studio无法渲染xml布局的解决办法</title>
    <link href="/2018/09/11/2018-09-11-androidsolve/"/>
    <url>/2018/09/11/2018-09-11-androidsolve/</url>
    
    <content type="html"><![CDATA[<h1 id="android-studio无法渲染xml布局的解决办法">Android studio无法渲染xml布局的解决办法</h1><p>最近重装了系统，于是AS也重新安装了一下，结果创建项目之后发现不能预览布局文件了，这可不好玩，毕竟我不是脑补大师。<br />于是查了一下资料，对比了一下以往的工程文件和Android的API，解决了之后还是在这里记录一下。<br />作为案例这里新建一个项目。可以看到我添加了一个Button组建，然而preview窗口中并没有渲染： <img src="/images\posts\androidXML\an01.PNG" /> 解决方法就是打开AndroidManifest.xml文件， <img src="/images\posts\androidXML\an02.PNG" /> 注意</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">android:</span>theme=<span class="hljs-string">&quot;@style/AppTheme&quot;</span><br></code></pre></td></tr></table></figure><p>这一字段，现在我们要做的就是查看<code>@style/AppTheme</code>这一配置文件， 按住CTRL键点击就可以打开，<br /><img src="/images\posts\androidXML\an03.PNG" /><br />打开这个styles.xml文件，关注</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;style <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;AppTheme&quot;</span> <span class="hljs-attribute">parent</span>=<span class="hljs-string">&quot;Theme.AppCompat.Light.DarkActionBar&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p><img src="/images\posts\androidXML\an04.PNG" /><br />将其修改为</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;style <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;AppTheme&quot;</span> <span class="hljs-attribute">parent</span>=<span class="hljs-string">&quot;Base.Theme.AppCompat.Light.DarkActionBar&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>说白了就是在前面加上<code>Base.</code> ： <img src="/images\posts\androidXML\an05.PNG" /><br />现在可以看到能成功的渲染布局了： <img src="/images\posts\androidXML\an06.PNG" /></p><blockquote><p><strong>9月18日更新：</strong><br />亲测此问题是由于使用了Android API 28（也就是Android9）造成的，之前的应该没有这个问题。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>JetBrains</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>JetBrains</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DataGrip连接远程数据库的心得</title>
    <link href="/2018/08/28/2018-08-28-DataGrip/"/>
    <url>/2018/08/28/2018-08-28-DataGrip/</url>
    
    <content type="html"><![CDATA[<h1 id="datagrip连接远程数据库的心得">DataGrip连接远程数据库的心得</h1><p>首先介绍一下DataGrip这个软件，这也是一个用于数据库操作的软件，由JetBrains出品，UI和JetBrains全家桶的其他成员很相似，使用起来也很舒服。DataGrip的界面大体就是下图这样的： <img src="/images/posts/DataGrip/dataGrip.PNG" /> 言归正传，最近正好做一个比赛项目需要连接远程数据库，然而翻遍了网上的教程基本上全都是连接本地数据库进行操作的，虽然自己之前试了试修改IP地址等等手段，然而结果并不成功，后来在经过尝试之后终于成功的连接上了我部署在百度云的数据库，在这里记录一下。<br />首先是database列表窗口，可以看到现在只有一个我电脑本地的数据库连接。 <img src="/images/posts/DataGrip/dataGrip01.PNG" /> 此使我想要连接远程的数据库，首先需要新建一个连接对象：<br />点击database窗口左上角的"+"按钮，在弹出菜单中选择<code>Data Source</code>,选择你的数据库类型。我这里就是最简单的MySQL数据库，因此就以此为例： <img src="/images/posts/DataGrip/dataGrip02.PNG" /> 这时就会弹出 <em>Data Sources and Drivers</em> 对话框:<br /><img src="/images/posts/DataGrip/dataGrip03.PNG" /> 接下来就可以开始设置你新的连接的参数了。<br />首先配置General选项卡，这里的配置和连接本地数据库的配置一毛一样，不用改动。Host直接填默认的localhost就行。Database填写你的数据库名称，不过如果你使用的是默认数据库则可以不填。User和Password是你的<strong>数据库的用户名和密码</strong>，填好了之后就像下图展示的这样： <img src="/images/posts/DataGrip/dataGrip04.PNG" /> 此使先不要着急点<code>Test Connection</code>按钮，先切换到 SSH/SSL 选项卡，配置你的远程服务器信息：<br />首先勾选 <code>Use SSH tunnel</code> 复选框，接下来填写你的服务器信息。Proxy host 填写你的服务器的IP地址（记得在后面的 port 里填上端口号22），Proxy user 和 Proxy password 填写服务器的登陆用户和密码，如下所示： <img src="/images/posts/DataGrip/dataGrip05.PNG" /> 服务器连接参数配置好了之后，再回到 General 选项卡，点击 <code>Test Connection</code> 按钮，连接成功： <img src="/images/posts/DataGrip/dataGrip06.PNG" /> 点击OK保存退出，可以看到已经连接上了我部署在百度云的MySQL数据库 <img src="/images/posts/DataGrip/done.PNG" /></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>JetBrains</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>JetBrains</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PLC期末题库</title>
    <link href="/2018/05/20/2018-05-20-PLC/"/>
    <url>/2018/05/20/2018-05-20-PLC/</url>
    
    <content type="html"><![CDATA[<h1 id="第一章">第一章</h1><h2 id="填空题">填空题</h2><ol type="1"><li>PLC 主要由中央处理器（CPU）、存储器、输入单元、输出单元、通信接口、扩展接口电源等部分组成。</li><li>继电器的线圈“断电”时，其常开触点打开，常闭触点关闭。</li><li>外部输入电路接通时，对应的过程映像寄输入存器为“1”状态，梯形图中后者的常开触点接通 ，常闭触点断开。</li><li>若梯形图中输出 Q 的线圈“断电”，对应的过程映像输出寄存器为0状态， 在修改输出阶段后，继电器型输出模块中对应的硬件继电器的线圈断开，其常开触点断开，外部负载不工作。</li><li>手持式编程器可以为 PLC 编写四舍五入方式的程序。</li><li>PLC 一般能为外部传感器提供 24V 直流电源。</li><li>PLC 的输出接口类型有继电器输出型，晶体管输出型，可控硅输出型</li><li>PLC 的软件系统可分为系统程序和用户程序</li><li>按结构形式分类，PLC 可分为模块式，整体式两种。</li><li>PLC 采用循环扫描工作方式，其过程可分为五个阶段：自诊断检查，通信处理，输入采样，执行用户程序和输出改写，称为一个扫描周期。</li><li>将编程器内编写的程序写入 PLC 时，PLC 必须处在STOP模式。</li></ol><h2 id="简答题">简答题</h2><h3 id="在复杂的电气控制中采用-plc-控制与传统的继电器控制有哪些优越性">1、在复杂的电气控制中，采用 PLC 控制与传统的继电器控制有哪些优越性？</h3><ol type="1"><li><p>高可靠性;</p></li><li><p>丰富的I/O接口模块;</p></li><li><p>采用模块化结构;</p></li><li><p>编程简单易学;</p></li><li><p>安装简单,维修方便;</p></li><li><p>具有数据处理和通信联网功能。</p></li></ol><h3 id="什么是可编程控制器它的特点是什么">2、什么是可编程控制器？它的特点是什么？</h3><p>PLC是一种专门为在工业环境下应用而设计的数字运算操作的电子装置。它采用可以编制程序的存储器，用来在其内部存储执行逻辑运算、顺序运算、计时、计数和算术运算等操作的指令，并能通过数字式或模拟式的输入和输出，控制各种类型的机械或生产过程。PLC及其有关的外围设备都应该按易于与工业控制系统形成一个整体，易于扩展其功能的原则而设计。</p><p>特点是：</p><ol type="1"><li>可靠性高，抗干扰能力强</li><li>硬件配套齐全，功能完善，适用性强</li><li>易学易用，深受工程技术人员欢迎</li><li>系统的设计、安装、调试工作量小，维护方便，容易改造</li><li>体积小，重量轻，能耗低</li></ol><h3 id="plc-控制系统与传统的继电器控制系统有何区别">PLC 控制系统与传统的继电器控制系统有何区别？</h3><p>继电器控制：</p><p>动作有寿命限制，成本最低，也最容易被伪劣产品冒充，可维修度最高，同时维修成本也低，系统控制安装线路复杂。</p><p>PLC 控制：</p><ol type="1"><li>反应速度快，噪音低，能耗小，体积小。</li><li>功能强大，编程方便，可以随时修改程序。</li><li>控制精度高，可进行复杂的程序控制。</li><li>能够对控制过程进行自动检测。功能强，性能价格比高。</li><li>系统稳定，安全可靠。</li><li>维修工作量小，维修方便。</li><li>系统的设计，安装，调试工作量少。</li></ol><h3 id="plc-数字量输出接口按输出开关器件的种类不同有哪几种类型它们各有-什么特点">PLC 数字量输出接口按输出开关器件的种类不同，有哪几种类型？它们各有 什么特点？</h3><ol type="1"><li>继电器输出型<ol type="1"><li>有触点输出方式，适用于低频大功率交、直流负载。</li><li>灵活，但是工作频率不能很高，寿命短。</li></ol></li><li>晶体管（场效应管）输出型<ol type="1"><li>晶体管输出型适用于高频小功率直流负载。</li><li>驱动负载时需要外接直流24V电源。</li></ol></li><li>双向晶闸管输出型<ol type="1"><li>晶闸管输出型适用于高频大功率负载（交流）。</li></ol></li></ol><h3 id="简述-plc-的扫描工作过程">简述 PLC 的扫描工作过程。</h3><p>RUN模式：读取输入、执行用户程序、处理通信请求、自诊断检查和改写输出；</p><p>STOP模式：读取输入、处理通信请求、自诊断检查和改写输出。</p><h3 id="为什么-plc-中软继电器的触点可无数次使用">为什么 PLC 中软继电器的触点可无数次使用？</h3><p>因为软继电器在PLC里是一个位存储单元（映像寄存器），状态只有0和1，存储单元的状态取出多少次都不会影响存储单元的状态，所以在PLC程序里可以无数次使用存储单元的状态，即软继电器的触点可以在PLC程序里无数次使用。</p><h3 id="plc-按-io-点数和结构形式可分为几类">PLC 按 I/O 点数和结构形式可分为几类？</h3><ol type="1"><li>按I/O点数分类<ol type="1"><li>小型机</li><li>中型机</li><li>大型机</li></ol></li><li>按结构形式分类<ol type="1"><li>整体式结构</li><li>模块式结构</li></ol></li></ol><h3 id="plc-执行程序是以循环扫描方式进行的请问每一扫描过程分为哪几个阶段">PLC 执行程序是以循环扫描方式进行的，请问每一扫描过程分为哪几个阶段</h3><p>PLC执行程序的过程分为三个阶段，即输入采样阶段、程序执行阶段、输出刷新阶段。</p><h2 id="判断题">判断题</h2><ul class="task-list"><li><input type="checkbox" disabled="" checked="" />PLC 的输入电路均采用光电耦合隔离方式。</li><li><input type="checkbox" disabled="" checked="" />CPU224 型 PLC 本机 I/O 点数为 14/10。</li><li><input type="checkbox" disabled="" />PLC 的周期性循环扫描方式不会产生输入/输出滞后时间。</li><li><input type="checkbox" disabled="" checked="" />间接寻址是通过地址指针来存取存储器中的数据。</li><li><input type="checkbox" disabled="" checked="" />存储器 AI、AQ 只能使用字寻址方式来存取信息。</li></ul><h2 id="选择题">选择题</h2><ol type="1"><li>世界上第 1 台 PLC 诞生于 美国数字设备公司,1969年。</li><li>下列不属于 PLC 硬件系统组成的是 用户程序。</li><li>CPU226 型 PLC 本机 I/O 点数为 24/16。</li><li>S7-200 系列可编程序控制器的直流电源电源输入范围是 DC24V。</li><li>S7-200 系列继电器输出的可编程序控制器，一个继电器输出点的最大通过电流是 2A。</li><li>如需要 3 路模拟量输入 1 路模拟量输出，在 S7-200 系列 PLC 中应选（ EM235） 模块。</li><li>PLC 的工作方式 循环扫描工作方式。</li><li>在输出扫描阶段，将（输出映像）寄存器中的内容复制到输出接线端子上。</li><li>CPU224XP 型 PLC 有几个通讯端口 2个。</li></ol><h1 id="第二章">第二章</h1><h3 id="填空题-1">填空题</h3><ol type="1"><li>输出指令（对应于梯形图中的线圈）不能用于输入过程映像寄存器。</li><li>SM0.1在首次扫描时为 ON，通常用来进行程序初始化；SM0.0一直为ON。</li><li>接通延时定时器 TON 的使能（IN）输入电路为ON时开始定时，当前值大于等于预设值时其定时器位变为1，梯形图中其常开触点接通，常闭触点断开。</li><li>接通延时定时器 TON 的使能输入电路断开时被复位，复位后梯形图中其常开触点断开，常闭触点接通，当前值等于0。</li><li>有记忆接通延时定时器 TONR 的使能输入电路断开时开始定时，使能输入电路断开时，当前值保持。使能输入电路再次接通时继续记时。必须用复位指令来复位 TONR。</li><li>断开延时定时器 TOF 的使能输入电路接通时，定时器位立即变为1，当前值被复位。使能输入电路断开时，当前值从0 开始累加。当前值等于预设值时，输出位变为0，梯形图中其常开触点断开，常闭触点闭合，当前值不变。</li><li>若加计数器的计数输入电路 CU接通、复位输入电路R断开，计数器的当前值加 1。当前值大于等于预设值 PV 时，常开触点闭合，常闭触点断开。复位输入电路接通时，计数器被复位，复位后其常开触点断开， 常闭触点闭合，当前值为0。</li><li>定时器和记数器除了当前值之外，还有一位状态位，状态位在当前值大于或等于预置值时为 ON。</li><li>VD200 是 S7-200PLC 的全局变量寄存器，其长度是2位。</li><li>被置位的点一旦置位后，在执行RST指令前不会变为 OFF，具有锁存功能。</li><li>S7-200 型 PLC 的指令系统有梯形图、功能块和语句表三种形 式。</li><li>S7-200 型 PLC 的定时器包括TON、TOF、TONR 三种类型。</li><li>累加器寻址的统一格式为MOVD &amp;VB×××,AC×</li><li>正跳变指令的梯形图格式为p跳变 。</li><li>通常把内部存储器又称为元件继电器。</li></ol><h3 id="判断题-1">判断题</h3><ul class="task-list"><li><input type="checkbox" disabled="" checked="" />在工程实践中，常把输出映象寄存器称为输出继电器。</li><li><input type="checkbox" disabled="" />提供一个周期是 1 秒钟，占空比是 50%的特殊存储器位是 SM0.4。</li><li><input type="checkbox" disabled="" />定时器的寻址依赖所用指令，带位操作数的指令存取位值，带字操作数的指 令存取当前值。</li><li><input type="checkbox" disabled="" checked="" />位寻址的格式由存储器标识符、字节地址、分割符及位号组成。</li><li><input type="checkbox" disabled="" checked="" />栈装载与指令是将堆栈中的第一层和第二层的值进行逻辑与操作，结果存入 栈顶。</li><li><input type="checkbox" disabled="" checked="" />正跳变指令每次检测到输入信号由 0 变 1 之后，使电路接通一个扫描周期。</li><li><input type="checkbox" disabled="" />TONR 的启动输入端 IN 由“1”变“0”时定时器复位。</li><li><input type="checkbox" disabled="" checked="" />定时器定时时间长短取决于定时分辨率。</li><li><input type="checkbox" disabled="" checked="" />S7-200 系列 PLC 可进行间接寻址的存储器是 I、Q、M、S、T 及 C。</li></ul><h3 id="选择题-1">选择题</h3><ol type="1"><li>下面哪种不属于 s7-200 PLC 可编程语言 格式文本</li><li>可使用位寻址方式来存取信息的寄存器不包括 AC</li><li>SM 是哪个存储器的标识符 特殊辅助寄存器</li><li>AC 是哪个存储器的标示符 累加器</li><li>定时器预设值 PT 采用的寻址方式为 字寻址</li><li>只能使用字寻址方式来存取信息的寄存器是 AI</li><li>传统继电控制中的中间继电器，对应 S7 系列 PLC 的应是那种地址范围 M</li><li>PLC 所有软继电器的触点可以无限次使用</li><li>下列属于字节寻址的是 IB0</li><li>下列哪项属于字寻址 VW10</li><li>下列哪项属于双字寻址 MD28</li></ol><h1 id="第三章">第三章</h1><h3 id="填空题-2">填空题</h3><ol type="1"><li>JMP 跳转指令不能在主程序、子程序和和中断程序之间相互。</li><li>定时器中断由 1ms 延时定时器T32和T96产生。</li><li>把一个实数转换为一个双字整数值的 TRUNC 指令，它的小数部分采用是截位取整原则处理。</li><li>子程序可以嵌套，嵌套深度最多为8层。</li><li>中断程序标号指令的语句表指令的格式 INT-n，其中 n 指的是中断程序标号。</li><li>I/O 中断事件包含边沿中断、PTO中断和HSC中断三类。</li><li>FOR和NEXT两条指令间的所有指令构成一个循环体。</li><li>把一个实数转换为一个双字数数值的 ROUND 指令，它的小数部分采用是 四舍五入原则处理。</li><li>段译码指令的操作码是 SEG。它的源操作数的寻址方式是字节寻址，目的操作数的寻址方式是字节寻址。</li><li>VB0 的值为 2#1011 0110，循环右移 2 位然后左移 4 位为 2# 1101 0000。</li><li>读取实时时钟指令 TODR 读取的日期和时间的数制为 BCD码。</li><li>主程序和中断程序的变量表中只有临时变量。</li></ol><h3 id="判断题-2">判断题</h3><ul class="task-list"><li><input type="checkbox" disabled="" checked="" />JMP 指令的功能是使程序跳转到另一个程序的具体标号处。</li><li><input type="checkbox" disabled="" />字节比较指令比较两个字节大小，若比较式为真，该触点断开。</li><li><input type="checkbox" disabled="" />双字循环移位指令的操作数 N 指移位位数，要通过字寻址方式来设置。</li><li><input type="checkbox" disabled="" checked="" />位移位寄存器指令每当 EN 端由 0 变 1 时，寄存器按要求移位一次。</li><li><input type="checkbox" disabled="" checked="" />有条件结束指令将根据前面的逻辑关系决定是否终止用户程序。</li><li><input type="checkbox" disabled="" />块传送指令的操作数 N 指定被传送数据块的长度，采用双字寻址。</li><li><input type="checkbox" disabled="" />暂停指令能够使 PLC 从 RUN 到 STOP，但不能立即终止主程序的执行。</li><li><input type="checkbox" disabled="" />TRUNC 指令把 32 位实数转换成 32 位符号数，小数部分按照四舍五入原则 处理。</li><li><input type="checkbox" disabled="" checked="" />I-D 指令的功能是将把一个 16 位整数值数转换为一个 32 位的双字整数。</li><li><input type="checkbox" disabled="" />中断分离指令 DTCH 截断一个中断事件(EVNT)和所有中断程序的联系，但 并不禁止该中断事件。</li></ul><h3 id="选择题-2">选择题</h3><ol type="1"><li>子程序的有条件返回指令是 CRET</li><li>无条件子程序返回指令是 RET</li><li>一个 BCD 码转换为一个整数值的梯形图指令的操作码是 BCD-1</li><li>段译码指令的梯形图指令的操作码是 SEG</li><li>对 S7-200 系列 PLC，两个16位数整数相乘，产生一个 32 位的输出结果，应 采用哪种指令？MUL</li><li>S7-200 系列可编程序控制器中，读取内部时钟，用什么指令？ TODR</li><li>S7-200PLC，数据块数据传送，可采用哪种指令？ BMB</li><li>S7-200PLC 的看门狗定时时间为 500ms</li><li>JMP n 这条指令中，n 的取值范围是 0-255</li><li>双字整数的加减法指令的操作数都采用（双字）寻址方式</li><li>若整数的乘/除法指令的执行结果是零，则影响（SM1.0）位</li><li>实数开方指令的梯形图操作码是 SQRT</li><li>设 VWI0 中存有数据 123.9,现执行以下指令，则指令的结果是 124</li><li>取整指令的梯形图指令的操作码是 TRUNC</li><li>设累加器 AC2 中的低四位存有十进制数 3，现执行以下指令，则指令的执 行结果 VW40 的内容是 0008H</li><li>以下（编程中断）不属于 PLC 的中断事件类型。</li><li>整数的加减法指令的操作数都采用（字）寻址方式。</li><li>若整数的加减法指令的执行结果发生溢出则影响（SM1.1）位。</li><li>把一个 BCD 码转换为一个整数值的梯形图指令的操作码是 BCD-I</li></ol><h3 id="编程题">编程题</h3><figure><img src="/images/posts/PLC/image-20210520101843059.png" alt="image-20210520101843059" /><figcaption aria-hidden="true">image-20210520101843059</figcaption></figure><p>起保停</p><figure><img src="/images/posts/PLC/image-20210520112140794.png" alt="image-20210520112140794" /><figcaption aria-hidden="true">image-20210520112140794</figcaption></figure><figure><img src="/images/posts/PLC/image-20210520112457757.png" alt="image-20210520112457757" /><figcaption aria-hidden="true">image-20210520112457757</figcaption></figure><figure><img src="/images/posts/PLC/image-20210520112912655.png" alt="image-20210520112912655" /><figcaption aria-hidden="true">image-20210520112912655</figcaption></figure><p>置复位</p><figure><img src="/images/posts/PLC/image-20210520113114591.png" alt="image-20210520113114591" /><figcaption aria-hidden="true">image-20210520113114591</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>期末复习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>期末复习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大学物理上复习笔记</title>
    <link href="/2018/05/18/2018-05-18-dawu/"/>
    <url>/2018/05/18/2018-05-18-dawu/</url>
    
    <content type="html"><![CDATA[<h1 id="质点运动学">质点运动学</h1><h2 id="运动方程">运动方程</h2><p>已知运动方程x(t)，则：</p><p>速度： $ V= $</p><p>加速度：<span class="math inline">\(a=\frac{d v}{d t}=\frac{d^{2} x}{d t^{2}}\)</span></p><h2 id="匀加速直线运动">匀加速直线运动</h2><p>初始位置$ x_{0} <span class="math inline">\(，初始速度\)</span> v_{0} $，加速度a ，则：</p><p><span class="math inline">\(v=v_{0}+at\)</span>,</p><p><span class="math inline">\(x=x_{0}+v_{0}t+\frac{1}{2}at^{2}\)</span>，</p><p><span class="math inline">\(v^{2}-v_{0}^{2}=2a(x-x_{0})\)</span></p><h2 id="抛体运动">抛体运动</h2><p>水平方向：<span class="math inline">\(a_{x}=0,v=v_{0}\)</span>；</p><p>竖直方向：<span class="math inline">\(a_{y}=-g,v=v_{0y}-gt\)</span></p><h1 id="力学">力学</h1><h2 id="弹簧弹力">弹簧弹力</h2><p><span class="math inline">\(\vec{F}=-k \vec{x}\)</span></p><h2 id="摩擦力">摩擦力</h2><p>滑动摩擦力：<span class="math inline">\(F=\mu_{k} F_{N}\)</span></p><p>最大静摩擦力：<span class="math inline">\(F_{max}=\mu_{s}F_{n}\)</span></p><h1 id="刚体转动">刚体转动</h1><h2 id="圆周运动">圆周运动</h2><p>已知运动方程<span class="math inline">\(\theta(t)\)</span>，则：</p><p>角速度：<span class="math inline">\(\omega=\frac{d\theta}{dt}\)</span></p><p>角加速度：<span class="math inline">\(\beta=\frac{d\omega}{dt}=\frac{d^{2}\theta}{dt^{2}}\)</span></p><h2 id="匀加速圆周运动">匀加速圆周运动</h2><p>初始角度<span class="math inline">\(\theta_{0}\)</span>，初始角速度<span class="math inline">\(\omega_{0}\)</span>，角加速度<span class="math inline">\(\beta_{0}\)</span>，则</p><p><span class="math inline">\(\omega=\omega_{0}+\beta t\)</span></p><p><span class="math inline">\(\theta = \theta_{0}+\omega_{0}t+\frac{1}{2}\beta t^{2}\)</span></p><p><span class="math inline">\(\omega^2-\omega_{0}^2=2\beta(\theta-\theta_{0})\)</span></p><h2 id="切向加速度法向加速度总加速度">切向加速度、法向加速度、总加速度</h2><p>法向加速度：<span class="math inline">\(a_{n}=\omega^2R=\frac{v^2}{R}\)</span></p><p>切向加速度：<span class="math inline">\(a_{t}=\beta R=\frac{dv}{dt}\)</span></p><p>总加速度：<span class="math inline">\(a=\sqrt{a_{n}^2+a_{t}^2}\)</span></p><p>总加速度与<span class="math inline">\(a_{n}\)</span>夹角：<span class="math inline">\(\gamma=\arctan \left|\frac{a_{t}}{a_{n}}\right|\)</span></p><h2 id="转动惯量">转动惯量</h2><p>细棒绕端点：<span class="math inline">\(J=\frac{ml^2}{3}\)</span></p><p>细棒绕中心：<span class="math inline">\(J=\frac{ml^2}{12}\)</span></p><p>圆环绕中心：<span class="math inline">\(J=mr^2\)</span></p><p>圆盘绕中心：<span class="math inline">\(J=\frac{mr^2}{2}\)</span></p><p>球壳绕中心轴：<span class="math inline">\(J=\frac{2mr^2}{3}\)</span></p><p>球体绕中心轴：<span class="math inline">\(J=\frac{2mr^2}{5}\)</span></p><p>已知总力矩，则 <span class="math inline">\(F_{总}=J\beta\)</span></p><h2 id="角动量守恒">角动量守恒</h2><p><span class="math inline">\(mr_{1}v_{1}+J\omega_{1}=mr_{2}v_{2}+J\omega_{2}\)</span></p><h1 id="功和能">功和能</h1><h2 id="势能">势能</h2><p>动能：<span class="math inline">\(E_{k}=\frac{1}{2}mv^2\)</span></p><p>转动动能：<span class="math inline">\(E_{k}=\frac{1}{2}J\omega^2\)</span></p><p>弹性势能：<span class="math inline">\(E_{p}=\frac{1}{2}kx^2\)</span></p><p>重力势能：<span class="math inline">\(E_{p}=mgh\)</span></p><p>引力势能：<span class="math inline">\(E_{p}=-\frac{Gm_{1}m_{2}}{r}\)</span></p><h2 id="力做功">力做功</h2><p><span class="math inline">\(A=FS\cos \theta\)</span></p><h2 id="能量守恒">能量守恒</h2><p>动能+势能+功=动能+势能</p><h2 id="完全非弹性碰撞">完全非弹性碰撞</h2><p><span class="math inline">\(m_{1}v_{1}+m_{2}v_{2} = (m_{1}+m_{2})v\)</span></p><h1 id="简谐振动">简谐振动</h1><h2 id="振动方程">振动方程</h2><p><span class="math inline">\(\boldsymbol{x}=A \cos (\omega \boldsymbol{t}+\varphi)\)</span></p><p>振幅：<span class="math inline">\(A=\left| x_{max} \right|\)</span></p><p>角频率：<span class="math inline">\(\omega = \sqrt{\frac{k}{m}}(弹簧振子) = \frac{2 \pi}{T}\)</span></p><p>周期：<span class="math inline">\(T=\frac{2 \pi}{\omega}\)</span></p><p>相位：<span class="math inline">\(\omega t + \varphi\)</span></p><p>初相：<span class="math inline">\(\varphi\)</span></p><p>速度：</p><p><span class="math inline">\(v = \frac{dx}{dt} = -A\omega \sin (\omega t + \varphi)\)</span></p><p><span class="math inline">\(v_{max}=A\omega\)</span></p><p>加速度：</p><p><span class="math inline">\(a=\frac{d^2x}{dt^2} = -A\omega^2\cos (\omega t + \varphi)\)</span></p><p><span class="math inline">\(a_{max} = A\omega ^ 2\)</span></p><h2 id="旋转矢量法">旋转矢量法</h2><ol type="1"><li>画数轴，以原点为圆心，振幅长度为半径</li><li>标注圆的方向为逆时针，角速度<span class="math inline">\(\omega\)</span></li><li>找出初始位置x对应的点（根据方向）</li><li>画矢量，写初相</li></ol><blockquote><p><strong>例：某物体沿x轴做简谐振动，振幅为A，若初始位移<span class="math inline">\(x_{0}=\frac{A}{2}\)</span>，初始速度沿X轴正方向，则其初相为</strong></p><figure><img src="/images/posts/dawu/image-20210513143200913.png" alt="image-20210513150658852" /><figcaption aria-hidden="true">image-20210513150658852</figcaption></figure><p>故<span class="math inline">\(\varphi=-\frac{\pi}{3}\)</span></p></blockquote><h2 id="振动的能量和功">振动的能量和功</h2><p>系统机械能 = 小球动能 + 弹簧弹性势能</p><p><span class="math inline">\(E_{总}= E_{k}+ E_{p}= \frac{1}{2}mv^2+\frac{1}{2}kx^2\)</span></p><p><span class="math inline">\(E_{总}=\frac{1}{2}kA^2\)</span></p><h2 id="振动的合成">振动的合成</h2><p><span class="math inline">\(A=\sqrt{A_{1}^2+A_{2}^2+2A_{1}A_{2}\cos (\varphi_{1}-\varphi_{2})}\)</span></p><p><span class="math inline">\(\tan \varphi = \frac{A_{1}\sin \varphi_{1} + A_{2}\sin \varphi_{2}}{A_{1}\cos \varphi_{1} + A_{2}\cos \varphi_{2}}\)</span></p><h1 id="机械波">机械波</h1><p>原点O的振动方程：<span class="math inline">\(y=A\cos (\omega t + \varphi)\)</span></p><p>波动方程：<span class="math inline">\(y=A\cos (\omega(t - \frac{x}{u}) + \varphi)\)</span>，其中：</p><p>波速：<span class="math inline">\(u=\frac{\lambda}{T}=\lambda \cdot v\)</span>，u有方向，正负号对应波的传播方向，负号为正向波，正号为负向波</p><p>波长：<span class="math inline">\(\lambda = u \cdot T=u \cdot \frac{1}{v}\)</span></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>期末复习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>期末复习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工程材料学复习笔记</title>
    <link href="/2018/05/05/2018-05-05-feC/"/>
    <url>/2018/05/05/2018-05-05-feC/</url>
    
    <content type="html"><![CDATA[<h1 id="基本概念">基本概念</h1><h2 id="填空">填空</h2><ol type="1"><li><p>在科学研究和生产实际中常用<strong>硬度</strong>评价材料的软硬程度，用<strong>强度</strong>评价材料在外力作用下抵抗变形或断裂的能力，用<strong>塑性</strong>评价材料在外力作用下产生塑性变形而本身又不被破坏的能力。</p></li><li><p>机械设计时常用<strong>抗拉强度</strong>和<strong>屈服强度</strong>两种强度指标。</p></li><li><p>金属材料常用的力学性能指标：抗拉强度用 <span class="math inline">\(\sigma_{b}\)</span> 表示；屈服强度用<strong>屈服点</strong><span class="math inline">\(\sigma_{s}\)</span>表示；硬度常用<strong>洛氏硬度</strong>和<strong>维氏硬度</strong>表示；塑性指标用 <strong>延伸率</strong><span class="math inline">\(\delta\)</span>和<strong>断面收缩率</strong><span class="math inline">\(\psi\)</span>表示，其中<strong>断面收缩率</strong>表示塑性更接近材料的真实变形；冲击韧度用<strong>冲击韧性</strong>表示。</p></li><li><p>屈强比是指<strong>屈服极限</strong>与<strong>强度极限</strong>之比，其物理意义是<strong>屈强比越小，工程构件越可靠</strong>。</p></li><li><p>材料的主要工艺性能有<strong>铸造性能</strong>、<strong>可焊性</strong>、<strong>可锻性</strong>、<strong>热处理性能</strong>和<strong>切削加工性</strong>。</p></li><li><p>金属中常见的三种晶格类型是<strong>体心立方结构</strong>、<strong>面心立方结构</strong>和<strong>密排立方结构</strong>。</p></li><li><p><span class="math inline">\(\alpha\)</span>-Fe和<span class="math inline">\(\gamma\)</span>-Fe的晶格结构分别是<strong>体心立方结构</strong>和<strong>面心立方结构</strong>。</p></li><li><p>按几何形式，实际金属中晶体缺陷分为<strong>点缺陷</strong>、<strong>线缺陷</strong>和<strong>面缺陷</strong>。</p><p>其中，点缺陷包括<strong>空位</strong>、<strong>间隙原子</strong>和<strong>置换原子</strong>；</p><p>线缺陷的基本类型有<strong>刃型位错</strong>和<strong>螺形位错</strong>；</p><p>面缺陷主要指<strong>晶界</strong>和<strong>亚晶界</strong>；</p><p>实际晶体的强度比理想晶体的强度<strong>低</strong>。</p></li><li><p>为了使金属结晶过程得以进行，必须具有一定的<strong>过冷度</strong>，它是理论结晶温度与实际结晶温度的差值。</p></li><li><p>液态金属结晶的基本过程是<strong>晶核生长</strong>；结晶时常用的细化晶粒方法有<strong>降低熔液的浇注温度</strong>、<strong>变质处理</strong>和<strong>震动搅拌</strong>。</p></li><li><p>根据组成合金各组元间的相互作用不同，合金的相结构分为两大类：<strong>固溶体</strong>、<strong>金属间化合物</strong>。</p></li><li><p>固溶体的晶格结构与<strong>溶质</strong>相同， 其强度、硬度比溶剂金属<strong>高</strong>。</p></li><li><p>金属的冷加工与热加工是按<strong>金属的再结晶温度</strong>来划分的， 因此铜(<span class="math inline">\(T_{m}=1084^{\circ}C\)</span>)在室温下变形加工称为<strong>冷加工</strong>；而锡(<span class="math inline">\(T_{m}=232^{\circ}C\)</span>)在室温下变形加工称为<strong>热加工</strong>。</p></li><li><p>变形金属经再结晶后的晶粒度主要取决于<strong>加热温度</strong>和<strong>保温时间</strong>。</p></li><li><p>F和A分别是碳在<span class="math inline">\(\alpha-Fe\)</span>、<span class="math inline">\(\gamma-Fe\)</span>中所形成的间隙固溶体，它们的晶格结构分别是<strong>体心立方晶格</strong>和<strong>面心立方晶格</strong>。</p></li><li><p>珠光体是<strong>铁素体</strong>和<strong>渗碳体</strong>混合在一起形成的机械混合物。</p></li><li><p>按<span class="math inline">\(Fe-Fe_{3}C\)</span>相图，铁碳合金可分为三大类，分别是<strong>工业纯铁</strong>、<strong>钢</strong>、<strong>白口铸铁</strong>。</p></li><li><p>在<span class="math inline">\(Fe-Fe_{3}C\)</span>相图中，钢与铸铁分界点的含碳量为<strong>2.11%</strong>。</p></li><li><p>在<span class="math inline">\(Fe-Fe_{3}C\)</span>相图中，共晶点的含碳量为<strong>4.3%</strong>，共析点的含碳量为<strong>0.77%</strong>。</p></li><li><p>在<span class="math inline">\(Fe-Fe_{3}C\)</span>相图中，共晶转变温度是<strong>1148℃</strong>，共析转变温度是<strong>727℃</strong>。</p></li><li><p>在<span class="math inline">\(Fe-Fe_{3}C\)</span>相图中，碳在奧氏体中的最大溶解度点为<strong>2.11%</strong>。</p></li><li><p><span class="math inline">\(w_{c}\)</span>=0.4%的室温平衡组织为<strong>铁素体和珠光体</strong>，<span class="math inline">\(w_{c}\)</span>=1.0%钢的室温平衡组织为<strong>珠光体和二次渗碳体</strong>。</p></li><li><p>若退火亚共析钢试样中F占41.6%，P占58.4%，则此钢的含碳量为**58.4%*0.77%=0.45%**。</p></li><li><p>根据共析钢的C曲线，过冷奥氏体在A线以下转变的产物类型有<strong>珠光体P</strong>、<strong>贝氏体B</strong>和<strong>马氏体M</strong>。</p></li><li><p>贝氏体的显微组织形态主要有<strong>上贝氏体</strong>和<strong>下贝氏体</strong>两种，其中<strong>下贝氏体</strong>的综合性能好。</p></li><li><p>马氏体是碳溶于<span class="math inline">\(\boldsymbol{\alpha-Fe}\)</span>中形成的<strong>过饱和</strong>固溶体。</p></li><li><p>碳钢低温回火的温度范围为<strong>150℃~250℃</strong>，回火后组织为<strong>回火马氏体</strong>。</p></li><li><p>碳钢中温回火的温度范围为<strong>350℃~500℃</strong>，回火后组织为<strong>回火屈氏体</strong>。</p></li><li><p>碳钢高温回火的温度范围为<strong>500℃~650℃</strong>，回火后组织为<strong>回火索氏体</strong>。</p></li><li><p>除Co以外，合金元素的加入均使钢的C曲线<strong>向右移</strong>，淬火临界冷却速度<strong>升高</strong>，钢的淬透性<strong>变好</strong>，所以35CrMo钢比35钢的淬透性<strong>好</strong>。</p></li><li><p>钢渗碳的目的是为了得到<strong>高硬度、耐磨性和疲劳强度的表面，同时心部保持较好的韧性及塑性</strong>。</p></li><li><p>一般表面淬火钢应选<strong>高碳</strong>钢，渗碳件应选<strong>低碳</strong>钢。</p></li><li><p>钢的质量是按<strong>硫（S）</strong>和<strong>磷（P）</strong>含量的高低进行分类。</p></li><li><p>钢中的<strong>S</strong>元素引起热脆，<strong>P</strong>元素引起冷脆。</p></li><li><p>Q235A属于<strong>碳素结构钢</strong>， 其中“A"的含义是<strong>A级质量等级</strong>。</p></li><li><p>16Mn属于<strong>低合金高强度结构钢</strong>，其含碳量约为<strong>0.1%-0.25%</strong>。</p></li><li><p>调质件应选用<strong>高碳钢</strong>，渗碳件应选用<strong>低碳钢</strong>。</p></li><li><p>根据合金的成分和生产工艺特点。将铝合金分为<strong>变形铝合金</strong>和<strong>铸造铝合金</strong>两大类。</p></li><li><p>形变铝合金按其主要性能和用途分为<strong>防锈铝合金</strong>、<strong>硬铝合金</strong>、<strong>超硬铝合金</strong>和<strong>锻铝合金</strong>。其中<strong>防锈铝合金</strong>强度最低。</p></li><li><p>铜合金分为<strong>青铜</strong>、<strong>黄铜</strong>和<strong>白铜</strong>三类。</p></li><li><p>轴承合金用于制造轴承的<strong>轴瓦</strong>和<strong>内衬</strong>，常用的轴承合金有<strong>锡基</strong>、<strong>铅基</strong>和<strong>铜基</strong>轴承合金。</p></li><li><p>常用高分子材料有<strong>塑料</strong>，<strong>橡胶</strong>和<strong>合成纤维</strong>。</p></li><li><p>玻璃钢是<strong>玻璃纤维</strong>和<strong>树脂</strong>组合成的复合材料。</p></li></ol><h2 id="简答">简答</h2><h3 id="硬度与耐磨性关系如何">1、硬度与耐磨性关系如何?</h3><p>材料的硬度越高，耐磨性越好，故常将硬度值作为衡量材料耐磨性的重要指标之一。但是耐磨性好的材料不一定硬度高。</p><h3 id="布氏硬度和洛氏硬度主要用来测定哪些材料的硬度有何优缺点">2、布氏硬度和洛氏硬度主要用来测定哪些材料的硬度?有何优缺点?</h3><p>一般来说布氏硬度用来检测较软的材料（例如铝合金，退火、正火态钢铁），洛氏硬度用来检测较硬的材料（淬火态钢铁）</p><ul><li>洛氏硬度计的优点：<ul><li>因有硬质、软质两种压头，故适于各种不同硬质材料的检验，不存在压头变形问题。</li><li>压痕小，不伤工件表面。</li><li>操作迅速，立即得出数据，生产效率高，适用于大量生产中的成品检验。</li></ul></li><li>洛氏硬度检测仪缺点是：<ul><li>用不同硬度级测得的硬度值无法统一起来，无法进行比较。</li><li>对工件的大小有限制。</li></ul></li></ul><h3 id="名词解释各向异性位错强化细晶强化">3、名词解释：各向异性、位错强化、细晶强化</h3><blockquote><p><strong>各向异性</strong>：</p><p>在单晶体中，不同晶面和晶面上各种性能不同的现象被称为各向异性。</p><p><strong>位错强化</strong>：</p><p>塑性变形时，位错的运动是比较复杂的，位错之间相互反应、位错受到阻碍不断塞积、材料中的溶质原子、第二相等都会阻碍位错运动，从而使材料出现加工硬化。</p><p><strong>细晶强化</strong>：</p><p>通常金属是由许多晶粒组成的多晶体，晶粒的大小可以用单位体积内晶粒的数目来表示，数目越多，晶粒越细。实验表明，在常温(下的细晶粒金属比粗晶粒金属有更高的强度、硬度、塑性和韧性。这是因为细晶粒受到外力发生塑性变形可分散在更多的晶粒内进行，塑性变形较均匀，应力集中较小；此外，晶粒越细，晶界面积越大，晶界越曲折，越不利于裂纹的扩展。故工业上将通过细化晶粒以提高材料强度的方法称为<strong>细晶强化。</strong></p></blockquote><h3 id="试比较下列铸造条件下其它条件相同铸件晶粒的大小">4、试比较下列铸造条件下(其它条件相同)，铸件晶粒的大小</h3><p>①砂型铸造与金属型铸造；②厚壁铸件与薄壁铸件；③加变质剂与不加变质剂；④浇注时振动与不振动；⑤高温浇注与低温浇注。</p><blockquote><p>①：金属型铸造比砂型铸造晶粒小，金属型过冷度大于砂型;</p><p>②：薄壁铸件比厚壁铸件晶粒小，薄壁铸件散热快;</p><p>③：正常结晶比加变质剂结晶晶粒大，加变质剂可细化晶粒。</p><p>④：正常结晶比附加振动结晶晶粒大，附加振动可细化晶粒。</p><p>⑤： 高温浇注的比低温的晶粒要粗大。</p></blockquote><h3 id="名词解释固溶强化">5、名词解释：固溶强化</h3><p>溶质原子使得原固溶体的强度和硬度升高，且塑性和韧性没有明显的降低。这一现象被称为固溶强化。</p><h3 id="名词解释加工硬化再结晶">6、名词解释：加工硬化、再结晶</h3><blockquote><p><strong>加工硬化</strong>：</p><p>随着冷变形程度的增加，金属材料强度和硬度指标都有所提高，但塑性、韧性有所下降的现象。</p><p><strong>再结晶</strong>：</p><p>再结晶就是变形晶粒内通过重新成核和核长大，形成无应变等轴新晶粒的过程。</p></blockquote><h3 id="热加工对金属的组织和性能有何影响钢材在热变形加工锻造时为什么不出现硬化现象">7、热加工对金属的组织和性能有何影响?钢材在热变形加工(锻造)时，为什么不出现硬化现象?</h3><ul><li><p>细化晶粒</p></li><li><p>形成纤维组织</p></li><li><p>消除组织缺陷</p></li><li><p>形成带状组织</p></li></ul><p>热加工在塑性变形时产生的加工硬化和组织变化，会被随即而来的再结晶消除，形成缺陷较少的等轴晶粒。</p><h3 id="用一根冷拉钢丝绳吊装一大型工件进入热处理炉并随工件一起加热到1000c保温当出炉后再次吊装工件时钢丝绳发生断裂试分析其原因">8、用一根冷拉钢丝绳吊装一大型工件进入热处理炉，并随工件一起加热到1000C保温，当出炉后再次吊装工件时，钢丝绳发生断裂，试分析其原因</h3><p>冷拉钢丝绳是利用加工硬化效应提高其强度的，在这种状态下的钢丝中晶体缺陷密度增大，强度增加，处于加工硬化状态。在1000℃时保温，钢丝将发生回复、再结晶和晶粒长大过程，组织和结构恢复到软化状态。在这一系列变化中，冷拉钢丝的加工硬化效果将消失，强度下降，在再次起吊时，钢丝将被拉长，发生塑性变形，横截面积减小，强度将比保温前低，所以发生断裂。</p><h3 id="什么是同素异构转变">9、什么是同素异构转变</h3><p>金属的晶体结构随温度变化而改变的现象称为同素异构转变。</p><h3 id="名词解释热处理工艺">10、名词解释：热处理工艺</h3><blockquote><p><strong>热处理工艺</strong>：</p><p>热处理是将固态金属或合金在一定介质中加热、保温和冷却，以改变材料整体或表面组织，从而获得所需性能的工艺。</p></blockquote><h3 id="名词解释退火正火淬火回火回火脆性淬透性淬硬性调质处理表面淬火">11、名词解释：退火、正火、淬火、回火、回火脆性、淬透性、淬硬性、调质处理、表面淬火</h3><blockquote><p><strong>退火</strong>：</p><p>把钢加热到高或低于临界点的某一温度，保温一段时间，然后缓慢冷却以获得接近平衡组织的一项热处理工艺。</p><p><strong>正火</strong>：</p><p>将钢构件加热到Ac3温度以上30〜50℃后，保温一段时间出炉空冷。</p><p><strong>淬火</strong>：</p><p>将钢加热到高于临介点的温度，保温一段时间，以大于临界冷却速度在冷却介质中急速冷却，使过冷奥氏体转变为下贝氏体或马氏体的热处理方法。</p><p><strong>回火</strong>：</p><p>将已经淬火的钢重新加热到温度低于Ac1的某个温度，保温后用一定方式冷却的热处理工艺。</p><p><strong>回火脆性</strong>：</p><p>在某些温度范围内回火时，会出现冲击韧性下降的现像。</p><p><strong>淬透性</strong>：</p><p>钢在淬火时获得马氏体的能力。</p><p><strong>淬硬性</strong>：</p><p>钢在淬火时的硬化能力。</p><p><strong>调质处理</strong>：</p><p>通常把淬火加高温回火的热处理工艺称为调质处理。</p><p><strong>表面淬火</strong>：</p><p>对工件表面进行快速加热与淬火冷却相结合的热处理工艺。</p></blockquote><h3 id="名词解释回火稳定性二次硬化">12、名词解释：回火稳定性、二次硬化</h3><blockquote><p><strong>回火稳定性</strong>：</p><p>淬火钢在回火过程中抵抗硬度下降的能力。</p><p><strong>二次硬化</strong>：</p><p>含有某些元素的钢在500~600℃回火后，硬度又有所增加的现象。</p></blockquote><h3 id="以下20crmnti合金渗碳钢制造的汽车变速齿轮工艺路线说明各热处理工艺的名称和作用">13、以下20CrMnTi合金渗碳钢制造的汽车变速齿轮工艺路线，说明各热处理工艺的名称和作用</h3><p>锻造→（热处理1）→加工齿轮→渗碳→（热处理2）→（热处理3）→喷丸→磨齿（精磨）</p><blockquote><p><strong>热处理1</strong>：</p><p>正火，改善切削加工性能，为后续加工做准备</p><p><strong>热处理2、3</strong>：</p><p>淬火、低温回火，提高材料的硬度强度和耐磨性</p></blockquote><h3 id="以下是连杆零件的加工工艺路线说明各热处理工艺的名称和作用">14、以下是连杆零件的加工工艺路线，说明各热处理工艺的名称和作用</h3><p>下料→锻造→（热处理1）→机加工→（热处理2）→检验硬度→加工螺纹→装配</p><blockquote><p><strong>热处理1</strong>：</p><p>正火，改善切削加工性能</p><p><strong>热处理2</strong>；</p><p>调质处理，提高工件的韧性和结构强度</p></blockquote><h3 id="简述常用工程塑料的种类性能特点和应用">15、简述常用工程塑料的种类、性能特点和应用</h3><blockquote><p>PVC：化学稳定性高，抗老化好，耐热差</p><p>PE：化学稳定性好，耐水性好，低温韧性大，强度不高</p><p>PP：质轻，耐热性，刚性，抗水性好， 低温脆性高</p><p>PA：强度和韧性好，而蚀性好，导热性差</p><p>PMMA：透光性好，耐热性和抗老化性好，加工方便， 耐磨</p><p>ABS：化学稳定性和绝缘性好，易于加工，长期使用易起层</p></blockquote><h3 id="高分子材料的力学性能有哪些">16、高分子材料的力学性能有哪些？</h3><p>相饮于金属，高分子材科:</p><ol type="1"><li>低强度和较高的比强度</li><li>高弹性和低弹性模量</li><li>粘弹性</li><li>高耐害性.</li></ol><h1 id="fe-fe3c合金相图">Fe-Fe<sub>3</sub>C合金相图</h1><h2 id="组元">组元</h2><ul><li><strong>Fe</strong>:<ul><li>912°C以下，α-Fe，体心立方结构</li><li>912°C ~ 1394°C，γ-Fe，面心立方结构</li><li>1394°C以上，δ-Fe，体心立方结构</li></ul></li><li><strong>Fe<sub>3</sub>C，渗碳体</strong>：含碳量6.69%</li><li><strong>C</strong></li><li><strong>铁素体</strong>：C在α-Fe中的间隙固溶物，记作α或F</li><li><strong>奥氏体</strong>：C在γ-Fe中的间隙固溶物，记作γ或A</li><li><strong>δ相</strong>：C在δ-Fe中的间隙固溶物，记又称为高温铁素体</li><li><strong>石墨</strong>：游离的碳，记作G</li><li><strong>液相</strong>：记作L</li></ul><h2 id="相图">相图</h2><figure><img src="/images/posts/FeC/FE_C.png" alt="数值以下面的为准" /><figcaption aria-hidden="true">数值以下面的为准</figcaption></figure><h3 id="相区">相区</h3><ul><li><strong>单相区</strong><ul><li>L</li><li>δ</li><li>γ（A）</li><li>α（F）</li><li>Fe<sub>3</sub>C</li></ul></li><li><strong>双相区</strong><ul><li>L+δ</li><li>L+γ（A）</li><li>L+Fe<sub>3</sub>C</li><li>δ+γ（A）</li><li>γ（A）+Fe<sub>3</sub>C</li><li>α（F）+Fe<sub>3</sub>C</li><li>γ（A）+α（F）</li></ul></li><li><strong>三相区</strong><ul><li><strong>HIB线</strong>：包晶反应线，L+δ+γ（A），1495°C</li><li><strong>ECF线</strong>：共晶反应线，L+γ（A）+Fe<sub>3</sub>C，1148°C</li><li><strong>PSK线</strong>：共析反应线，γ（A）+α（F）+Fe<sub>3</sub>C，727°C</li></ul></li><li><strong>三根线</strong><ul><li>PSK：<span class="math inline">\(A_{1}\)</span></li><li>GS：<span class="math inline">\(A_{3}\)</span></li><li>ES：<span class="math inline">\(A_{cm}\)</span></li></ul></li></ul><h3 id="恒温转变">恒温转变</h3><p><span class="math display">\[L_{0.53}+\delta_{0.09} \stackrel{1495^{\circ} \mathrm{C}}{\longrightarrow} \gamma_{0.17}\]</span></p><p><strong>包晶反应</strong>，其中下标为含碳量。 <span class="math display">\[L_{4.3} \stackrel{1148^{\circ} \mathrm{C}}{\longrightarrow} \gamma_{2.11}+F e_{3} C\]</span> <strong>共晶反应</strong>，其产物为<strong>莱氏体</strong>，记为Ld。 <span class="math display">\[\gamma_{0.77} \stackrel{727^{\circ} \mathrm{C}}{\longrightarrow} \alpha_{0.0218}+F e_{3} C\]</span> <strong>共析反应</strong>，其产物为<strong>珠光体</strong>，记为P。</p><h3 id="各点的意义">各点的意义</h3><table><thead><tr class="header"><th style="text-align: center;">特性点</th><th style="text-align: center;">温度/°C</th><th style="text-align: center;">含碳量/%</th><th style="text-align: center;">含义</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">A</td><td style="text-align: center;">1538</td><td style="text-align: center;">0</td><td style="text-align: center;">铁的熔点</td></tr><tr class="even"><td style="text-align: center;">B</td><td style="text-align: center;">1495</td><td style="text-align: center;">0.53</td><td style="text-align: center;">包晶反应时液体的组成成分</td></tr><tr class="odd"><td style="text-align: center;">C</td><td style="text-align: center;">1148</td><td style="text-align: center;">4.3</td><td style="text-align: center;"><strong><em>共晶点</em></strong></td></tr><tr class="even"><td style="text-align: center;">D</td><td style="text-align: center;">1227</td><td style="text-align: center;">6.69</td><td style="text-align: center;">Fe<sub>3</sub>C的熔点</td></tr><tr class="odd"><td style="text-align: center;">E</td><td style="text-align: center;">1148</td><td style="text-align: center;">2.11</td><td style="text-align: center;">γ（A）中的最大溶碳量</td></tr><tr class="even"><td style="text-align: center;">F</td><td style="text-align: center;">1148</td><td style="text-align: center;">6.69</td><td style="text-align: center;">Fe<sub>3</sub>C的成分</td></tr><tr class="odd"><td style="text-align: center;">G</td><td style="text-align: center;">912</td><td style="text-align: center;">0</td><td style="text-align: center;">α-Fe和γ-Fe的同素异构转变点</td></tr><tr class="even"><td style="text-align: center;">H</td><td style="text-align: center;">1495</td><td style="text-align: center;">0.09</td><td style="text-align: center;">δ固溶体中的最大溶碳量</td></tr><tr class="odd"><td style="text-align: center;">I</td><td style="text-align: center;">1495</td><td style="text-align: center;">0.17</td><td style="text-align: center;"><strong><em>包晶点</em></strong></td></tr><tr class="even"><td style="text-align: center;">K</td><td style="text-align: center;">727</td><td style="text-align: center;">6.69</td><td style="text-align: center;">Fe<sub>3</sub>C的成分</td></tr><tr class="odd"><td style="text-align: center;">N</td><td style="text-align: center;">1349</td><td style="text-align: center;">0</td><td style="text-align: center;">δ-Fe和γ-Fe的同素异构转变点</td></tr><tr class="even"><td style="text-align: center;">P</td><td style="text-align: center;">727</td><td style="text-align: center;">0.0218</td><td style="text-align: center;">α（F）中的最大溶碳量</td></tr><tr class="odd"><td style="text-align: center;">S</td><td style="text-align: center;">727</td><td style="text-align: center;">0.77</td><td style="text-align: center;"><strong><em>共析点</em></strong></td></tr><tr class="even"><td style="text-align: center;">Q</td><td style="text-align: center;">室温</td><td style="text-align: center;">0.0008</td><td style="text-align: center;">室温时α（F）中的溶碳量</td></tr></tbody></table><h2 id="计算">计算</h2><h3 id="室温下w_c0.2的钢中珠光体和铁素体相对量">1、室温下<span class="math inline">\(w_{c}=0.2\%\)</span>的钢中珠光体和铁素体相对量</h3><p><span class="math display">\[Q_{F}=\frac{0.77-0.2}{0.77-0.0217} \approx 77.02\%\]</span></p><p><span class="math display">\[Q_{P}=1-Q_{F} \approx 22.98\%\]</span></p><h3 id="室温下w_c1.2的钢中珠光体和二次渗碳体的相对量">2、室温下<span class="math inline">\(w_{c}=1.2\%\)</span>的钢中珠光体和二次渗碳体的相对量</h3><p><span class="math display">\[Q_{Fe_{3}C_{Ⅱ}}=\frac{1.2-0.77}{6.69-0.77} \approx 7.3\%\]</span> <span class="math display">\[Q_{P} = 1- Q_{Fe_{3}C_{Ⅱ}} \approx 92.7\%\]</span></p><h1 id="钢的冷却曲线">钢的冷却曲线</h1><figure><img src="/images/posts/FeC/TTT.jpeg" alt="共析钢" /><figcaption aria-hidden="true">共析钢</figcaption></figure><h2 id="三种产物转变">三种产物转变</h2><ul><li><p><strong>珠光体型转变</strong></p><ul><li><span class="math inline">\(A_{1}\)</span> ~ 650℃ <strong>珠光体（P）</strong> 粗片状珠光体</li><li>650℃ ~ 600℃ <strong>索氏体（S）</strong> 细片状珠光体</li><li>600℃ ~ 550℃ <strong>屈式体（T）</strong> 极细片状珠光体</li></ul><p>片间距越小、强度硬度越大、塑性韧性越大</p></li><li><p><strong>贝氏体型转变</strong></p><ul><li>550℃ ~ 350 ℃ <strong>上贝氏体（</strong><span class="math inline">\(B_{上}\)</span><strong>）</strong></li><li>350℃ ~ 230℃ <strong>下贝氏体（</strong><span class="math inline">\(B_{下}\)</span><strong>）</strong></li></ul></li><li><p>马氏体型转变</p><ul><li>&lt; 230℃ <strong>马氏体（M）</strong> 碳在<span class="math inline">\(\alpha-Fe\)</span>中的过饱和固溶体</li></ul></li></ul><h2 id="亚共析钢和过共析钢的ttt图">亚共析钢和过共析钢的TTT图</h2><p><img src="/images/posts/FeC/TTT2.jpg" /></p><ul><li>亚共析钢多一条奥氏体——铁素体转变线</li><li>过共析钢多一条奥氏体——渗碳体转变线</li><li>共析钢的连续转变中<strong>没有</strong>贝氏体转变</li></ul>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>期末复习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>期末复习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux常用指令</title>
    <link href="/2018/02/27/2018-02-27-linux/"/>
    <url>/2018/02/27/2018-02-27-linux/</url>
    
    <content type="html"><![CDATA[<h1 id="linux常用指令">Linux常用指令</h1><h1 id="概论">概论</h1><p>Linux的发行版本可以大体分为两类，一类是商业公司维护的发行版本，一类是社区组织维护的发行版本</p><p>前者以著名的Redhat（RHEL）为代表，后者以Debian为代表。</p><p><strong>Redhat</strong>，应该称为Redhat系列，包括RHEL(Redhat Enterprise Linux，也就是所谓的Redhat Advance Server，收费版本)、Fedora Core(由原来的Redhat桌面版本发展而来，免费版本)、CentOS(RHEL的社区克隆版本，免费)。Redhat应该说是在国内使用人群最多的Linux版本，甚至有人将Redhat等同于Linux，而有些老鸟更是只用这一个版本的Linux。所以这个版本的特点就是使用人群数量大，资料非常多，言下之意就是如果你有什么不明白的地方，很容易找到人来问，而且网上的一般Linux教程都是以Redhat为例来讲解的。Redhat系列的包管理方式采用的是基于RPM包的YUM包管理方式，包分发方式是编译好的二进制文件。稳定性方面RHEL和CentOS的稳定性非常好，适合于服务器使用，但是Fedora Core的稳定性较差，最好只用于桌面应用。</p><p><strong>Debian</strong>，或者称Debian系列，包括Debian和Ubuntu等。Debian是社区类Linux的典范，是迄今为止最遵循GNU规范的Linux系统。Debian最早由Ian Murdock于1993年创建，分为三个版本分支（branch）： stable, testing 和 unstable。其中，unstable为最新的测试版本，其中包括最新的软件包，但是也有相对较多的bug，适合桌面用户。testing的版本都经 过unstable中的测试，相对较为稳定，也支持了不少新技术（比如SMP等）。而stable一般只用于服务器，上面的软件包大部分都比较过时，但是 稳定和安全性都非常的高。Debian最具特色的是apt-get / dpkg包管理方式，其实Redhat的YUM也是在模仿Debian的APT方式，但在二进制文件发行方式中，APT应该是最好的了。Debian的资料也很丰富，有很多支持的社区，有问题求教也有地方可去:)</p><p><strong>Arch Linux</strong> ，不同于以上两种，属于一种比较“硬核”的Linux系统，是一款基于x86-64架构的 Linux发行版。支持社区参与。系统设计以KISS原则（保持简单和愚蠢）为总体指导原则，注重代码正确、优雅和极简主义，期待用户能够愿意去理解系统的操作。 Arch Linux 系统安装、删除和更新软件的软件包管理器叫做 pacman 。</p><p><del><strong>以上文字摘抄自网络，知道就行了。</strong></del></p><h1 id="linux目录文件结构">Linux目录文件结构</h1><figure><img src="\images\posts\linux\jiegou.png" alt="jiegou" /><figcaption aria-hidden="true">jiegou</figcaption></figure><ul><li>/：根目录，一般根目录下只存放目录，不要存放文件，/etc、/bin、/dev、/lib、/sbin应该和根目录放置在一个分区中</li><li>/bin:/usr/bin:可执行二进制文件的目录，如常用的命令ls、tar、mv、cat等。</li><li>/boot：放置linux系统启动时用到的一些文件。/boot/vmlinuz为linux的内核文件，以及/boot/gurb。建议单独分区，分区大小100M即可</li><li>/dev：存放linux系统下的设备文件，访问该目录下某个文件，相当于访问某个设备，常用的是挂载光驱mount /dev/cdrom /mnt。</li><li>/etc：系统配置文件存放的目录，不建议在此目录下存放可执行文件，重要的配置文件有/etc/inittab、/etc/fstab、/etc/init.d、/etc/X11、/etc/sysconfig、/etc/xinetd.d修改配置文件之前记得备份。 注：/etc/X11存放与x windows有关的设置。</li><li>/home：系统默认的用户家目录，新增用户账号时，用户的家目录都存放在此目录下，<sub>表示当前用户的家目录，</sub>test表示用户test的家目录。建议单独分区，并设置较大的磁盘空间，方便用户存放数据</li><li>/lib:/usr/lib:/usr/local/lib：系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助，比较重要的目录为/lib/modules。</li><li>/lost+fount：系统异常产生错误时，会将一些遗失的片段放置于此目录下，通常这个目录会自动出现在装置目录下。如加载硬盘于/disk 中，此目录下就会自动产生目录/disk/lost+found</li><li>/mnt:/media：光盘默认挂载点，通常光盘挂载于/mnt/cdrom下，也不一定，可以选择任意位置进行挂载。</li><li>/opt：给主机额外安装软件所摆放的目录。如：FC4使用的Fedora 社群开发软件，如果想要自行安装新的KDE 桌面软件，可以将该软件安装在该目录下。以前的 Linux 系统中，习惯放置在 /usr/local 目录下</li><li>/proc：此目录的数据都在内存中，如系统核心，外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间，比较重要的目录有/proc/cpuinfo、/proc/interrupts、/proc/dma、/proc/ioports、/proc/net/*等</li><li>/root：系统管理员root的家目录，系统第一个启动的分区为/，所以最好将/root和/放置在一个分区下。</li><li>/sbin:/usr/sbin:/usr/local/sbin：放置系统管理员使用的可执行命令，如fdisk、shutdown、mount等。与/bin不同的是，这几个目录是给系统管理员root使用的命令，一般用户只能"查看"而不能设置和使用。</li><li>/tmp：一般用户或正在执行的程序临时存放文件的目录,任何人都可以访问,重要数据不可放置在此目录下</li><li>/srv：服务启动之后需要访问的数据目录，如www服务需要访问的网页数据存放在/srv/www内</li><li>/usr：应用程序存放目录，/usr/bin存放应用程序，/usr/share存放共享数据，/usr/lib存放不能直接运行的，却是许多程序运行所必需的一些函数库文件。/usr/local:存放软件升级包。/usr/share/doc:系统说明文件存放目录。/usr/share/man: 程序说明文件存放目录，使用 man ls时会查询/usr/share/man/man1/ls.1.gz的内容建议单独分区，设置较大的磁盘空间</li><li>/var：放置系统执行过程中经常变化的文件，如随时更改的日志文件/var/log，/var/log/message：所有的登录文件存放目录，/var/spool/mail：邮件存放的目录，/var/run:程序或服务启动后，其PID存放在该目录下。建议单独分区，设置较大的磁盘空间</li></ul><p>以上仍然摘自网络，大体了解各个目录的意义即可。</p><h1 id="指令">指令</h1><h2 id="文件文件夹相关">文件/文件夹相关</h2><ul><li>ls: 列出目录</li><li>cd：切换目录</li><li>pwd：显示目前的目录</li><li>mkdir：创建一个新的目录</li><li>rmdir：删除一个空的目录</li><li>cp: 复制文件或目录</li><li>mv：移动文件或目录</li><li>rm: 移除文件或目录</li></ul><h3 id="ls列出目录">ls(列出目录)</h3><p><strong>语法</strong> <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">ls<span class="hljs-selector-attr">[参数]</span>(文件)<br></code></pre></td></tr></table></figure> <strong>选项</strong></p><blockquote><p>-a：显示所有档案及目录（ls默认将档案名或目录名称为“.”的视为隐藏，不会列出）；<br />-C：多列显示输出结果。这是默认选项；<br />-c：与“-lt”选项连用时，按照文件状态时间排序输出目录内容，排序的依据是文件的索引节点中的ctime字段。与“-l”选项连用时，则排序的一句是文件的状态改变时间；<br />-l：以长格式显示目录下的内容列表。输出的信息从左到右依次包括文件名，文件类型、权限模式、硬连接数、所有者、组、文件大小和文件的最后修改时间等；<br />--full-time：列出完整的日期与时间；<br />--color={never,auto,always}：是否使用不同的颜色高亮显示不同类型</p></blockquote><p><strong>参数</strong></p><p>目录：指定要显示列表的目录，也可以是具体的文件。</p><p><strong>实例</strong></p><p>显示根目录下的所有文件(含属性与隐藏档)： <figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@aye10032</span> ~]<span class="hljs-meta"># ls -al</span><br></code></pre></td></tr></table></figure></p><h3 id="cd-切换目录">cd (切换目录)</h3><p><strong>语法</strong><br /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> (相对路径或绝对路径)<br></code></pre></td></tr></table></figure> <strong>两种路径</strong></p><p>比如我们现在有这么一个test文件夹，它的路径是 <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/root/</span>nhjckx<span class="hljs-regexp">/aye10032/</span>test<br></code></pre></td></tr></table></figure></p><p>那么这个/root/nhjckx/aye10032/test就是该目录的绝对路径<br />但是如果此时我已经在/root/nhjckx/aye10032目录下了，那么也可以用<code>cd ./test</code>来进入test目录。<br />现在再假设我们在/root/nhjckx/aye10032目录下还有一个文件夹test01，那么同理，他的绝对路径就是 <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/root/</span>nhjckx<span class="hljs-regexp">/aye10032/</span>test01<br></code></pre></td></tr></table></figure> 此时如果我们在/root/nhjckx/aye10032目录下，同样可以用<code>cd ./test01</code>命令来进入test01这个目录。但是，如果我们此时所处的目录是/root/nhjckx/aye10032/test呢？此时我们有两种选择，一种是使用绝对路径，另外一种是使用相对路径： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ../test01<br></code></pre></td></tr></table></figure> 同样也可以跳转到test01目录。</p><blockquote><p>总结： &gt; 1.绝对路径必定由“/”开头<br />&gt; 2.绝对路径是为档案/文件的所在位置做指向<br />&gt; 3.在任何时候，都可以用绝对路径来找到我们想要的文件</p><blockquote><p>1.相对路径不由“/”开头<br />2.相对路径是相对于现在目前所在的位置，为目的地指向<br />3.相对路径只对当前所在目录有效,<code>./</code>代表当前路径，<code>../</code>代表上一层目录</p></blockquote></blockquote><p><strong>其他常用用法</strong></p><blockquote><p>cd 进入用户主目录；<br />cd ~ 进入用户主目录；<br />cd - 返回进入此目录之前所在的目录；<br />cd .. 返回上级目录<br />cd ../.. 返回上两级目录</p></blockquote><h3 id="pwd-显示目前所在的目录">pwd (显示目前所在的目录)</h3><p>这个指令没有什么好说的，就是显示当前目录的作用：<br /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@aye10032 <span class="hljs-built_in">test</span>]# <span class="hljs-built_in">pwd</span><br>/root/test<br></code></pre></td></tr></table></figure> ### mkdir (创建新目录)</p><p><strong>语法</strong> <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">mkdir <span class="hljs-selector-attr">[参数]</span>(目录名称)<br></code></pre></td></tr></table></figure></p><p><strong>参数</strong></p><blockquote><p>-m 建立目录的同时设置目录的权限； -p 若所要建立目录的上层目录目前尚未建立，则会一并建立上层目录；</p></blockquote><ul><li>关于权限的问题，我会放在后面再讲。</li><li>当创建多个目录时，目录名之间使用空格隔开。</li></ul><p><strong>实例</strong> 在目录/home下建立目录nhjckx和其下的子目录test，并且只有文件主有读、写和执行权限，其他人无权访问 <figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@aye10032</span> ~]<span class="hljs-meta"># mkdir -m-p 700 /home/nhjckx/test</span><br></code></pre></td></tr></table></figure></p><h3 id="rmdir-删除空的目录">rmdir (删除空的目录)</h3><p><strong>语法</strong> <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">rmdir <span class="hljs-selector-attr">[参数]</span> (目录名称)<br></code></pre></td></tr></table></figure> <strong>参数</strong></p><blockquote><p>-p： 删除指定目录后，若该目录的上层目录已变成空目录，则将其一并删除；<br />-v： 显示命令的详细执行过程； - 当删除多个空目录时，目录名之间使用空格隔开。</p></blockquote><p><strong>实例</strong><br />删除子目录test和其父目录nhjckx <figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@aye10032</span> ~]<span class="hljs-meta"># cd /home    </span><br>[root<span class="hljs-symbol">@aye10032</span> home]<span class="hljs-meta"># rmdir -p nhjckx/test</span><br></code></pre></td></tr></table></figure></p><h3 id="cp-复制文件或目录">cp (复制文件或目录)</h3><p><strong>语法</strong><br /><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">cp <span class="hljs-selector-attr">[参数]</span> (source) (destination)      <br>cp <span class="hljs-selector-attr">[参数]</span> source1 source2 source3 .... directory<br></code></pre></td></tr></table></figure> <strong>参数</strong></p><blockquote><p>-d：当复制符号连接时，把目标文件或目录也建立为符号连接，并指向与源文件或目录连接的原始文件或目录；<br />-f：强行复制文件或目录，不论目标文件或目录是否已存在；<br />-i：覆盖既有文件之前先询问用户；<br />-l：对源文件建立硬连接，而非复制文件；<br />-p：保留源文件或目录的属性；<br />-R/r：递归处理，将指定目录下的所有文件与子目录一并处理；<br />-s：对源文件建立符号连接，而非复制文件；<br />-u：使用这项参数后只会在源文件的更改时间较目标文件更新时或是名称相互对应的目标文件并不存在时，才复制文件；<br />-S：在备份文件时，用指定的后缀“SUFFIX”代替文件的默认后缀；<br />-b：覆盖已存在的文件目标前将目标文件备份；<br />-v：详细显示命令执行的操作。</p></blockquote><p><strong>实例</strong> 将<code>/home/test</code>下名为test的文本文档复制到<code>/home/nhjckx</code>目录下并重命名为test01： <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">[root<span class="hljs-meta">@aye10032</span> <span class="hljs-operator">~</span>]# cp <span class="hljs-regexp">/home/</span>test<span class="hljs-regexp">/test.txt /</span>home<span class="hljs-regexp">/hnjckx/</span>test01.txt<br></code></pre></td></tr></table></figure> <strong>注意，cp指令并不能新建文件夹，所以复制到的目标文件夹必须存在。同时，如果进行操作的文件或文件夹没有<em>权限</em>，则也会报错</strong></p><h3 id="mv-移动文件与目录或修改名称">mv (移动文件与目录，或修改名称)</h3><p><strong>语法</strong> <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">mv <span class="hljs-selector-attr">[参数]</span> (source) (destination)<br>mv <span class="hljs-selector-attr">[参数]</span> source1 source2 source3 .... directory<br></code></pre></td></tr></table></figure></p><p><strong>参数</strong><br />&gt; -f ：如果目标文件已经存在，不会询问而直接覆盖；<br />&gt; -i ：若目标文件 (destination) 已经存在时，会询问是否覆盖;<br />&gt; -u ：若目标文件已经存在，且 source 比较新，才会升级 (update);</p><p><strong>实例</strong><br />将<code>/home/test</code>目录下的所有文件(用*表示)移动到当前目录下(用.表示)： <figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@aye10032</span> ~]<span class="hljs-meta"># cp /home/test/* .</span><br></code></pre></td></tr></table></figure></p><h3 id="rm-移除文件或目录">rm (移除文件或目录)</h3><p><strong>语法</strong> <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">rm <span class="hljs-selector-attr">[参数]</span>(文件或目录)<br></code></pre></td></tr></table></figure></p><p><strong>参数</strong><br />&gt; -f ：删除时忽略不存在的文件，不会出现警告信息； &gt; -i ：互动模式，在删除前会询问使用者是否动作； &gt; -r ：递归删除；</p><p><strong>实例</strong></p><p>删除<code>/home/test</code>下名为test的文本文档： <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">[root@aye10032 ~]# <span class="hljs-keyword">rm</span> -i /home/<span class="hljs-keyword">test</span>/<span class="hljs-keyword">test</span>.txt<br><span class="hljs-keyword">rm</span>: remove regular <span class="hljs-keyword">file</span> `<span class="hljs-keyword">test</span>.txt&#x27;? y<br></code></pre></td></tr></table></figure></p><p>删除整个test目录： <figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@aye10032</span> ~]<span class="hljs-meta"># rm -rf /home/test</span><br></code></pre></td></tr></table></figure></p><p>数据无价，删除请谨慎！ <br><br><br><br></p><h2 id="文件属性相关">文件属性相关</h2><blockquote><h4 id="文件属性">文件属性</h4><p>Linux系统是一种典型的多用户系统。不同的用户处于不同的地位，拥有不同的权限，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p><p>在Linux中我们可以使用ls –l命令来显示一个文件的属性以及文件所属的用户和组，如： <figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@aye10032 aye10032]<span class="hljs-comment"># ls -l     </span><br>total 29544<br>-rw-r--r--.<span class="hljs-number"> 1 </span>root root       <span class="hljs-number"> 2 </span>Feb<span class="hljs-number"> 26 </span>19:23 banned-ips.json<br>-rw-r--r--.<span class="hljs-number"> 1 </span>root root       <span class="hljs-number"> 2 </span>Feb<span class="hljs-number"> 26 </span>19:23 banned-players.json<br>-rw-r--r--.<span class="hljs-number"> 1 </span>root root     <span class="hljs-number"> 180 </span>Feb<span class="hljs-number"> 23 </span>08:47 eula.txt<br>drwxr-xr-x.<span class="hljs-number"> 2 </span>root root     <span class="hljs-number"> 213 </span>Feb<span class="hljs-number"> 26 </span>19:23 logs<br>-rw-r--r--.<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 30222121 </span>Feb<span class="hljs-number"> 23 </span>08:42 minecraft_server.1.12.2.jar<br>-rw-r--r--.<span class="hljs-number"> 1 </span>root root       <span class="hljs-number"> 2 </span>Feb<span class="hljs-number"> 26 </span>19:23 ops.json<br>-rw-r--r--.<span class="hljs-number"> 1 </span>root root     <span class="hljs-number"> 753 </span>Feb<span class="hljs-number"> 26 </span>19:23 server.properties<br>-rw-r--r--.<span class="hljs-number"> 1 </span>root root       <span class="hljs-number"> 2 </span>Feb<span class="hljs-number"> 26 </span>19:23 usercache.json<br>-rw-r--r--.<span class="hljs-number"> 1 </span>root root       <span class="hljs-number"> 2 </span>Feb<span class="hljs-number"> 23 </span>08:47 whitelist.json<br>drwxr-xr-x.<span class="hljs-number"> 7 </span>root root     <span class="hljs-number"> 133 </span>Feb<span class="hljs-number"> 26 </span>19:24 world<br></code></pre></td></tr></table></figure> 我们就以以上我自己的一个文件夹为例来谈一谈，输出的信息从左到右依次包括文件属性、文件硬连接数、所有者、组、文件大小、文件的最后修改时间和文件名，其他的都比较好理解，这里就特别讲一下表示文件属性的三个三元组。 <img src="\images\posts\linux\wenjianshuxing.png" alt="wenjian" /><br />这里一共有十个字符，分为四组，其中第一个字符代表这个文件是目录、文件或链接文件等等。</p><ul><li>当为[ d ]则是目录</li><li>当为[ - ]则是文件；</li><li>若是[ l ]则表示为链接文档(link file)；</li><li>若是[ b ]则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</li><li>若是[ c ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</li></ul><p>接下来的字符中，以三个为一组，且均为[ rwx ] 的三个参数的组合。其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。这三个三元字符组中第一个三元字符组代表文件所有者的权限，第二个代表文件的组的权限，第三个代表所有其他用户的权限。每个字符组都是按照[rwx]的顺序排列，如果该权限组有此权限，则输出相应的字母，如果没有，则输出"-"。<br />比如如下信息：<br /><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">drwxr</span>-xr-x. <span class="hljs-number">7</span> root root      <span class="hljs-number">133</span> Feb <span class="hljs-number">26</span> <span class="hljs-number">19</span>:<span class="hljs-number">24</span> world<br></code></pre></td></tr></table></figure> 表现的意思就是有一个名为"world"的目录(第一位是d，表示目录)，它对于所有者、也就是建立这个文件夹的用户，拥有读写以及可执行权限(rwx三个字母都有)；对于和所有者处于同一<strong>组</strong>的用户，拥有可读和执行权限，但是没有写入权限；对于其他用户，也是拥有除了写入权限的其他两个权限。在看懂这些之后，我们就可以继续接下来的学习了。</p></blockquote><h3 id="chgrp更改文件属组">chgrp(更改文件属组)</h3><p><strong>语法</strong><br /><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">chgrp <span class="hljs-selector-attr">[参数]</span> (属组名)(文件名)<br></code></pre></td></tr></table></figure></p><p><strong>参数</strong> &gt; -R：递归更改文件属组</p><p><strong>实例</strong><br />将<code>/home/test</code>及其子目录下的所有文件的用户组改为mrquin： <figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@aye10032</span> ~]<span class="hljs-meta"># chgrp -R mrquin /home/test</span><br></code></pre></td></tr></table></figure></p><h3 id="chown更改文件属主或同时更改文件属组">chown(更改文件属主或同时更改文件属组)</h3><p><strong>语法</strong> <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">chown <span class="hljs-selector-attr">[参数]</span> (属主名)(文件名)<br>chown <span class="hljs-selector-attr">[参数]</span> (属主名:属组名)(文件名)<br></code></pre></td></tr></table></figure></p><p><strong>参数</strong></p><blockquote><p>-R：递归更改文件属主</p></blockquote><p><strong>实例</strong> 将<code>/home/test</code>及其子目录下的所有文件的拥有者改为ywwuyi：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@aye10032</span> ~]<span class="hljs-meta"># chown -R ywwuyi /home/test</span><br></code></pre></td></tr></table></figure><p>再将其所有者和用户组改回为mrquin： <figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@aye10032</span> ~]<span class="hljs-meta"># chown -R mrquin:mrquin /home/test</span><br></code></pre></td></tr></table></figure></p><h3 id="chmod更改文件9个属性">chmod(更改文件9个属性)</h3><p><strong>语法</strong><br /><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">chmod <span class="hljs-selector-attr">[参数]</span> (属性) (文件或目录)<br></code></pre></td></tr></table></figure></p><p><strong>属性：</strong> &gt; Linux文件属性有两种设置方法，一种是数字，一种是符号。<br />&gt; Linux文件的基本权限就有九个，分别是[owner/group/others]三种身份,各有自己的[read/write/execute]权限。<br />&gt; 文件的权限字符为：『-rwxrwxrwx』,其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下： &gt; - r : 4 &gt; - w : 2 &gt; - x : 1 &gt; &gt; 每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为： [-rwxrwx---] 分数就是：<br />&gt; - owner = rwx = 4+2+1 = 7 &gt; - group = rwx = 4+2+1 = 7 &gt; - others= --- = 0+0+0 = 0<br />&gt; 这样我们就可以得出文件权限的数字表示了</p><p>除了使用数字表达之外，我们也可以使用字符来对用户文件进行操作。我们前面已经将讲过，在代表文件的9个字母中分别代表：用户(user)；组(group)和其他用户(others) 的权限，则我们就可以用u，g，o这三个字母来表示三种身份的权限。具体使用时的语法为<code>chmod (u=rwx,g=rx,o=r) [文件名]</code>类似的语法。</p><p><strong>实例</strong><br />将<code>/home/test/test.txt</code>文件权限设置为<code>rwxrwxrwx</code>(两种写法)： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@aye10032 ~]<span class="hljs-built_in">chmod</span> 777 /home/test/test.txt<br>[root@aye10032 ~]<span class="hljs-built_in">chmod</span> u=rwx,g=rwx,o=rwx /home/test/test.txt<br></code></pre></td></tr></table></figure> 将上面文件的可执行权限(x)撤销：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[root@aye10032 ~]</span>chmod <span class="hljs-selector-tag">a</span>-<span class="hljs-attribute">x</span> /home/test/test<span class="hljs-selector-class">.txt</span><br></code></pre></td></tr></table></figure><h2 id="用户和用户组相关">用户和用户组相关</h2><p>上文我们讲到了文件的属性当中多次提到了<strong>用户</strong>和<strong>组</strong>这两个概念。对于大部分平常惯用Windows系统的同学们而言，这个概念可能会一时摸不着头脑。这里就先简单提一下Linux系统</p><blockquote><p>TIPS:</p><p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p><p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p><p>每个用户账号都拥有一个惟一的用户名和各自的口令。</p><p>用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。</p></blockquote><h3 id="useradd添加用户">useradd(添加用户)</h3><p><strong>语法：</strong></p><p><code>useradd [参数] (用户名称)</code></p><p><strong>参数</strong></p><blockquote><ul><li>-c 指定一段注释性描述</li><li>-d 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录</li><li>-g 指定用户所属的用户组</li></ul></blockquote><p><strong>实例：</strong></p><p>新建用户mrquin，该用户属于用户组mole，同时生成同名的用户主文件夹。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[root@aye10032 ~]</span>useradd -<span class="hljs-selector-tag">g</span> mole –d /usr/mrquin -m mrquin<br></code></pre></td></tr></table></figure><h3 id="userdel删除用户">userdel(删除用户)</h3><p><strong>语法：</strong></p><p><code>userdel [参数] (用户名称)</code></p><p><strong>参数：</strong></p><blockquote><ul><li>-r 将用户和他的主目录一起删除</li></ul></blockquote><p><strong>实例：</strong></p><p>将用户mrquin连同主目录一起删除：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[root@aye10032 ~]</span>userdel -<span class="hljs-attribute">r</span> mrquin<br></code></pre></td></tr></table></figure><h3 id="usermod修改用户属性">usermod(修改用户属性)</h3><p><strong>语法：</strong></p><p><code>usermod [参数] (用户名称)</code></p><p><strong>参数：</strong></p><p>此处的参数与<code>useradd</code>指令的参数完全一致，不再描述。</p><p><strong>实例：</strong></p><p>将用户mrquin的所属用户组改为rua：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[root@aye10032 ~]</span>usermod -<span class="hljs-selector-tag">g</span> rua mrquin<br></code></pre></td></tr></table></figure><h3 id="groupadd新建用户组">groupadd(新建用户组)</h3><p>语法：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">groupadd <span class="hljs-selector-attr">[参数]</span> (用户组名称)<br></code></pre></td></tr></table></figure><p>参数：</p><blockquote><ul><li>-g GID 指定新用户组的组识别号</li><li>-o 新用户组的GID可以与已有用户组相同（一般与-g同时使用）</li></ul></blockquote><p>实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@aye10032 ~]groupadd -g-o 144 mrquin<br></code></pre></td></tr></table></figure><h1 id="常用软件">常用软件</h1><p>对于Linux系统来说，有一些常用软件我这里也推荐一下：</p><h2 id="文本编辑器">文本编辑器</h2><h3 id="vim">VIM</h3><p>vim是一款轻量化但是功能强大的文本编辑器，这里只讲一些基础的操作。一般来说，当你装了一个新的Linux系统，他可能没有安装nano，甚至可能没有安装vim，但是肯定可以使用vi指令。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>计算机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown闲谈</title>
    <link href="/2018/01/20/2018-01-20-markdown/"/>
    <url>/2018/01/20/2018-01-20-markdown/</url>
    
    <content type="html"><![CDATA[<h1 id="markdown是什么我为什么要选择markdown">Markdown是什么，我为什么要选择Markdown</h1><p><del>蠢货，自己百度去。</del><br />Markdown是一种可以使用普通文本编辑器编写的<strong>标记语言</strong>，通过简单的标记语法，它可以使普通文本内容具有一定的格式。<br />所谓的标记语言，指的是讲文本的<strong>内容</strong>和<strong>格式</strong>一起记录在文本信息中的编码格式，比较有名的标记语言有HTML，XML(office中的docx、xlsx、pptx都是基于XML)，以及我们几天要讲的Markdown。<br />只说概念是没有用的，那么我们为什么要选择Markdown呢？在这之前，先来看一下Markdown的写作效果吧。下面是我之前一篇博客的截图，左边是我实际写的东西，右边是预览： <img src="/images/posts/markdown/1.png" /><br />嗯，可以看出来一些Markdown的特点了吧(<del>看不出来的都叉出去</del>),是的，与常用的word文档不同，文本的格式，甚至包括段落都是直接以特定的字符串来表现出来的，有点类似<a href="https://baike.baidu.com/item/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6">转义字符</a>，但是还是有一定区别的。这个以后再讲。而这也正是markdown的比较方便的所在。它既可以表现出文字、段落格式，又是一个轻量化的文本编辑格式，打开读取都非常的迅速，几乎不占内存。好了，废话一堆，讲了这么多还是直接进入正题吧。</p><hr /><h1 id="用什么来编辑markdown">用什么来编辑Markdown</h1><p>我这里推荐<a href="https://code.visualstudio.com/Download">vscode</a>和<a href="https://typora.io/">typora</a></p><p>其中前者是一个经典的非常好用的轻量级编辑器，支持各种代码的编辑。而后者是一个Markdown专用编辑器，免费，轻量级，而且功能非常之全面，炒鸡好用。<br />那么对于vscode来讲，也许添加几个插件能够帮助你更加方便的编辑。按下Ctrl+shift+k打开扩展商店，我这里建议添加下面几个插件：<br />Markdown shortcuts(添加了一些md语言中常用的快捷键<br />Auto-Open Markdown Preview(能够在界面的左侧实时预览编辑效果)；<br />Markdown All in One(我也不知道具体包含了啥，但装了总没错)。</p><p>而对于typora来说，你只需要熟悉一下快捷键，就<del>已经没有什么好怕的了</del></p><hr /><h1 id="markdown常用语法">Markdown常用语法</h1><p>本文是基于Markdown的<a href="https://www.appinn.com/markdown">简体中文说明</a>概括而来，如果不嫌麻烦也可以去原网址查看<br />对于Markdown来说，文本的格式有两个基本单位。一个是<strong>段落</strong>，一个是<strong>字体</strong>。这个倒是没什么好说的，但是我们需要搞清楚所谓的<strong>段落</strong>到底是怎么定义的。<br />## 段落 ## 在讲段落之前，我们要先讲一下Markdown之中一个稍微有些特殊的地方，也就是他的空白符。在先了解了Markdown的这一特殊之处后，我们再来讲段落。<br />### 空白符与换行 ###<br />Markdown中有三个常见的空白符：平行制表符(Tab)、空格(Space)和换行(Enter)。而一个Tab相当于四个Space。然而一般情况下，无论你打了多少个空格或者Tab，最后渲染出来的终究只有一个空格，就像这样,我这样输入：<br />&gt;a  b    c              d</p><p>但是最后渲染出来的还是只有一个空格: &gt;a b c d</p><p>如下图 <img src="/images/posts/markdown/2.png" alt="虽然敲了很多空格，但最后显示也只有一个" /><br />同理，在Markdown中你只按一下Enter是不能做到换行的，即使他看上去像是换了。直接上图：<br /><img src="/images/posts/markdown/3.png" /><em>这里c后面我是敲了一个空格的，但是渲染出来并没有显示</em><br /><br> <br><br />那么，正确的换行姿势是什么呢?</p><p><strong>正确的姿势是在要换行的两个字符之间先敲两个<em>Space</em>之后再敲<em>Enter</em>就可以了</strong>，就像下图：<br /><img src="/images/posts/markdown/4.png" alt="正确的换行姿势" /><br /><em>可以看到我在c后面加上了两个空格，就完成了换行</em> <br> <br> 上面我们讲过，一般来说无论你敲多少个空格，最终渲染出来的也只有一个，同理,换行也是这样的，无论你打多少个回车，最终渲染出来的还是只有一个换行:<img src="/images/posts/markdown/5.png" alt="多个回车不能生效" /><br />不过这里同时也显示了另外一种换行方式，即<strong>当两行之间有一个或多个<em>空行</em>时，无论上一行末尾有没有两个空格，渲染均会进行换行操作</strong></p><h3 id="空格和换行的非一般操作">空格和换行的非一般操作</h3><p>那么有人可能要问了，难道我就没有办法去输出多个空格或者换行吗？当然有。我们前面说过Markdown是一种跟HTML相似的标记语言，这里我们就可以运用"<code>&amp;nbsp;</code>"和"<code>&lt;br&gt;</code>"来达成多个空格和换行的效果:<img src="/images/posts/markdown/6.png" alt="多个换行" /><br />这个学过HTML就应该知道了，我就不在另外论述。</p><h3 id="空行和段落">空行和段落</h3><p>讲完了空白符，就该讲一下什么是段落了。 我们在上面讲了两种换行方式，一种是在句末加上两个空格之后回车，一种是在两行之间加上一个<strong>空行</strong>。那么什么是空行呢？在Markdown当中，只要这一行看上去没有东西，它就算一个空行。哪怕在这一行当中我打了几个空格或者Tab，他也算是一个空行。而段落的标志就是空行。段落与段落之间用空行进行间隔，如下图： <img src="/images/posts/markdown/7.png" alt="段落" /><br />知道了什么是段落之后，我们就可以正式的来讲一讲Markdown语法了。</p><h2 id="段落格式">段落格式</h2><p>段落格式，顾名思义就是针对段落的文本格式，这些格式在使用时需要用空行与上下段落分割，否则编辑器检测不到段落就会直接把这个效果一路延伸下去啦。</p><h3 id="标题">标题</h3><p>Markdown中的标题一般有两种，一种是类Setext格式的标题，另一种是类atx格式，其中我个人比较常用的是后者。那么下面就来具体讲一下这两者。<br />- <strong>类Setext格式</strong>是由在文本下一行输入不少于2个的-或=所构成的，其中=表示最高级标题，而-表示二级标题。虽然这两个符号的数量可以少于两个，但是小于等于两个的话可能会造成无法触发下文的语法高亮，所以我个人一般建议使用4个进行描写。<br />&gt; 输入：<br />&gt; <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">一级标题      </span><br><span class="hljs-section">=====</span><br></code></pre></td></tr></table></figure> &gt; 显示为:<br />&gt; ​<br />&gt; &gt; 一级标题<br />&gt; ====<br />&gt; &gt; 输入：<br />&gt; <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">二级标题      <br><span class="hljs-comment">-----     </span><br></code></pre></td></tr></table></figure> &gt; 显示为：<br />&gt; ​<br />&gt; 二级标题<br />&gt; -----<br />&gt; &gt; 如上www</p><ul><li><strong>类atx格式</strong>是由在文本前输入相应数量的#所构成的，支持多级，最高可以达到六级，通常来说仅在此行开头输入相应数量的#加上一个空格之后输入文本即可，但是也可以在文本后以对应数量的#进行封闭。我这么说有人可能听不懂我在讲什么东西，所以这里列出来基本的六级标题:<br />&gt; 输入格式：<br />&gt; <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 一级标题        <br>## 二级标题       <br>### 三级标题      <br>#### 四级标题     <br>##### 五级标题        <br>###### 六级标题       <br></code></pre></td></tr></table></figure> &gt; 实际显示为：<br />&gt; ​<br />&gt; # 一级标题<br />&gt; ## 二级标题<br />&gt; ### 三级标题<br />&gt; #### 四级标题<br />&gt; ##### 五级标题<br />&gt; ###### 六级标题<br />&gt; &gt; 如上。</li></ul><p>这里需要注意的是对于标题而言，无论是否检测到他的前后有<strong>空行</strong>均会将其认为是一个段落而不是简单的换行，不过这里建议为了美观和书写方便考虑还是最好在标题的前后加上空行，这样自己看起来也会清楚一点。</p><p>另外这里要说一下，如果你所使用的编辑器是VSCode，那么一级标题下面你可能会看到一条分割线，那个是VSCode编辑器自己渲染出来的，无视就好啦。</p><h3 id="引用和代码块">引用和代码块</h3><p>在上面的文章中我们可以看到一些引用块和代码块，顾名思义，它们的作用一般就是用以引用(或者表示重要)一段文字或者代码。这两种格式本身是比较简单的，我在下面演示了之后就可以看出来。当然它们本身是可以嵌套的，就和我下面要讲的列表一样，所以在书写时可能稍微有一些让人迷惑的地方，不过这个我们待会再讲，先来讲一下这两者基本的用法吧。<br />- <strong>引用</strong>是在该段落的前面加上一个&gt;所构成的，和标题以及其他段落格式语法一样，需要在&gt;后加上一个空格，如输入：<br />​ <code>&gt; 引用</code><br />那么就会输出如下引用块：<br />&gt; 引用</p><pre><code class="hljs">在引用块内部的换行和分段遵循Markdown语法，也就是说如果需要进行硬换行则需要在上一行的末尾输入两个tab再进行回车，否则就不会进行换行，如下所示：        <figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">第一行</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">上一行末尾没有输入tab      </span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">上一行末尾输入了两个tab</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">上面是一个空行       </span><br></code></pre></td></tr></table></figure>那么渲染出来的就是这样的：       &gt; 第一行&gt; 上一行末尾没有输入tab      &gt; 上一行末尾输入了两个tab&gt;&gt; 上面是一个空行       懂了吧？~~不懂的叉出去~~      同时记住，作为一种段落格式，引用的前后还是需要**输入空行**来进行分割哦~      </code></pre><ul><li><p><strong>代码块</strong>和引用一样，只不过是将&gt;换成了<code>，代码块的使用范例如下：            + 对于文本之中的代码，可以用 \</code> 进行分割，如：<br />测试` System.out.print("hi") `<br />则会输出为：<br />测试<code>System.out.print("hi")</code></p><ul><li><p>对于一整段的代码，可以在段落前后分别用三个 ` 来进行标记，如下：<br />```<br />第一行 还是第一行<br />第二行</p><p>第二段<br />```<br />那么渲染出来的效果就是这样的：<br /><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">第一行 还是第一行       <br>第二行     <br><br>第二段     <br></code></pre></td></tr></table></figure> 可以看到代码块的分段也是遵循我之前讲到的规则的。</p></li></ul></li><li><p>我之前讲到过，上面的两个东西是可以嵌套的，也就是说可以引用里面再引用、代码里面套代码、代码里面套引用、引用里面套代码...等等。这个还是比较好理解的，比如下面这一段话：</p><p>&gt; 测试<br />&gt; ```<br />&gt; System.out.print("gdzjh");<br />&gt; ```<br />&gt;&gt; 以上代码是我瞎写的<br />&gt;<br />&gt; see you</p><p>那么渲染出来就是这样的：<br />&gt; 测试<br />&gt; <figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">System</span>.out.<span class="hljs-literal">print</span>(<span class="hljs-string">&quot;gdzjh&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure> &gt;&gt; 以上代码是我瞎写的 &gt; &gt; see you</p><p>这个嵌套还是比较好理解的，我就不再多举例子了，相信大家都看得懂。<br />### 列表</p></li></ul><p>之前讲到，列表也是一种可以嵌套的格式，而且与引用和代码块不同，列表大部分情况下就是为了嵌套而使用的，所以在使用列表时，清楚自己在本行句首缩进了多少个空格是很有必要的，否则很容易搞混哦~</p><p>列表通常是在段首使用一个*或+或-来表示，这三种符号本质没有任何区别，使用情况完全相同。当然使用这三种符号所表达的列表都是<strong>无序列表</strong>。如果要表现有序列表的话有另外的表达方式，但其嵌套方式与无序列表是van全一致的，所以这里就先讲一下无序列表。</p><ul><li><p><strong>无序列表</strong>的普通表达方式如下所示：<br />&gt; - one<br />&gt; - two<br />&gt; - three</p><p>则渲染出的结果为：<br />&gt; - one &gt; - two &gt; - three</p></li><li><p><strong>换行和嵌套</strong><br />对于列表而言，换行是不需要行尾加上两个tab键的，在按下回车时，会默认进行换行同时进入下一个列表内容。但是，如果我想进行一个硬换行的同时不进入下一个列表内容应该怎么做呢？那就还是需要tab了。在上一行结束之后，输入两个tab，按下回车，会进行换行并切入下一个列表内容编辑，这时删除这一行的所有内容(其实只有前面那一个标识符)。删除这个标识符需要将本行前面的所有缩进一并删除才行，不过当我们这么做的时候，你会发现页面不怎么好看：<br />&gt;     - one<br />&gt; new</p><p>看不出来是吗？没事，我们先讲一下列表的嵌套再回头来试一下你就会受不了了的，相信我。<br />列表的嵌套虽然略微复杂但是也不算很难，在这一行的内容输入结束之后，敲下回车，默认进入下一行列表，这时将光标移动到这一行的标识符前，按一下tab进行缩进，则列表将切换成低一级的列表，如下：<br />&gt; - one<br />&gt;     + new<br />&gt;          * ah that`s good</p><p>渲染结果如下：</p><blockquote><ul><li>one<ul><li>new<ul><li>ah that`s good</li></ul></li></ul></li></ul></blockquote><p>对于每一个等级的列表而言，都相当于一个段落。不过在列表之中这里并不需要需要使用空行隔开，而是通过判断首行的缩进来判断列表级别：<br />&gt;  - one<br />&gt;      + new<br />&gt;          * deep<br />&gt;  - two<br />&gt;      + new<br />&gt;          * dark<br />&gt;  - three<br />&gt;      + new<br />&gt;          * fantasy</p><p>那么渲染出来就是这样的：</p><blockquote><ul><li>one<ul><li>new<ul><li>deep</li></ul></li></ul></li><li>two<ul><li>new<ul><li>dark</li></ul></li></ul></li><li>three<ul><li>new<ul><li>fantasy</li></ul></li></ul></li></ul></blockquote><p><em>一般来说列表的三个等级分别是实心圆、空心圆和实心方块，不过这里我的文章中本身就包含了一级列表所以说上面的列表中就只有下两级的了</em><br />为了编辑时的方便起见，我建议不同等级的列表使用不同的标识符，这样做只是为了看的清楚，没有其他的意义。</p><p>好了，到了这里我们再来回头看一下刚才的那个硬换行，在包含了多级列表的时候，会变成什么样呢？<br />&gt; - one &gt; + new<br />&gt; yoooo<br />&gt; - two &gt; + new<br />&gt; ah</p><p>看上去很好嘛，不过我们看一下源码-----<br />&gt;  - one<br />&gt;      + new<br />&gt;  yoooo<br />&gt;  - two<br />&gt;      + new<br />&gt;  ah</p><p>这乱七八糟的缩进是什么玩意啊！</p><p>所以呢，这里给出一个对于列表中的硬换行与级别切换的比较不容易使人迷糊的方式：<strong>缩进</strong>，每一个级别的列表都与上一级差一个tab键的缩进。<br />在不同等级之间的切换比较简单，只需要在本行的标识符前面按一下tab即可进入低一级的列表。而要回到上一级的列表，一般来说只需要按backspace即可默认删除tab键所造成的缩进，不过有时可能并没有办法能一次性删除按一次tab键所带来的缩进，所以我们这里也可以采用一种比较暴力的方法，直接将标识符前的缩进删除到本行标识符与上一级的标识符对其就可以了。</p><p>而对于列表内的硬换行，则需要删除行前的标识符，此时本行的缩进会被全部删除，如下图：<br /><img src="/images/posts/markdown/8.png" alt="new" /><br />此时继续使用tab将光标缩进到文本所需要的级别的位置，如下图：<br /><img src="/images/posts/markdown/9.png" alt="new" /><em>截图没有截到光标，我就在光标的位置输入了一个l来代替光标</em><br />此时输入即可达到文本内的硬换行：</p><blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">- <span class="hljs-literal">one</span>      <br>  + <span class="hljs-built_in">new</span>        <br>  继续<span class="hljs-built_in">new</span>       <br></code></pre></td></tr></table></figure>输出如下:<ul><li>one<ul><li>new<br />继续new</li></ul></li></ul></blockquote><p>总之，列表的内涵就是缩进，我这样讲可能不太好理解，大家自己去试一试就很好理解了~<br /></p></li><li><p><strong>有序列表</strong><br />刚才说过,列表除了无序列表以外还包括了有序列表。有序列表的嵌套和换行等等都是和无序列表一样的，我这里仅举例一下有序列表的表达方式：<br />&gt; <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-number">1.</span> <span class="hljs-keyword">new</span><br><span class="hljs-number">2.</span> <span class="hljs-keyword">new</span><br></code></pre></td></tr></table></figure> &gt; 渲染结果如下： &gt; 1. new<br />&gt; 2. new</p><p>嗯，就这么简单，数字后面加上一个点就好了。</p></li></ul><h2 id="分隔符和标识符">分隔符和标识符</h2><h3 id="分隔符">分隔符</h3><p>Markdown语法中的分隔符是由不少于三个的<em>、-或_组成的，这三种符号任意一种均可，你甚至可以在其中插入空格：<br />&gt; <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">------    <br><span class="hljs-strong">____</span>__<br><span class="hljs-strong">****</span><span class="hljs-strong">**</span><br></code></pre></td></tr></table></figure> &gt; &gt; ----- &gt; ______ &gt; </em>***** &gt;</p><h3 id="斜体和加粗">斜体和加粗</h3><p>Markdown语法中的斜体与加粗是可以嵌套的，这两者的表达均是使用不同数量的<em>或_来表示，具体规则如下：<br />&gt; 加粗：<br />&gt; <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">**加粗**</span>      <br><span class="hljs-emphasis">__加粗__</span>        <br></code></pre></td></tr></table></figure> &gt; <strong>加粗</strong><br />&gt; <strong>加粗</strong><br />&gt; ​<br />&gt; 斜体：<br />&gt; <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">*斜体*</span>      <br><span class="hljs-emphasis">_斜体_</span>      <br></code></pre></td></tr></table></figure> &gt; </em>斜体*<br />&gt; <em>斜体</em><br />&gt; ​<br />&gt; 加粗和斜体：<br />&gt; <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**<span class="hljs-emphasis">*加粗和斜体*</span>**</span><br><span class="hljs-strong">__<span class="hljs-emphasis">_加粗和斜体_</span>__</span>       <br></code></pre></td></tr></table></figure> &gt; <strong><em>加粗和斜体</em></strong><br />&gt; <strong><em>加粗和斜体</em></strong></p><p>以上，结束。</p><h3 id="删除线">删除线</h3><p>Markdown语法中的删除线比较简单，仅需要在文本两侧各加上两个~即可：<br />&gt; <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">~~<span class="hljs-selector-tag">del</span>~~<br></code></pre></td></tr></table></figure> &gt; &gt; <del>del</del></p><h2 id="链接和图片">链接和图片</h2><p>Markdown中的链接和图片的引用语法有一些相似之处，因此这里我将它们一并说明。</p><h3 id="链接">链接</h3><p>连接的语法支持两种格式，行内式和参考式,无论是哪一种,链接文字均需要以方括号包含在内。官方中文文档在这一部分的描述非常复杂，我这里只讲一下我们日常书写中常见的格式。先讲一下行内式，一般我自己写东西的时候用得最多的就是这种，格式如下：<br />&gt; [链接文字](链接内容)<br />&gt; 举例：<br />&gt; <figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-name">一个智障的博客</span>](<span class="hljs-name">aye10032.github.io</span>)<br></code></pre></td></tr></table></figure> &gt; <a href="aye10032.github.io">一个智障的博客</a></p><p>参考式也差不多，不过参考式的格式是分成两部分的，首先是由方括号包含起来的一个链接文字，之后是一个同样有方括号包含起来的<strong>标记</strong>,接着，在文件的任意处，你可以把这个标记的链接内容定义出来，如下：<br />&gt; <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[一个智障的博客]</span><span class="hljs-selector-attr">[1]</span> 实际上作者并不是智障。       <br>不过我们这里就姑且认为她是智障。      <br>      <br><span class="hljs-selector-attr">[1]</span>:aye10032<span class="hljs-selector-class">.github</span>.io<br></code></pre></td></tr></table></figure> &gt; [一个智障的博客][1] 实际上作者并不是智障。<br />&gt; 不过我们这里就姑且认为她是智障。<br />&gt; ​<br />&gt; &gt; [1]:aye10032.github.io</p><p>嘛，就是这样。具体选择哪一种就看大家各自的书写习惯和文本的具体情况而定了。</p><h3 id="图片">图片</h3><p>图片的格式和链接大体一样，从外观上来看仅仅是在前面加上了一个!而已，同样图片的格式也是分为行内式和参考式，具体的表现方式如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">!<span class="hljs-selector-attr">[02]</span>(\images\posts\markdown\<span class="hljs-number">016</span>.PNG)<br></code></pre></td></tr></table></figure><p>那么就会输出一张图片......</p><p><img src="/images/posts/markdown/016.PNG" alt="02" /> <em>对不起，不要打死我</em></p><p>当然，我这里的图片地址使用的是本地化地址，你也可以选择使用链接，至于怎么生成图片的链接嘛.....最简单的方法：打开QQ相册，上传，然后显示图片链接，完事。 当然一般来说我还是推荐使用上面这种方法了，毕竟文件就在本地比较稳定，也不怕丢失了啥的。 参考式也是同样:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">!<span class="hljs-selector-attr">[02]</span><span class="hljs-selector-attr">[01]</span>莓良心    <br><br><span class="hljs-selector-attr">[01]</span>:\images\posts\markdown\<span class="hljs-number">016</span>.PNG<br></code></pre></td></tr></table></figure><p><img src="\images\posts\markdown\016.PNG" alt="02" />莓良心</p><h2 id="特殊符号的输入">特殊符号的输入</h2><p>之前我们的教程里面提到了许多的特殊符号，这些特殊符号一般来说会被编译器自动转换为其表达的格式。不过当我们想要输出这些字符本身的时候应该怎样才能保证它们不被编译呢？答案就是使用反斜杠，在想要输出的特殊字符前面加上反斜杠，就可以原样输出该字符本身了。 &gt; <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">\`int x=1;\`<br></code></pre></td></tr></table></figure> &gt; `int x=1` 这里就不会被编译成代码块了</p><p>同理，想要输出，也是只要在前面加上反斜杠就好了。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>计算机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>topologycraft工作手记</title>
    <link href="/2018/01/11/2018-01-11-topologycraft/"/>
    <url>/2018/01/11/2018-01-11-topologycraft/</url>
    
    <content type="html"><![CDATA[<p>外服种子 2075596822522433484<br />出生点 ：-64 256</p><iframe style="width:728px;height:90px;max-width:100%;border:none;display:block;margin:auto" src="https://zh-cn.namemc.com/server/topo.world/embed" width="728" height="90"></iframe><h2 id="伪和平">伪和平</h2><p>无延时中继器耗材：每18格=2粘性活塞+2方块+1红石块+15红石<br />加载终点：-5，-5154<br />加载起点：-56，263<br />总耗材：5468/18=304个单位，共计：</p><blockquote><p>608(9组半）粘性活塞&amp;方块<br />304（4组+48个）红石块<br />4560(71组+16个)红石粉</p></blockquote><p><strong>累计</strong><br />&gt; 1824 木板 = 456(7组+8个)原木<br />&gt; 608(9组半)铁锭<br />&gt; 2432(38组)原石<br />&gt; 608+304*9+4560 = 7904(123组半)红石</p><ul><li>2018-1-11,开始准备材料。</li><li>2018-2-11,下午3:23材料准备完成，开始无延时的布线</li><li>2018-2-11,下午5:56完工，伪和平完工（永久加载还没做）。</li><li>2020-2-4，晚9:47修复，改用村庄永久加载，FLAG帮忙纠错。</li></ul><h2 id="深渊">深渊</h2><ul><li>2018-3-2，深渊开始选址，中心定在-2600，1840</li></ul><h2 id="资料室">资料室</h2><p>定址位于树林中央左侧岩壁为入口，参考NGNL剧场版森精种虚空第零加护试验炉布景（<del>刷怪率100%</del>）；</p><h1 id="树场">树场</h1><ul><li>TNT模块：位置 -2963 65 1647</li><li>树场：位置 -2957 65 1676</li></ul><h2 id="改造工程一期">改造工程一期</h2><p>效果图：</p><figure><img src="/images/posts/topologycraft/2019-10-17_17.57.34.png" alt="2019-10-17_17.57.34" /><figcaption aria-hidden="true">2019-10-17_17.57.34</figcaption></figure><h1 id="存档升级">2021存档升级</h1><h2 id="基地">基地</h2><p><img src="/images/posts/topologycraft/image-20210209162914138.png" /></p><figure><img src="/images/posts/topologycraft/image-20210209163026199.png" alt="Aye &amp; 15家" /><figcaption aria-hidden="true">Aye &amp; 15家</figcaption></figure><figure><img src="/images/posts/topologycraft/image-20210209163132593.png" alt="小格家" /><figcaption aria-hidden="true">小格家</figcaption></figure><figure><img src="/images/posts/topologycraft/image-20210209163211480.png" alt="comy &amp; 大中家" /><figcaption aria-hidden="true">comy &amp; 大中家</figcaption></figure><h2 id="设施">设施</h2><figure><img src="/images/posts/topologycraft/image-20210209163301426.png" alt="女巫塔&amp;墨鱼塔" /><figcaption aria-hidden="true">女巫塔&amp;墨鱼塔</figcaption></figure><figure><img src="/images/posts/topologycraft/image-20210209163322260.png" alt="刷怪塔" /><figcaption aria-hidden="true">刷怪塔</figcaption></figure><figure><img src="/images/posts/topologycraft/image-20210209163455762.png" alt="蘑菇岛" /><figcaption aria-hidden="true">蘑菇岛</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>游戏</category>
      
      <category>Minecraft</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>游戏</tag>
      
      <tag>Minecraft</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git常用指令</title>
    <link href="/2017/12/21/2017-12-21-git/"/>
    <url>/2017/12/21/2017-12-21-git/</url>
    
    <content type="html"><![CDATA[<h1 id="git常用指令">git常用指令</h1><h2 id="安装后配置时">安装后配置时</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --global user.name <span class="hljs-string">&quot;Your Name&quot;</span>     <br>$ git config --global user.email <span class="hljs-string">&quot;email@example.com&quot;</span>        <br></code></pre></td></tr></table></figure><p>这一步是设置用户，表示是谁在对这个仓库进行操作</p><h2 id="新建版本库">新建版本库</h2><p>首先还是新建一个空目录用来作为版本仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> <span class="hljs-built_in">test</span> //新建文件夹<span class="hljs-built_in">test</span></span>        <br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> <span class="hljs-built_in">test</span></span>       <br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">pwd</span> //显示当前目录</span>      <br></code></pre></td></tr></table></figure><p>接下来把这个目录变成Git可以管理的仓库</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>git init<br></code></pre></td></tr></table></figure><p>版本仓库就建好啦</p><h2 id="添加新文件">添加新文件</h2><p>注意，所有的操作都应该在刚才建立的目录下进行操作哦<br />这里是两个最常用的指令<br /><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> git add &lt;<span class="hljs-keyword">file</span>&gt; <span class="hljs-comment">//将工作区的文件添加到暂存区      </span><br><span class="hljs-symbol">$</span> git commit -m <span class="hljs-string">&quot;...&quot;</span><span class="hljs-comment">//将暂存区的修改提交到分支     </span><br></code></pre></td></tr></table></figure> 另外，查看工作区状态可以用到以下两条指令:<br /><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> git status <span class="hljs-comment">//查看工作区状态        </span><br><span class="hljs-symbol">$</span> git diff <span class="hljs-comment">//查看具体修改的内容        </span><br></code></pre></td></tr></table></figure> ## 版本回退</p><p>查看已有的提交历史:<br /><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> git <span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure> 回退版本:<br /><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> git reset --hard HEAD^ <span class="hljs-comment">//回退到上一个版本     </span><br><span class="hljs-symbol">$</span> git reset --hard HEAD^^ <span class="hljs-comment">//回退到上上个版本       </span><br><span class="hljs-symbol">$</span> git reset --hard commit_id <span class="hljs-comment">//回退到指定版本      </span><br></code></pre></td></tr></table></figure> <strong>HEAD指的就是当前版本</strong><br />查看历史指令: <figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">$ git <span class="hljs-built_in">ref</span>log<br></code></pre></td></tr></table></figure> ## 修改与撤销<br />撤销工作区在上一次提交之后的改动:<br /><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> git checkout -- &lt;<span class="hljs-keyword">file</span>&gt;<br></code></pre></td></tr></table></figure> 撤销提交到暂存库的修改：<br /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset HEAD file     <br>//在这一步后再进行对工作区修改的撤销     <br></code></pre></td></tr></table></figure> 删除文件：<br /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">rm</span> &lt;file&gt;<br></code></pre></td></tr></table></figure> ## 对分支的操作<br /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">&amp; git branch //查看分支     <br>&amp; git branch &lt;name&gt; //创建分支      <br>$ git checkout &lt;name&gt; //切换分支        <br>&amp; git checkout -b &lt;name&gt; //创建+切换分支      <br>$ git merge &lt;name&gt; //合并某分支到当前分支     <br>$ git merge --no-ff -m <span class="hljs-string">&quot;...&quot;</span> &lt;name&gt; //使用普通模式合并分支，可以显示合并历史       <br>$ git branch (-m | -M) &lt;oldbranch&gt; &lt;newbranch&gt; //重命名分支      <br>$ git branch -d &lt;name&gt; //删除分支       <br>$ git branch -D &lt;name&gt; //强行删除未合并分支<br>$ git <span class="hljs-built_in">log</span> --graph //查看分支合并图     <br>$ git <span class="hljs-built_in">log</span> --graph --pretty=oneline --abbrev-commit //也可以查看分支合并图     <br></code></pre></td></tr></table></figure> 当要合并的分支与主分支之间有冲突时会提示无法合并，需要手工修改冲突文件后进行</p><h2 id="与远程仓库有关的操作">与远程仓库有关的操作</h2><p>要将远程仓库与本地仓库关联起来首先需要创建SSH Key：<br /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail@example.com&quot;</span><br></code></pre></td></tr></table></figure> 之后可以在用户主目录下找到.ssh文件夹，将其中<em>id_rsa.pub</em>文件中的全部内容复制，登录自己的github账号，在设置里面的SSH and GPG keys中添加SSH key，标题任意，将<strong>刚才复制的内容</strong>黏贴在下面，完成。<br />将自己的github仓库与本地仓库关联：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git remote add origin git@github.com:&lt;your git&gt;<br></code></pre></td></tr></table></figure><p>将本地仓库推送到远程仓库： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git push -u origin master<br></code></pre></td></tr></table></figure></p><h2 id="设置和取消代理">设置和取消代理</h2><p>设置代理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global https.proxy http://127.0.0.1:1080<br>git config --global https.proxy https://127.0.0.1:1080<br></code></pre></td></tr></table></figure><p>取消代理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global --<span class="hljs-built_in">unset</span> http.proxy<br>git config --global --<span class="hljs-built_in">unset</span> https.proxy<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>计算机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>永远的七日之都-多人攻略整合</title>
    <link href="/2017/12/16/2017-12-16-qrzd-more/"/>
    <url>/2017/12/16/2017-12-16-qrzd-more/</url>
    
    <content type="html"><![CDATA[<h1 id="永远的七日之都-多人攻略整合">永远的七日之都-多人攻略整合</h1><div class="note note-info">            <p>依旧整合自b站up主<a href="http://space.bilibili.com/9244025/#/">轻语幽梦</a>的视频，如原作者本人有异议立即删除。</p>          </div><h2 id="妮维线">妮维线</h2><blockquote><p>要求：妮维、通关【中央城区】、10点行动力（不计算好感增加消耗）</p></blockquote><ul><li>【妮维】好感度达到【40】后 手帐更新 携带【妮维】巡查【<em>中央庭</em>】触发剧情【<strong>奇怪的信</strong>】（选项都有对话提示请注意观看~）好感度+10[好感度50]<br /></li><li>【妮维】好感度达到【70】手帐更新 携带【妮维】巡查【<em>中央城区</em>】4次分别触发剧情【<strong>不可靠的要求</strong>】、【<strong>孤立无援</strong>】、【<strong>妮维在行动</strong>】、【<strong>最终时刻</strong>】 妮维攻略成功~</li></ul><h2 id="西比尔线">西比尔线</h2><blockquote><p>西比尔、妮维、通关【高校学院】、10点行动力（不计算好感增加消耗）</p></blockquote><ul><li>【西比尔】好感度达到【20】后更新手帐 携带【西比尔】巡查【<em>高校学院</em>】触发剧情【<strong>落水的少女</strong>】（选项1好感度+5 选项2好感度+10）[好感度30]<br /></li><li>【西比尔】好感度达到【40】后更新手帐与论坛讯息 确认后携带【西比尔】巡查【<em>高校学院</em>】触发剧情【<strong>下落不明的学生</strong>】并触发剧情战（只需要等待60秒即可通过） 私信更新回复后获得【好感度+5】[好感度45]<br /></li><li>【西比尔】好感度达到【50】后 手帐更新 携带【西比尔】巡查【<em>高校学院</em>】触发剧情【<strong>无果的搜寻</strong>】 结束后私信回复【妮维】 [好感度50]<br /></li><li>【西比尔】好感度达到【60】后 携带【妮维】与【西比尔】巡查【<em>高校学院</em>】触发剧情【<strong>与妮维一起追踪</strong>】并触发剧情战 结束后选项选择【化学药剂】 获得好感度+20 [好感度80]<br /></li><li>【西比尔】好感度达到【满值】后 携带【西比尔】巡查【<em>高校学院</em>】触发剧情【<strong>远方的信</strong>】 至此西比尔攻略结束~</li></ul><h2 id="羽弥线">羽弥线</h2><blockquote><p>羽弥、通关【研究所】、12点行动力（不计算好感增加消耗）</p></blockquote><ul><li>带上【羽弥】巡查【<em>研究所</em>】触发【<strong>宅居的女孩</strong>】（此时羽弥不会回复你）[羽弥好感度0]<br /></li><li>【羽弥】好感度达到【20】后 触发论坛信息【来自彩虹的口味！】 确认信息得到道具【彩虹糖】。此时手帐更新[虽然上次去羽弥住处吃了闭门羹，不过今天应该能在家了！] [羽弥好感度20]<br /></li><li>再次带上【羽弥】巡查【研究所】触发【宅居的女孩】（羽弥好感度+10）[羽弥好感度30]<br /></li><li>【羽弥】好感度达到【40】后 手帐更新[该去研究所带羽弥出去逛逛了，去哪里好呢？] 带上【羽弥】巡查【<em>研究所</em>】触发【<strong>羽弥的新工作</strong>】 手帐更新（羽弥好感度+10）[羽弥好感度50]<br /></li><li>【羽弥】好感度达到【60】后 手帐更新[该去看看羽弥的情况了，......] 戴上【羽弥】巡查【<em>研究所</em>】触发【<strong>泡咖啡的羽弥</strong>】手帐更新（羽弥好感度+5）[羽弥好感度65]<br /></li><li>带上【羽弥】巡查【<em>研究所</em>】触发【<strong>突然袭击</strong>】（触发战斗 详情请看<a href="https://www.bilibili.com/video/av17115072/">视频</a>） 结束后手帐更新（羽弥好感度+15）[羽弥好感度80]<br /></li><li>【羽弥】好感度【满值】后手帐更新 巡查【<em>研究所</em>】触发【<strong>美好的看板娘</strong>】 羽弥攻略完成~</li></ul><h2 id="千藻诗歌线">千藻诗歌线</h2><blockquote><p>千藻诗歌、通关【中央城区】、10点行动力（不计算好感增加消耗）</p></blockquote><ul><li>【千藻诗歌】好感度达到【30】时 手帐更新 并收到私信 回复后 携带【千藻诗歌】巡查【<em>中央庭</em>】触发剧情【<strong>邪恶的神器使</strong>】好感度+10[好感度40]<br /></li><li>【千藻诗歌】好感度达到【50】时 手帐更新 携带【千藻诗歌】巡查【<em>中央城区</em>】触发剧情【<strong>神秘组织</strong>】好感度+10[好感度60]<br /></li><li>【千藻诗歌】好感度达到【75】时 手帐更新并收到私信 回复后携带【千藻诗歌】巡查【<em>高校学院</em>】触发剧情【<strong>魔王降临</strong>】并触发剧情战,胜利后好感度+15[好感度90]<br /></li><li>携带【千藻诗歌】巡查【<em>高校学院</em>】触发剧情【<strong>魔王崛起</strong>】 好感度+5[好感度95]<br /></li><li>【千藻诗歌】好感度达到【满值】后 携带【千藻诗歌】巡查【<em>高校学院</em>】触发剧情【<strong>想成为魔王的少女</strong>】 千藻诗歌攻略成功~</li></ul>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>游戏</category>
      
      <category>永远的七日之都</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>游戏</tag>
      
      <tag>永远的七日之都</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>永远的七日之都安托涅瓦攻略</title>
    <link href="/2017/12/12/2017-12-12-qrzd-antuo/"/>
    <url>/2017/12/12/2017-12-12-qrzd-antuo/</url>
    
    <content type="html"><![CDATA[<h1 id="永远的七日之都安托涅瓦攻略">永远的七日之都安托涅瓦攻略</h1><h2 id="前置需求">前置需求</h2><p>10位神器使（必要人物：伽儿）、建筑才能满足14点（两位神神器使相加）、开发才能满足22点、36万金币</p><h3 id="第七天">第七天</h3><p>1.巡查【<em>中央庭</em>】三次分别触发【<strong>中央庭的女王1</strong>】、【<strong>中央庭的女王2</strong>】、【<strong>安托涅瓦的引荐</strong>】（须选择【占卜】并支付36万金币）[行动力24→18]<br />2.打开【<em>论坛</em>】触发新剧情选择【得到讯息】并在安的对话中选择【去调查一下吧】[无行动力消耗]<br />3.携带【安】巡查【<em>中央庭</em>】触发【<strong>调查幽灵</strong>】得到方舟设计图[行动力18→16]<br />4.解放【高校学院1-6】并开发【<em>高校学院</em>】两次[行动力18→0]</p><h3 id="第六天">第六天</h3><p>0.开场剧情请按顺序选择【拒绝希罗】、【一定会有办法的】、【说出活骸情况】、【不再去与希罗扯上关系】（影响后续剧情）<br />1.携带【伽儿】巡查【<em>中央庭</em>】触发【<strong>探望西比尔</strong>】获得B1级神器使【西比尔】[行动力24→22]<br />2.【<em>高校学院</em>】建设【地下研究所】→【公共图书馆】、【地下研究所】→【大型研究所】、【地下研究所】→【大型研究所】、【大型研究所】、【大型研究所】（总计一个【公共图书馆】四个【大型研究所】）[行动力22→6]<br />3.【<em>中央庭</em>】建设【起重机】X2[行动力6→2]<br />4.【<em>中央庭</em>】建设【方舟】[行动力2→0]</p><h3 id="第五天">第五天</h3><p>0.开场触发分裂剧情 选择【拒绝希罗】并【赢得】剧情战胜利<br />1.巡查【方舟所在地】（<em>中央庭</em>）三次分别触发【<strong>第一次的方舟</strong>】（对话选择【拜托你了】）、【<strong>第二次的方舟</strong>】、【<strong>第三次的方舟</strong>】[行动力24→18]<br />2.巡查【<em>中央庭</em>】触发【<strong>零的资料</strong>】[行动力18→16]<br />3.巡查【方舟所在地】（<em>中央庭</em>）触发【<strong>最后一次的方舟</strong>】对话中选择【带着安托涅瓦一起跑】[行动力16→14]<br />4.开发【<em>中央庭</em>】一次并建设【市立情报局】（选择解决【不稳定的黑门】和【交通通讯故障】）[行动力14→10]<br />5.解放【<em>东方古街（或中央城区）</em>1-5】[行动力10→0]</p><h3 id="第四天">第四天</h3><p>1.解放【<em>东方古街（或中央城区）</em>6】[行动力24→22]<br />2.【<em>高校学院</em>】建设【市立研究所】[行动力22→20]<br />3.开发【<em>东方古街（或中央城区）</em>】一次[行动力20→18]<br />4.【<em>东方古街（或中央城区）</em>】建设【大型研究所】X5[行动力18→8]<br />5.解放【<em>中央城区（或东方古街）</em>1-4】[行动力8→0]</p><h3 id="第三天">第三天</h3><p>0.剧情选择【留下照顾安托涅瓦】并在剧情结束后<strong>第一时间</strong>查看论坛并回复【雷切尔】<br />1.巡查【<em>中央庭</em>】触发【<strong>雷切尔的实验室</strong>】[行动力24→22]<br />2.开发【<em>中央庭</em>】一次并建设【急救中心】[行动力22→18]<br />3.解放【<em>中央城区（或东方古街）</em>5-6】[行动力18→14]<br />4.开发【<em>东方古街（或中央城区）</em>】并建设【区立研究所】[行动力14→10]<br />5.【<em>中央城区</em>】建设【大型研究所】X4[行动力10→2]<br />全黑核剧情：<br />（P.S. 请提前算好突袭所需情报值防止出现溢出或浪费导致无法完成突袭）<br />6.开发【<em>中央城区</em>】一次[行动力2→0]</p><h3 id="第二天">第二天</h3><p>0.开场剧情完成获得S1级神器使【安托涅瓦】[无行动力消耗]<br />1.【<em>中央城区</em>】建设【大型工程厅】[行动力24→22]<br />2.解放【<em>研究所</em>1-6】[行动力22→10]<br />3.开发【<em>研究所</em>】一次[行动力10→8]<br />4.【<em>研究所</em>】建设【大型情报局】 X 4 [行动力8→0]<br />（情报使用有限度：【交通信号故障】&gt;【突袭】 情报【不稳定的黑门】可不处理 若没有出现【不稳定】和【交通信号】可优先处理情报要求较高的【突袭】）</p><h3 id="第一天">第一天</h3><p>0.开场剧情结束后进入【刺杀】（如果第五天【分裂】结束希罗拿【东方古街】和【中央城区】黑核 【刺杀】胜利后会直接获得这两个黑核）<br />1.完成第一次【突袭】[行动力24→22]<br />2.在第一次【突袭】成功地点建设【大型情报局】X4[行动力22→14]<br />3.处理第二次【突袭】地点并成功突袭[行动力14→12]<br />4.在第二次【突袭】地点建设【大型情报局】X2[行动力12→8]<br />5.处理第三次【突袭】并成功突袭[行动力8→6]<br />6.携带【珈儿】巡查【<em>高校学院</em>】（获取【黑核】）[行动力6→4]<br />7.巡查【<em>研究所</em>】一次（获取【黑核】）[行动力4→2]</p><p>剩余两点可用于补充【不稳定的黑门】破坏的建筑或结局前补充情报值</p><p>此时如果神器使数量正确已满足210点科技 结束当天一天第二天触发剧情得到神器使【安托涅瓦】（科技点不够须抽取新神器使使科技值达到210点）</p><h1 id="全剧终">全剧终</h1><h1 id="后记">后记</h1><p>本攻略来自B站up主“轻语幽梦”的视频攻略<br /><a href="https://www.bilibili.com/video/av16811042/">原链接</a></p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>游戏</category>
      
      <category>永远的七日之都</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>游戏</tag>
      
      <tag>永远的七日之都</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>永远的七日之都一周目安(shuang)线攻略</title>
    <link href="/2017/12/10/2017-12-10-qrzd-1st-an/"/>
    <url>/2017/12/10/2017-12-10-qrzd-1st-an/</url>
    
    <content type="html"><![CDATA[<h1 id="永远的七日之都一周目安shuang线攻略">永远的七日之都一周目安(shuang)线攻略</h1><h3 id="第一天">第一天</h3><p>1.高校通关6次 体力12<br />2.安 巡查中央厅 光荣女仆 体力2 此时安好感11<br />3薇拉、安 日常巡查3次 体力6 此时<em>安好感23 薇拉18</em><br />4点击2次东方古街，激活开发，建设功能<br />5.开发高校1次 体力2 高校等级为2<br />6.通关东方古街1次 体力2</p><h3 id="第二天">第二天</h3><p>1.起床自动触发剧情，<em>安好感+5 安好感 29</em><br />2.活骸战后，出现的选项，拒绝希罗，尊重当事人想法，不隐瞒真相，不找希罗，<em>安好感+5 安好感 34</em><br />3.安巡查高校 成人仪式 体力2 <em>安好感49 薇拉19</em> <strong>去成人仪式前，先回复安的私信</strong><br />4.通关东方古街5次 体力10 <em>安好感54 薇拉24</em><br />5.安薇拉 日常巡查2次 体力4 <em>安好感62 薇拉 32</em><br />6.中央城区通关3次 体力6 <em>安好感65 薇拉34</em><br />7.开发高校1次 体力2 高校等级为3</p><h3 id="第三天">第三天</h3><p>1.中央城区通关3次 体力6 <em>安好感68 薇拉38</em><br />2.安巡查中央城区 拍照的魅力 选项:同意 体力2 <em>安好感88 薇拉38</em><br />3.安巡查东方古街 同为异类 体力2 <em>安88 薇拉38</em>(<strong>这里如果好感不足80支线任务不会出现</strong>)<br />4.安薇拉 日常巡查2次 体力4 <em>安好感96 薇拉46</em><br />5.建设2工程厅1研究所 体力6，<strong>中央城区和研究所要留一个格子其他随意</strong><br />6.研究所通关2次 体力4 <em>安好感98 薇拉48</em></p><h3 id="第四天">第四天</h3><p>1.研究所 体力8 <em>安100 薇拉52</em><br />2.安薇拉巡查1次 体力2 <em>安100 薇拉56</em><br />3.安巡查 中央城区 终于找到你 选项：悲伤 发誓 体力2(安线成功了一半)<br />4.为了满足安线的前置要求 需要的建设力22 开发力22 科技30 且开局给的人物不同，请各位检查一下自己缺的数值进行建设补足 体力10<br />(有的同学会发现建完还没达标，没关系,下一天继续)<br />5.薇拉巡查中央庭 计划 体力2</p><h3 id="第五天">第五天</h3><p><strong>任务目标改为获取中央庭信任度</strong><br />1.建设建筑，使数据达标为科技30开发力22建设力22<br />2.安巡查高校 开发高校到4级<br />3.安巡查中央城区 建设购物中心<br />4.安巡查研究所 建设歌舞厅<br />5.剩余体力带安来回巡查东方古街和中央庭</p><h3 id="第六天">第六天</h3><p>1.巡查东方古街和中央庭，直至完成支线获取信任度<br />2.余下体力可以继续做我们的薇拉线，此时薇拉好感为56，且由于第五天已经做了一次支线，所以我们要需要8点体力完成后面的剧情<br />3.合理分配好日常巡查次数和礼物的使用<br />4.薇拉后面的剧情也是有好感加的，所以礼物不急着送<br />5.薇拉60点好感，首先要去回复薇拉的私信再去巡查中央城区，触发剧情渗透<br />6.薇拉继续巡查中央城区，触发剧情潜伏<br />7.把薇拉影装升好，并留下36w金币薇拉继续巡查中央城区，触发剧情突围。<br />8.留下2点体力，把薇拉好感升到100巡查中央城区，触发剧情约会</p><h3 id="第七天">第七天</h3><p>不好意思，不存在的，这时候你被锁在中央庭了，只能咸鱼</p><h1 id="后记">后记</h1><p>本攻略来自百度贴吧永远的七日之都吧精品区<br /><a href="https://tieba.baidu.com/p/5458693018?see_lz=1">原链接</a></p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>游戏</category>
      
      <category>永远的七日之都</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>游戏</tag>
      
      <tag>永远的七日之都</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何从官网下载驱动</title>
    <link href="/2017/10/28/2017-10-29-qudongjingling/"/>
    <url>/2017/10/28/2017-10-29-qudongjingling/</url>
    
    <content type="html"><![CDATA[<h1 id="如何从官网下载驱动">如何从官网下载驱动</h1><p>我们的电脑中，硬件是一个很重要的部分。而为了让这些硬件能够正常的运行，驱动是非常重要的一个软件。一般来说，很多人在面对跟驱动有关的问题时，第一反应是下一个驱动精灵。当然不可否认的是驱动精灵在大部分时候都能解决你的问题，但是你也注意到了，我说的是“大部分”。那么，还有一部分是怎样的呢？</p><p>我们的通常所使用的笔记本电脑都是有自己的型号的，而每一个型号的电脑都有他自己<strong>专门的</strong>驱动 。一般来说,驱动精灵都可以帮我们匹配我们电脑相应的驱动并进行安装，但是毕竟存在意外，有的时候驱动精灵在找不到<strong>专版</strong>驱动的情况下可能会给我们下载<strong>公版</strong>驱动。而有时候因位公版驱动与我们电脑本身的硬件并不完全匹配。这时候就会造成一些问题了。</p><h1 id="常见问题">常见问题</h1><p>最常见的就是在更新完驱动之后重启电脑时显示“无法重启电脑”，此时的原因就是某些驱动不匹配造成了系统无法正常开机。此时你需要做的就是进入安全模式，在设备管理器中删除掉错误的驱动，或者选择回退到你更新之前的驱动就可以解决问题了。当然，如果你连安全模式都无法进入，那么如果手上有PE盘，可以进入PE进行操作，否则的话，还是把你的电脑拿给专业人员修吧！<br />当然，电脑能够成功运行也并不是代表你的驱动就没有问题--<br />&gt;"哎呀,我的电脑更新驱动之后玩守望fps咋这么低啊"</p><p>很明显，我的这位室友就是因为更新了不适合的显卡驱动造成了这个问题。还有很多其他一些电脑的小问题--有些可能你都没有注意到————这些问题都是由于不合适的驱动造成的。看来安装合适自己电脑的驱动确实非常必要，那么问题来了，我们到底怎么安装适合自己电脑的驱动呢？</p><h1 id="官网下载驱动">官网下载驱动</h1><p>从标题开始我就一直在强调我们需要下载适合我们自己电脑的驱动。那么哪里有最适合我们自己电脑的驱动呢？当然是官网辣！现在我就来简单讲讲怎么从官网下载匹配本机型号的驱动。<br />在下载驱动之前，我们首先要做的是查看自己电脑的<strong>主机编号</strong>。<br />## 主机编号<br />&gt;主机编号也就是主机生产出厂的编号，简称SN(serial number)（服务序列号或服务编码）,用于厂家提供技术支持或报修用，一般在主机机身上，可能会和条形码粘贴在一起，笔记本SN在电脑底部，台式主机SN在机箱底部、顶部、两侧都有可能，如果是杂牌或组装就可能没有SN。</p><p>主机编号也有好几种方式可以查看，不过最常见也是最方便的也就只有两种，下面我就来讲一下这两方法的具体操作步骤<br />- 直接在电脑表面查看。听上去好像让人一脸懵逼，什么叫直接在电脑表面查看？实际上很简单，上面也说了，主机编号一般在你买电脑的包装盒上就有贴着，不过如果你已经把包装盒给扔了那怎么办呢？也不要紧，把你的笔记本翻过来（我知道你们没几个会带个台式机来学校），笔记本背面有一个白色的标签条贴在那边，上面就有你的主机编号。注意，主机编号一般是一串混合了字母和数字的东西，<strong>不要把你的电脑型号当成主机号咯</strong>。<br /><img src="http://a3.qpic.cn/psb?/V117MGIn3dBRDw/bv9NlS38dMtsXIbALJOf8VLrngD4SAufvS9TGm0EAVU!/b/dPIAAAAAAAAA&amp;bo=OASxBRgGOAgRCZg!&amp;rf=viewer_4" /><br />上图中划红线的就是主机编号。<br />- 通过BIOS查看。这个就很简单了，直接进入BIOS后再首页上就有主机编号，可能是S/N也可能是system serial number，总之只要看到一串很可疑（并不）的数字字母混合体就好啦，把它记下来（拍下来或者抄到纸上都行），备用。<br />查看好主机编号之后，我们就可以去官网下载驱动了。<br />## 搜索适合自己电脑的驱动<br />这里的第一步就是你要找到官网，确保你进入的是官网而不是什么奇奇怪怪的地方。在官网里面找到“服务与支持”或者是“下载”这一类的子页面，然后寻找驱动下载这个选项。或者在官网的页面上直接站内搜索驱动下载这一类字眼，来到驱动下载页面。例如下图的下载界面就是联想的驱动下载页<br /><img src="http://a1.qpic.cn/psb?/V117MGIn3dBRDw/kaP.WaN2Clnsdy2mNBLaYZ*1aobZEIg6O*bDhK0c4*k!/b/dPMAAAAAAAAA&amp;bo=VQX*AlUF*wIDACU!&amp;rf=viewer_4" /></p><p>在输入框中输入你刚才记下来的主机编号，回车或者点击搜索，即可来到你的电脑型号的驱动下载界面。<strong>选择你的操作系统</strong>（比如是windows10-64位还是Linux），选择好之后再回车就可以看到你电脑的驱动下载列表了。一般把列表里面的驱动全部选择下载就可以了。当然有的厂家也提供了更加快捷的方式————驱动管理，解释的通俗一点就跟驱动精灵用处一样，他会自动检测你的硬件并帮你安装驱动，不过由厂家提供的这个软件下载的驱动是完全匹配你的版本的，所有如果有这个选项你就只需要下载下来这一个程序并安装运行就可以让它帮你完成驱动的安装了。当然也有的厂家并没有这一程序，那么你就只能自己一个一个的把列表里面所有的驱动都下载下来并自行安装了。<br />## 自行安装下载好的驱动<br />之前下载好的文件应该都是压缩包文件，我建议你新建一个文件夹，然后把这些压缩包都丢进去。之后分别解压，得到的一系列文件夹就是你接下来需要用到的东西了。<br />依次打开每一个驱动的文件夹，找到<strong>setup.exe</strong>文件并运行安装，全部按照默认设置无脑下一步就好。一般没装完一个驱动系统就会询问你是否重启计算机来让设置生效，当然如果你愿意的花可以选择每安装一个驱动就重启一次电脑，不过我觉得大部分人不会去干这种事，所以在安装完毕之后全部都选择有“稍后重启”这个意思的选项，等你的驱动全部安装完了之后再手动重启电脑就好。<br />- 备注 有一些驱可能你运行setup.exe的时候会报错<em>此电脑不符合安装此程序的最低要求</em>或者其他的一些报错，这个没有关系，不能安装就跳过这一个驱动继续往下安装就好<br />- <strong>重要！</strong>在安装驱动的过程中千万不要人为关机或者是电脑因为没电而关机。否则会出现很严重的错误！安装驱动前请务必确定电脑状态良好！</p><h1 id="一些常见厂家的驱动下载页的链接">一些常见厂家的驱动下载页的链接</h1><p><a href="http://support.lenovo.com.cn/lenovo/wsi/Modules/NewDrive.aspx">联想中国</a><br /><a href="http://www.asus.com.cn/support/Download-Center/">华硕</a><br /><a href="https://support.hp.com/cn-zh/drivers">惠普中国</a></p><h1 id="本教程的视频链接">本教程的视频链接</h1><p><a href="http://www.bilibili.com/video/av15648463/">【科技部培训】1、告别驱动精灵，学会从官网下载驱动</a></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>计算机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇日志</title>
    <link href="/2017/10/28/2017-10-28-myFirstBlog/"/>
    <url>/2017/10/28/2017-10-28-myFirstBlog/</url>
    
    <content type="html"><![CDATA[<h1 id="第一篇日志">第一篇日志</h1><p>最近闲着无聊，搭个个人博客玩玩。正好以后有一些东西也可以发在这里。<br />嘛，看我明天发个教程啥的吧。</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
